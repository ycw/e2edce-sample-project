class e{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[e]&&(n[e]=[]),-1===n[e].indexOf(t)&&n[e].push(t)}removeEventListener(e,t){if(void 0===this._listeners)return;const n=this._listeners[e];if(void 0!==n){const e=n.indexOf(t);-1!==e&&n.splice(e,1)}}dispatchEvent(e){if(void 0===this._listeners)return;const t=this._listeners[e.type];if(void 0!==t){e.target=this;const n=t.slice(0);for(let t=0,i=n.length;t<i;t++)n[t].call(this,e);e.target=null}}}const t=[];for(let e=0;e<256;e++)t[e]=(e<16?"0":"")+e.toString(16);const n=Math.PI/180;function i(){const e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&n]+t[n>>8&255]+"-"+t[n>>16&15|64]+t[n>>24&255]+"-"+t[63&i|128]+t[i>>8&255]+"-"+t[i>>16&255]+t[i>>24&255]+t[255&r]+t[r>>8&255]+t[r>>16&255]+t[r>>24&255]).toLowerCase()}function r(e,t,n){return Math.max(t,Math.min(n,e))}function a(e){return e*n}function o(e){return 0==(e&e-1)&&0!==e}function s(e){}class l{constructor(e=0,t=0){this.isVector2=!0,this.x=e,this.y=t}set(e,t){return this.x=e,this.y=t,this}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}}class c{constructor(){this.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1]}set(e,t,n,i,r,a,o,s,l){const c=this.elements;return c[0]=e,c[1]=i,c[2]=o,c[3]=t,c[4]=r,c[5]=s,c[6]=n,c[7]=a,c[8]=l,this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],o=e[5],s=e[6],l=e[7],c=e[8],d=c*a-o*l,u=o*s-c*r,h=l*r-a*s,f=t*d+n*u+i*h;if(0===f)return this.set(0,0,0,0,0,0,0,0,0);const p=1/f;return e[0]=d*p,e[1]=(i*l-c*n)*p,e[2]=(o*n-i*a)*p,e[3]=u*p,e[4]=(c*t-i*s)*p,e[5]=(i*r-o*t)*p,e[6]=h*p,e[7]=(n*s-l*t)*p,e[8]=(a*t-n*r)*p,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}clone(){return(new this.constructor).fromArray(this.elements)}}function d(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}const u={srgb:{"srgb-linear":function(e){}},"srgb-linear":{srgb:function(e){}}},h={legacyMode:!0,get workingColorSpace(){return"srgb-linear"},convert:function(e,t,n){if(this.legacyMode||t===n||!t||!n)return e;if(u[t]&&void 0!==u[t][n]){const i=u[t][n];return e.r=i(e.r),e.g=i(e.g),e.b=i(e.b),e}throw new Error("Unsupported color space conversion.")},toWorkingColorSpace:function(e,t){return this.convert(e,t,this.workingColorSpace)}};class f{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,void 0===t&&void 0===n?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this}setHex(e,t="srgb"){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,h.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i="srgb-linear"){return this.r=e,this.g=t,this.b=n,h.toWorkingColorSpace(this,i),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}}let p;f.NAMES={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};class m{static getDataURL(e){if(/^data:/i.test(e.src))return e.src;if("undefined"==typeof HTMLCanvasElement)return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{void 0===p&&(p=d("canvas")),p.width=e.width,p.height=e.height;const n=p.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=p}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}static sRGBToLinear(e){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const t=d("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),r=i.data;for(let e=0;e<r.length;e++)r[e]=255*void r[e];return n.putImageData(i,0,0),t}if(e.data){const t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(255*void t[e]):t[e]=void t[e];return{data:t,width:e.width,height:e.height}}return e}}class g{constructor(e=null){this.isSource=!0,this.uuid=i(),this.data=e,this.version=0}set needsUpdate(e){!0===e&&this.version++}}let _=0;class v extends e{constructor(e=v.DEFAULT_IMAGE,t=v.DEFAULT_MAPPING,n=1001,r=1001,a=1006,o=1008,s=1023,d=1009,u=1,h=3e3){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:_++}),this.uuid=i(),this.name="",this.source=new g(e),this.mipmaps=[],this.mapping=t,this.wrapS=n,this.wrapT=r,this.magFilter=a,this.minFilter=o,this.anisotropy=u,this.format=s,this.internalFormat=null,this.type=d,this.offset=new l(0,0),this.repeat=new l(1,1),this.center=new l(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new c,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}set needsUpdate(e){!0===e&&(this.version++,this.source.needsUpdate=!0)}}v.DEFAULT_IMAGE=null,v.DEFAULT_MAPPING=300;class x{constructor(e=0,t=0,n=0,i=1){this.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}}class E extends e{constructor(e,t,n={}){super(),this.isWebGLRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new x(0,0,e,t),this.scissorTest=!1,this.viewport=new x(0,0,e,t);const i={width:e,height:t,depth:1};this.texture=new v(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.internalFormat=void 0!==n.internalFormat?n.internalFormat:null,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:1006,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null,this.samples=void 0!==n.samples?n.samples:0}}class S{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerp(e,t,n,i){return n.slerpQuaternions(e,t,i)}static slerpFlat(e,t,n,i,r,a,o){let s=n[i+0],l=n[i+1],c=n[i+2],d=n[i+3];const u=r[a+0],h=r[a+1],f=r[a+2],p=r[a+3];if(0===o)return e[t+0]=s,e[t+1]=l,e[t+2]=c,void(e[t+3]=d);if(1===o)return e[t+0]=u,e[t+1]=h,e[t+2]=f,void(e[t+3]=p);if(d!==p||s!==u||l!==h||c!==f){let e=1-o;const t=s*u+l*h+c*f+d*p,n=t>=0?1:-1,i=1-t*t;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,t*n);e=Math.sin(e*a)/r,o=Math.sin(o*a)/r}const r=o*n;if(s=s*e+u*r,l=l*e+h*r,c=c*e+f*r,d=d*e+p*r,e===1-o){const e=1/Math.sqrt(s*s+l*l+c*c+d*d);s*=e,l*=e,c*=e,d*=e}}e[t]=s,e[t+1]=l,e[t+2]=c,e[t+3]=d}static multiplyQuaternionsFlat(e,t,n,i,r,a){const o=n[i],s=n[i+1],l=n[i+2],c=n[i+3],d=r[a],u=r[a+1],h=r[a+2],f=r[a+3];return e[t]=o*f+c*d+s*h-l*u,e[t+1]=s*f+c*u+l*d-o*h,e[t+2]=l*f+c*h+o*u-s*d,e[t+3]=c*f-o*d-s*u-l*h,e}get x(){return this._x}get y(){return this._y}get z(){return this._z}get w(){return this._w}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=e._x,i=e._y,r=e._z,a=e._order,o=Math.cos,s=Math.sin,l=o(n/2),c=o(i/2),d=o(r/2),u=s(n/2),h=s(i/2),f=s(r/2);switch(a){case"XYZ":this._x=u*c*d+l*h*f,this._y=l*h*d-u*c*f,this._z=l*c*f+u*h*d,this._w=l*c*d-u*h*f;break;case"YXZ":this._x=u*c*d+l*h*f,this._y=l*h*d-u*c*f,this._z=l*c*f-u*h*d,this._w=l*c*d+u*h*f;break;case"ZXY":this._x=u*c*d-l*h*f,this._y=l*h*d+u*c*f,this._z=l*c*f+u*h*d,this._w=l*c*d-u*h*f;break;case"ZYX":this._x=u*c*d-l*h*f,this._y=l*h*d+u*c*f,this._z=l*c*f-u*h*d,this._w=l*c*d+u*h*f;break;case"YZX":this._x=u*c*d+l*h*f,this._y=l*h*d+u*c*f,this._z=l*c*f-u*h*d,this._w=l*c*d-u*h*f;break;case"XZY":this._x=u*c*d-l*h*f,this._y=l*h*d-u*c*f,this._z=l*c*f+u*h*d,this._w=l*c*d+u*h*f}return!1!==t&&this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],r=t[8],a=t[1],o=t[5],s=t[9],l=t[2],c=t[6],d=t[10],u=n+o+d;if(u>0){const e=.5/Math.sqrt(u+1);this._w=.25/e,this._x=(c-s)*e,this._y=(r-l)*e,this._z=(a-i)*e}else if(n>o&&n>d){const e=2*Math.sqrt(1+n-o-d);this._w=(c-s)/e,this._x=.25*e,this._y=(i+a)/e,this._z=(r+l)/e}else if(o>d){const e=2*Math.sqrt(1+o-n-d);this._w=(r-l)/e,this._x=(i+a)/e,this._y=.25*e,this._z=(s+c)/e}else{const e=2*Math.sqrt(1+d-n-o);this._w=(a-i)/e,this._x=(r+l)/e,this._y=(s+c)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}class M{constructor(e=0,t=0,n=0){this.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return void 0===n&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return void 0!==t?this.addVectors(e,t):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}sub(e,t){return void 0!==t?this.subVectors(e,t):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,r=e.elements;return this.x=r[0]*t+r[3]*n+r[6]*i,this.y=r[1]*t+r[4]*n+r[7]*i,this.z=r[2]*t+r[5]*n+r[8]*i,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,r=e.elements,a=1/(r[3]*t+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*t+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*t+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*t+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,r=e.x,a=e.y,o=e.z,s=e.w,l=s*t+a*i-o*n,c=s*n+o*t-r*i,d=s*i+r*n-a*t,u=-r*t-a*n-o*i;return this.x=l*s+u*-r+c*-o-d*-a,this.y=c*s+u*-a+d*-r-l*-o,this.z=d*s+u*-o+l*-a-c*-r,this}divideScalar(e){return this.multiplyScalar(1/e)}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}normalize(){return this.divideScalar(this.length()||1)}crossVectors(e,t){const n=e.x,i=e.y,r=e.z,a=t.x,o=t.y,s=t.z;return this.x=i*s-r*o,this.y=r*a-n*s,this.z=n*o-i*a,this}reflect(e){return this.sub(T.copy(e).multiplyScalar(2*this.dot(e)))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,4*t)}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}}const T=new M;class b{constructor(e=new M(1/0,1/0,1/0),t=new M(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}setFromBufferAttribute(e){let t=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0;for(let s=0,l=e.count;s<l;s++){const l=e.getX(s),c=e.getY(s),d=e.getZ(s);l<t&&(t=l),c<n&&(n=c),d<i&&(i=d),l>r&&(r=l),c>a&&(a=c),d>o&&(o=d)}return this.min.set(t,n,i),this.max.set(r,a,o),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}}class A{constructor(e=new M,t=-1){this.center=e,this.radius=t}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}}class w{constructor(){this.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(e,t,n,i,r,a,o,s,l,c,d,u,h,f,p,m){const g=this.elements;return g[0]=e,g[4]=t,g[8]=n,g[12]=i,g[1]=r,g[5]=a,g[9]=o,g[13]=s,g[2]=l,g[6]=c,g[10]=d,g[14]=u,g[3]=h,g[7]=f,g[11]=p,g[15]=m,this}clone(){return(new w).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}extractRotation(e){const t=this.elements,n=e.elements,i=1/C.setFromMatrixColumn(e,0).length(),r=1/C.setFromMatrixColumn(e,1).length(),a=1/C.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=0,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(y,e,L)}lookAt(e,t,n){const i=this.elements;return P.subVectors(e,t),0===P.lengthSq()&&(P.z=1),P.normalize(),R.crossVectors(n,P),0===R.lengthSq()&&(1===Math.abs(n.z)?P.x+=1e-4:P.z+=1e-4,P.normalize(),R.crossVectors(n,P)),R.normalize(),D.crossVectors(P,R),i[0]=R.x,i[4]=D.x,i[8]=P.x,i[1]=R.y,i[5]=D.y,i[9]=P.y,i[2]=R.z,i[6]=D.z,i[10]=P.z,this}multiply(e,t){return void 0!==t?this.multiplyMatrices(e,t):this.multiplyMatrices(this,e)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,r=this.elements,a=n[0],o=n[4],s=n[8],l=n[12],c=n[1],d=n[5],u=n[9],h=n[13],f=n[2],p=n[6],m=n[10],g=n[14],_=n[3],v=n[7],x=n[11],E=n[15],S=i[0],M=i[4],T=i[8],b=i[12],A=i[1],w=i[5],C=i[9],y=i[13],L=i[2],R=i[6],D=i[10],P=i[14],I=i[3],N=i[7],U=i[11],F=i[15];return r[0]=a*S+o*A+s*L+l*I,r[4]=a*M+o*w+s*R+l*N,r[8]=a*T+o*C+s*D+l*U,r[12]=a*b+o*y+s*P+l*F,r[1]=c*S+d*A+u*L+h*I,r[5]=c*M+d*w+u*R+h*N,r[9]=c*T+d*C+u*D+h*U,r[13]=c*b+d*y+u*P+h*F,r[2]=f*S+p*A+m*L+g*I,r[6]=f*M+p*w+m*R+g*N,r[10]=f*T+p*C+m*D+g*U,r[14]=f*b+p*y+m*P+g*F,r[3]=_*S+v*A+x*L+E*I,r[7]=_*M+v*w+x*R+E*N,r[11]=_*T+v*C+x*D+E*U,r[15]=_*b+v*y+x*P+E*F,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],r=e[12],a=e[1],o=e[5],s=e[9],l=e[13],c=e[2],d=e[6],u=e[10],h=e[14];return e[3]*(+r*s*d-i*l*d-r*o*u+n*l*u+i*o*h-n*s*h)+e[7]*(+t*s*h-t*l*u+r*a*u-i*a*h+i*l*c-r*s*c)+e[11]*(+t*l*d-t*o*h-r*a*d+n*a*h+r*o*c-n*l*c)+e[15]*(-i*o*c-t*s*d+t*o*u+i*a*d-n*a*u+n*s*c)}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],r=e[3],a=e[4],o=e[5],s=e[6],l=e[7],c=e[8],d=e[9],u=e[10],h=e[11],f=e[12],p=e[13],m=e[14],g=e[15],_=d*m*l-p*u*l+p*s*h-o*m*h-d*s*g+o*u*g,v=f*u*l-c*m*l-f*s*h+a*m*h+c*s*g-a*u*g,x=c*p*l-f*d*l+f*o*h-a*p*h-c*o*g+a*d*g,E=f*d*s-c*p*s-f*o*u+a*p*u+c*o*m-a*d*m,S=t*_+n*v+i*x+r*E;if(0===S)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const M=1/S;return e[0]=_*M,e[1]=(p*u*r-d*m*r-p*i*h+n*m*h+d*i*g-n*u*g)*M,e[2]=(o*m*r-p*s*r+p*i*l-n*m*l-o*i*g+n*s*g)*M,e[3]=(d*s*r-o*u*r-d*i*l+n*u*l+o*i*h-n*s*h)*M,e[4]=v*M,e[5]=(c*m*r-f*u*r+f*i*h-t*m*h-c*i*g+t*u*g)*M,e[6]=(f*s*r-a*m*r-f*i*l+t*m*l+a*i*g-t*s*g)*M,e[7]=(a*u*r-c*s*r+c*i*l-t*u*l-a*i*h+t*s*h)*M,e[8]=x*M,e[9]=(f*d*r-c*p*r-f*n*h+t*p*h+c*n*g-t*d*g)*M,e[10]=(a*p*r-f*o*r+f*n*l-t*p*l-a*n*g+t*o*g)*M,e[11]=(c*o*r-a*d*r-c*n*l+t*d*l+a*n*h-t*o*h)*M,e[12]=E*M,e[13]=(c*p*i-f*d*i+f*n*u-t*p*u-c*n*m+t*d*m)*M,e[14]=(f*o*i-a*p*i-f*n*s+t*p*s+a*n*m-t*o*m)*M,e[15]=(a*d*i-c*o*i+c*n*s-t*d*s-a*n*u+t*o*u)*M,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}compose(e,t,n){const i=this.elements,r=t._x,a=t._y,o=t._z,s=t._w,l=r+r,c=a+a,d=o+o,u=r*l,h=r*c,f=r*d,p=a*c,m=a*d,g=o*d,_=s*l,v=s*c,x=s*d,E=n.x,S=n.y,M=n.z;return i[0]=(1-(p+g))*E,i[1]=(h+x)*E,i[2]=(f-v)*E,i[3]=0,i[4]=(h-x)*S,i[5]=(1-(u+g))*S,i[6]=(m+_)*S,i[7]=0,i[8]=(f+v)*M,i[9]=(m-_)*M,i[10]=(1-(u+p))*M,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}makePerspective(e,t,n,i,r,a){const o=this.elements,s=2*r/(t-e),l=2*r/(n-i),c=(t+e)/(t-e),d=(n+i)/(n-i),u=-(a+r)/(a-r),h=-2*a*r/(a-r);return o[0]=s,o[4]=0,o[8]=c,o[12]=0,o[1]=0,o[5]=l,o[9]=d,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=h,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(e,t,n,i,r,a){const o=this.elements,s=1/(t-e),l=1/(n-i),c=1/(a-r),d=(t+e)*s,u=(n+i)*l,h=(a+r)*c;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-d,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*c,o[14]=-h,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}}const C=new M,y=new M(0,0,0),L=new M(1,1,1),R=new M,D=new M,P=new M,I=new w;class N{constructor(e=0,t=0,n=0,i=N.DefaultOrder){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}set x(e){this._x=e,this._onChangeCallback()}set z(e){this._z=e,this._onChangeCallback()}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,a=i[0],o=i[4],s=i[8],l=i[1],c=i[5],d=i[9],u=i[2],h=i[6],f=i[10];switch(t){case"XYZ":this._y=Math.asin(r(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-d,f),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(h,c),this._z=0);break;case"YXZ":this._x=Math.asin(-r(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(s,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,a),this._z=0);break;case"ZXY":this._x=Math.asin(r(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,a));break;case"ZYX":this._y=Math.asin(-r(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(h,f),this._z=Math.atan2(l,a)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(r(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-d,c),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(s,f));break;case"XZY":this._z=Math.asin(-r(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(h,c),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-d,f),this._y=0)}return this._order=t,!0===n&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return I.makeRotationFromQuaternion(e),this.setFromRotationMatrix(I,t,n)}_onChange(e){return this._onChangeCallback=e,this}}N.DefaultOrder="XYZ",N.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class U{constructor(){this.mask=1}enable(e){this.mask|=1<<e|0}disableAll(){this.mask=0}test(e){return 0!=(this.mask&e.mask)}}let F=0;const O=new S,B=new w,G=new M,H=new M,z={type:"added"};class k extends e{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:F++}),this.uuid=i(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=k.DefaultUp.clone();const e=new M,t=new N,n=new S,r=new M(1,1,1);t._onChange((function(){n.setFromEuler(t,!1)})),n._onChange((function(){t.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new w},normalMatrix:{value:new c}}),this.matrix=new w,this.matrixWorld=new w,this.matrixAutoUpdate=k.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new U,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}lookAt(e,t,n){e.isVector3?G.copy(e):G.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),H.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?B.lookAt(H,G,this.up):B.lookAt(G,H,this.up),this.quaternion.setFromRotationMatrix(B),i&&(B.extractRotation(i.matrixWorld),O.setFromRotationMatrix(B),this.quaternion.premultiply(O.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this||e&&e.isObject3D&&(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(z)),this}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(!1===this.visible)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(!0===e&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t){const e=this.children;for(let t=0,n=e.length;t<n;t++)e[t].updateWorldMatrix(!1,!0)}}}k.DefaultUp=new M(0,1,0),k.DefaultMatrixAutoUpdate=!0;let V=0;class W extends e{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:V++}),this.uuid=i(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(void 0!==e)for(const t in e){const n=e[t];if(void 0===n)continue;if("shading"===t){this.type,this.flatShading=1===n;continue}const i=this[t];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n:this.type}}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(null!==t){const e=t.length;n=new Array(e);for(let i=0;i!==e;++i)n[i]=t[i].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}}W.fromType=function(){return null};class X extends W{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new f(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}}class j{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===n,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}getX(e){return this.array[e*this.itemSize]}getY(e){return this.array[e*this.itemSize+1]}getZ(e){return this.array[e*this.itemSize+2]}}class Y extends j{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class K extends j{}class q extends j{constructor(e,t,n){super(new Float32Array(e),t,n)}}let Z=0;const $=new M,J=new b,Q=new b,ee=new M;class te extends e{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Z++}),this.uuid=i(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}setIndex(e){return Array.isArray(e)?this.index=new(function(e){for(let t=e.length-1;t>=0;--t)if(e[t]>65535)return!0;return!1}(e)?K:Y)(e,1):this.index=e,this}setAttribute(e,t){return this.attributes[e]=t,this}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new A);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute)this.boundingSphere.set(new M,1/0);else if(e){const n=this.boundingSphere.center;if(J.setFromBufferAttribute(e),t)for(let e=0,n=t.length;e<n;e++){const n=t[e];Q.setFromBufferAttribute(n),this.morphTargetsRelative?(ee.addVectors(J.min,Q.min),J.expandByPoint(ee),ee.addVectors(J.max,Q.max),J.expandByPoint(ee)):(J.expandByPoint(Q.min),J.expandByPoint(Q.max))}J.getCenter(n);let i=0;for(let t=0,r=e.count;t<r;t++)ee.fromBufferAttribute(e,t),i=Math.max(i,n.distanceToSquared(ee));if(t)for(let r=0,a=t.length;r<a;r++){const a=t[r],o=this.morphTargetsRelative;for(let t=0,r=a.count;t<r;t++)ee.fromBufferAttribute(a,t),o&&($.fromBufferAttribute(e,t),ee.add($)),i=Math.max(i,n.distanceToSquared(ee))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)}}dispose(){this.dispatchEvent({type:"dispose"})}}class ne extends k{constructor(e=new te,t=new X){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}updateMorphTargets(){const e=this.geometry.morphAttributes,t=Object.keys(e);if(t.length>0){const n=e[t[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,t=n.length;e<t;e++){const t=n[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[t]=e}}}}}class ie extends te{constructor(e=1,t=1,n=1,i=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const o=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const s=[],l=[],c=[],d=[];let u=0,h=0;function f(e,t,n,i,r,a,f,p,m,g,_){const v=a/m,x=f/g,E=a/2,S=f/2,T=p/2,b=m+1,A=g+1;let w=0,C=0;const y=new M;for(let a=0;a<A;a++){const o=a*x-S;for(let s=0;s<b;s++){const u=s*v-E;y[e]=u*i,y[t]=o*r,y[n]=T,l.push(y.x,y.y,y.z),y[e]=0,y[t]=0,y[n]=p>0?1:-1,c.push(y.x,y.y,y.z),d.push(s/m),d.push(1-a/g),w+=1}}for(let e=0;e<g;e++)for(let t=0;t<m;t++){const n=u+t+b*e,i=u+t+b*(e+1),r=u+(t+1)+b*(e+1),a=u+(t+1)+b*e;s.push(n,i,a),s.push(i,r,a),C+=6}o.addGroup(h,C,_),h+=C,u+=w}f("z","y","x",-1,-1,n,t,e,a,r,0),f("z","y","x",1,-1,n,t,-e,a,r,1),f("x","z","y",1,1,e,n,t,i,a,2),f("x","z","y",1,-1,e,n,-t,i,a,3),f("x","y","z",1,-1,e,t,n,i,r,4),f("x","y","z",-1,-1,e,t,-n,i,r,5),this.setIndex(s),this.setAttribute("position",new q(l,3)),this.setAttribute("normal",new q(c,3)),this.setAttribute("uv",new q(d,2))}static fromJSON(e){return new ie(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function re(e){const t={};for(const n in e){t[n]={};for(const i in e[n]){const r=e[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?t[n][i]=r.clone():Array.isArray(r)?t[n][i]=r.slice():t[n][i]=r}}return t}function ae(e){const t={};for(let n=0;n<e.length;n++){const i=re(e[n]);for(const e in i)t[e]=i[e]}return t}const oe={clone:re,merge:ae};class se extends W{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main(){\ngl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);\n}",this.fragmentShader="void main(){\ngl_FragColor=vec4(1.0,0.0,0.0,1.0);\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==e&&(e.attributes,this.setValues(e))}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=re(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}}class le extends k{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new w,this.projectionMatrix=new w,this.projectionMatrixInverse=new w}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}}class ce extends le{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(.5*n*this.fov)/this.zoom,i=2*t,r=this.aspect*i,a=-.5*r;const o=this.view;if(null!==this.view&&this.view.enabled){const e=o.fullWidth,n=o.fullHeight;a+=o.offsetX*r/e,t-=o.offsetY*i/n,r*=o.width/e,i*=o.height/n}const s=this.filmOffset;0!==s&&(a+=e*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(a,a+r,t,t-i,e,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}}class de extends E{}const ue=new M,he=new c;class fe{constructor(e=new M(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}distanceToPoint(e){return this.normal.dot(e)+this.constant}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||he.getNormalMatrix(e),i=this.coplanarPoint(ue).applyMatrix4(e),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}}const pe=new A;class me{constructor(e=new fe,t=new fe,n=new fe,i=new fe,r=new fe,a=new fe){this.planes=[e,t,n,i,r,a]}setFromProjectionMatrix(e){const t=this.planes,n=e.elements,i=n[0],r=n[1],a=n[2],o=n[3],s=n[4],l=n[5],c=n[6],d=n[7],u=n[8],h=n[9],f=n[10],p=n[11],m=n[12],g=n[13],_=n[14],v=n[15];return t[0].setComponents(o-i,d-s,p-u,v-m).normalize(),t[1].setComponents(o+i,d+s,p+u,v+m).normalize(),t[2].setComponents(o+r,d+l,p+h,v+g).normalize(),t[3].setComponents(o-r,d-l,p-h,v-g).normalize(),t[4].setComponents(o-a,d-c,p-f,v-_).normalize(),t[5].setComponents(o+a,d+c,p+f,v+_).normalize(),this}intersectsObject(e){const t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),pe.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(pe)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let e=0;e<6;e++)if(t[e].distanceToPoint(n)<i)return!1;return!0}}function ge(){return{setAnimationLoop:function(e){},setContext:function(e){}}}function _e(e,t){const n=t.isWebGL2,i=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),i.get(e)},remove:function(t){t.isInterleavedBufferAttribute&&(t=t.data);const n=i.get(t);n&&(e.deleteBuffer(n.buffer),i.delete(t))},update:function(t,r){if(t.isGLBufferAttribute){const e=i.get(t);return void((!e||e.version<t.version)&&i.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version}))}t.isInterleavedBufferAttribute&&(t=t.data);const a=i.get(t);void 0===a?i.set(t,function(t,i){const r=t.array,a=t.usage,o=e.createBuffer();let s;if(e.bindBuffer(i,o),e.bufferData(i,r,a),t.onUploadCallback(),r instanceof Float32Array)s=e.FLOAT;else if(r instanceof Uint16Array)if(t.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");s=e.HALF_FLOAT}else s=e.UNSIGNED_SHORT;else if(r instanceof Int16Array)s=e.SHORT;else if(r instanceof Uint32Array)s=e.UNSIGNED_INT;else if(r instanceof Int32Array)s=e.INT;else if(r instanceof Int8Array)s=e.BYTE;else if(r instanceof Uint8Array)s=e.UNSIGNED_BYTE;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);s=e.UNSIGNED_BYTE}return{buffer:o,type:s,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version}}(t,r)):a.version<t.version&&(a.buffer,a.version=t.version)}}}class ve extends te{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const r=e/2,a=t/2,o=Math.floor(n),s=Math.floor(i),l=o+1,c=s+1,d=e/o,u=t/s,h=[],f=[],p=[],m=[];for(let e=0;e<c;e++){const t=e*u-a;for(let n=0;n<l;n++){const i=n*d-r;f.push(i,-t,0),p.push(0,0,1),m.push(n/o),m.push(1-e/s)}}for(let e=0;e<s;e++)for(let t=0;t<o;t++){const n=t+l*e,i=t+l*(e+1),r=t+1+l*(e+1),a=t+1+l*e;h.push(n,i,a),h.push(i,r,a)}this.setIndex(h),this.setAttribute("position",new q(f,3)),this.setAttribute("normal",new q(p,3)),this.setAttribute("uv",new q(m,2))}static fromJSON(e){return new ve(e.width,e.height,e.widthSegments,e.heightSegments)}}const xe={alphamap_fragment:"#ifdef USE_ALPHAMAP\ndiffuseColor.a*=texture2D(alphaMap,vUv).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\nuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\nif(diffuseColor.a < alphaTest)discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\nuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\nfloat ambientOcclusion=(texture2D(aoMap,vUv2).r-1.0)*aoMapIntensity+1.0;\nreflectedLight.indirectDiffuse*=ambientOcclusion;\n#if defined( USE_ENVMAP ) && defined( STANDARD )\nfloat dotNV=saturate(dot(geometry.normal,geometry.viewDir));\nreflectedLight.indirectSpecular*=computeSpecularOcclusion(dotNV,ambientOcclusion,material.roughness);\n#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\nuniform sampler2D aoMap;\nuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed=vec3(position);",beginnormal_vertex:"vec3 objectNormal=vec3(normal);\n#ifdef USE_TANGENT\nvec3 objectTangent=vec3(tangent.xyz);\n#endif",bsdfs:"vec3 BRDF_Lambert(const in vec3 diffuseColor){\nreturn RECIPROCAL_PI*diffuseColor;\n}\n\nvec3 F_Schlick(const in vec3 f0,const in float f90,const in float dotVH){\nfloat fresnel=exp2((-5.55473*dotVH-6.98316)*dotVH);\nreturn f0*(1.0-fresnel)+(f90*fresnel);\n}\n\nfloat F_Schlick(const in float f0,const in float f90,const in float dotVH){\nfloat fresnel=exp2((-5.55473*dotVH-6.98316)*dotVH);\nreturn f0*(1.0-fresnel)+(f90*fresnel);\n}\n\nvec3 Schlick_to_F0(const in vec3 f,const in float f90,const in float dotVH){\nfloat x=clamp(1.0-dotVH,0.0,1.0);\nfloat x2=x*x;\nfloat x5=clamp(x*x2*x2,0.0,0.9999);\nreturn(f-vec3(f90)*x5)/(1.0-x5);\n}\nfloat V_GGX_SmithCorrelated(const in float alpha,const in float dotNL,const in float dotNV){\nfloat a2=pow2(alpha);\nfloat gv=dotNL*sqrt(a2+(1.0-a2)*pow2(dotNV));\nfloat gl=dotNV*sqrt(a2+(1.0-a2)*pow2(dotNL));\nreturn 0.5/max(gv+gl,EPSILON);\n}\nfloat D_GGX(const in float alpha,const in float dotNH){\nfloat a2=pow2(alpha);\nfloat denom=pow2(dotNH)*(a2-1.0)+1.0;\n\nreturn RECIPROCAL_PI*a2/pow2(denom);\n}\nvec3 BRDF_GGX(const in vec3 lightDir,const in vec3 viewDir,const in vec3 normal,const in vec3 f0,const in float f90,const in float roughness){\nfloat alpha=pow2(roughness);\n\nvec3 halfDir=normalize(lightDir+viewDir);\nfloat dotNL=saturate(dot(normal,lightDir));\nfloat dotNV=saturate(dot(normal,viewDir));\nfloat dotNH=saturate(dot(normal,halfDir));\nfloat dotVH=saturate(dot(viewDir,halfDir));\nvec3 F=F_Schlick(f0,f90,dotVH);\nfloat V=V_GGX_SmithCorrelated(alpha,dotNL,dotNV);\nfloat D=D_GGX(alpha,dotNH);\nreturn F*(V*D);\n}\n#ifdef USE_IRIDESCENCE\nvec3 BRDF_GGX_Iridescence(const in vec3 lightDir,const in vec3 viewDir,const in vec3 normal,const in vec3 f0,const in float f90,const in float iridescence,const in vec3 iridescenceFresnel,const in float roughness){\nfloat alpha=pow2(roughness);\n\nvec3 halfDir=normalize(lightDir+viewDir);\nfloat dotNL=saturate(dot(normal,lightDir));\nfloat dotNV=saturate(dot(normal,viewDir));\nfloat dotNH=saturate(dot(normal,halfDir));\nfloat dotVH=saturate(dot(viewDir,halfDir));\nvec3 F=mix(F_Schlick(f0,f90,dotVH),iridescenceFresnel,iridescence);\nfloat V=V_GGX_SmithCorrelated(alpha,dotNL,dotNV);\nfloat D=D_GGX(alpha,dotNH);\nreturn F*(V*D);\n}\n#endif\nvec2 LTC_Uv(const in vec3 N,const in vec3 V,const in float roughness){\nconst float LUT_SIZE=64.0;\nconst float LUT_SCALE=(LUT_SIZE-1.0)/LUT_SIZE;\nconst float LUT_BIAS=0.5/LUT_SIZE;\nfloat dotNV=saturate(dot(N,V));\nvec2 uv=vec2(roughness,sqrt(1.0-dotNV));\nuv=uv*LUT_SCALE+LUT_BIAS;\nreturn uv;\n}\nfloat LTC_ClippedSphereFormFactor(const in vec3 f){\nfloat l=length(f);\nreturn max((l*l+f.z)/(l+1.0),0.0);\n}\nvec3 LTC_EdgeVectorFormFactor(const in vec3 v1,const in vec3 v2){\nfloat x=dot(v1,v2);\nfloat y=abs(x);\nfloat a=0.8543985+(0.4965155+0.0145206*y)*y;\nfloat b=3.4175940+(4.1616724+y)*y;\nfloat v=a/b;\nfloat theta_sintheta=(x > 0.0)? v : 0.5*inversesqrt(max(1.0-x*x,1e-7))-v;\nreturn cross(v1,v2)*theta_sintheta;\n}\nvec3 LTC_Evaluate(const in vec3 N,const in vec3 V,const in vec3 P,const in mat3 mInv,const in vec3 rectCoords[4]){\nvec3 v1=rectCoords[1]-rectCoords[0];\nvec3 v2=rectCoords[3]-rectCoords[0];\nvec3 lightNormal=cross(v1,v2);\nif(dot(lightNormal,P-rectCoords[0])< 0.0)return vec3(0.0);\nvec3 T1,T2;\nT1=normalize(V-N*dot(V,N));\nT2=-cross(N,T1);\n\nmat3 mat=mInv*transposeMat3(mat3(T1,T2,N));\nvec3 coords[4];\ncoords[0]=mat*(rectCoords[0]-P);\ncoords[1]=mat*(rectCoords[1]-P);\ncoords[2]=mat*(rectCoords[2]-P);\ncoords[3]=mat*(rectCoords[3]-P);\ncoords[0]=normalize(coords[0]);\ncoords[1]=normalize(coords[1]);\ncoords[2]=normalize(coords[2]);\ncoords[3]=normalize(coords[3]);\nvec3 vectorFormFactor=vec3(0.0);\nvectorFormFactor+=LTC_EdgeVectorFormFactor(coords[0],coords[1]);\nvectorFormFactor+=LTC_EdgeVectorFormFactor(coords[1],coords[2]);\nvectorFormFactor+=LTC_EdgeVectorFormFactor(coords[2],coords[3]);\nvectorFormFactor+=LTC_EdgeVectorFormFactor(coords[3],coords[0]);\nfloat result=LTC_ClippedSphereFormFactor(vectorFormFactor);\nreturn vec3(result);\n}\nfloat G_BlinnPhong_Implicit(){\nreturn 0.25;\n}\nfloat D_BlinnPhong(const in float shininess,const in float dotNH){\nreturn RECIPROCAL_PI*(shininess*0.5+1.0)*pow(dotNH,shininess);\n}\nvec3 BRDF_BlinnPhong(const in vec3 lightDir,const in vec3 viewDir,const in vec3 normal,const in vec3 specularColor,const in float shininess){\nvec3 halfDir=normalize(lightDir+viewDir);\nfloat dotNH=saturate(dot(normal,halfDir));\nfloat dotVH=saturate(dot(viewDir,halfDir));\nvec3 F=F_Schlick(specularColor,1.0,dotVH);\nfloat G=G_BlinnPhong_Implicit();\nfloat D=D_BlinnPhong(shininess,dotNH);\nreturn F*(G*D);\n}\n\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness,float dotNH){\nfloat alpha=pow2(roughness);\nfloat invAlpha=1.0/alpha;\nfloat cos2h=dotNH*dotNH;\nfloat sin2h=max(1.0-cos2h,0.0078125);\n\nreturn(2.0+invAlpha)*pow(sin2h,invAlpha*0.5)/(2.0*PI);\n}\nfloat V_Neubelt(float dotNV,float dotNL){\nreturn saturate(1.0/(4.0*(dotNL+dotNV-dotNL*dotNV)));\n}\nvec3 BRDF_Sheen(const in vec3 lightDir,const in vec3 viewDir,const in vec3 normal,vec3 sheenColor,const in float sheenRoughness){\nvec3 halfDir=normalize(lightDir+viewDir);\nfloat dotNL=saturate(dot(normal,lightDir));\nfloat dotNV=saturate(dot(normal,viewDir));\nfloat dotNH=saturate(dot(normal,halfDir));\nfloat D=D_Charlie(sheenRoughness,dotNH);\nfloat V=V_Neubelt(dotNV,dotNL);\nreturn sheenColor*(D*V);\n}\n#endif",iridescence_fragment:"#ifdef USE_IRIDESCENCE\nconst mat3 XYZ_TO_REC709=mat3(\n3.2404542,-0.9692660,0.0556434,\n-1.5371385,1.8760108,-0.2040259,\n-0.4985314,0.0415560,1.0572252);\nvec3 Fresnel0ToIor(vec3 fresnel0){\nvec3 sqrtF0=sqrt(fresnel0);\nreturn(vec3(1.0)+sqrtF0)/(vec3(1.0)-sqrtF0);\n}\nvec3 IorToFresnel0(vec3 transmittedIor,float incidentIor){\nreturn pow2((transmittedIor-vec3(incidentIor))/(transmittedIor+vec3(incidentIor)));\n}\nfloat IorToFresnel0(float transmittedIor,float incidentIor){\nreturn pow2((transmittedIor-incidentIor)/(transmittedIor+incidentIor));\n}\nvec3 evalSensitivity(float OPD,vec3 shift){\nfloat phase=2.0*PI*OPD*1.0e-9;\nvec3 val=vec3(5.4856e-13,4.4201e-13,5.2481e-13);\nvec3 pos=vec3(1.6810e+06,1.7953e+06,2.2084e+06);\nvec3 var=vec3(4.3278e+09,9.3046e+09,6.6121e+09);\nvec3 xyz=val*sqrt(2.0*PI*var)*cos(pos*phase+shift)*exp(-pow2(phase)*var);\nxyz.x+=9.7470e-14*sqrt(2.0*PI*4.5282e+09)*cos(2.2399e+06*phase+shift[0])*exp(-4.5282e+09*pow2(phase));\nxyz/=1.0685e-7;\nvec3 srgb=XYZ_TO_REC709*xyz;\nreturn srgb;\n}\nvec3 evalIridescence(float outsideIOR,float eta2,float cosTheta1,float thinFilmThickness,vec3 baseF0){\nvec3 I;\nfloat iridescenceIOR=mix(outsideIOR,eta2,smoothstep(0.0,0.03,thinFilmThickness));\nfloat sinTheta2Sq=pow2(outsideIOR/iridescenceIOR)*(1.0-pow2(cosTheta1));\nfloat cosTheta2Sq=1.0-sinTheta2Sq;\nif(cosTheta2Sq < 0.0){\nreturn vec3(1.0);\n}\nfloat cosTheta2=sqrt(cosTheta2Sq);\nfloat R0=IorToFresnel0(iridescenceIOR,outsideIOR);\nfloat R12=F_Schlick(R0,1.0,cosTheta1);\nfloat R21=R12;\nfloat T121=1.0-R12;\nfloat phi12=0.0;\nif(iridescenceIOR < outsideIOR)phi12=PI;\nfloat phi21=PI-phi12;\nvec3 baseIOR=Fresnel0ToIor(clamp(baseF0,0.0,0.9999));\n\nvec3 R1=IorToFresnel0(baseIOR,iridescenceIOR);\nvec3 R23=F_Schlick(R1,1.0,cosTheta2);\nvec3 phi23=vec3(0.0);\nif(baseIOR[0]< iridescenceIOR)phi23[0]=PI;\nif(baseIOR[1]< iridescenceIOR)phi23[1]=PI;\nif(baseIOR[2]< iridescenceIOR)phi23[2]=PI;\nfloat OPD=2.0*iridescenceIOR*thinFilmThickness*cosTheta2;\nvec3 phi=vec3(phi21)+phi23;\nvec3 R123=clamp(R12*R23,1e-5,0.9999);\nvec3 r123=sqrt(R123);\nvec3 Rs=pow2(T121)*R23/(vec3(1.0)-R123);\nvec3 C0=R12+Rs;\nI=C0;\nvec3 Cm=Rs-T121;\nfor(int m=1;m <=2;++m){\nCm*=r123;\nvec3 Sm=2.0*evalSensitivity(float(m)*OPD,float(m)*phi);\nI+=Cm*Sm;\n}\nreturn max(I,vec3(0.0));\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd(){\nvec2 dSTdx=dFdx(vUv);\nvec2 dSTdy=dFdy(vUv);\nfloat Hll=bumpScale*texture2D(bumpMap,vUv).x;\nfloat dBx=bumpScale*texture2D(bumpMap,vUv+dSTdx).x-Hll;\nfloat dBy=bumpScale*texture2D(bumpMap,vUv+dSTdy).x-Hll;\nreturn vec2(dBx,dBy);\n}\nvec3 perturbNormalArb(vec3 surf_pos,vec3 surf_norm,vec2 dHdxy,float faceDirection){\nvec3 vSigmaX=vec3(dFdx(surf_pos.x),dFdx(surf_pos.y),dFdx(surf_pos.z));\nvec3 vSigmaY=vec3(dFdy(surf_pos.x),dFdy(surf_pos.y),dFdy(surf_pos.z));\nvec3 vN=surf_norm;\n\nvec3 R1=cross(vSigmaY,vN);\nvec3 R2=cross(vN,vSigmaX);\nfloat fDet=dot(vSigmaX,R1)*faceDirection;\nvec3 vGrad=sign(fDet)*(dHdxy.x*R1+dHdxy.y*R2);\nreturn normalize(abs(fDet)*surf_norm-vGrad);\n}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\nvec4 plane;\n#pragma unroll_loop_start\nfor(int i=0;i < UNION_CLIPPING_PLANES;i++){\nplane=clippingPlanes[i];\nif(dot(vClipPosition,plane.xyz)> plane.w)discard;\n}\n#pragma unroll_loop_end\n#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\nbool clipped=true;\n#pragma unroll_loop_start\nfor(int i=UNION_CLIPPING_PLANES;i < NUM_CLIPPING_PLANES;i++){\nplane=clippingPlanes[i];\nclipped=(dot(vClipPosition,plane.xyz)> plane.w)&& clipped;\n}\n#pragma unroll_loop_end\nif(clipped)discard;\n#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\nvarying vec3 vClipPosition;\nuniform vec4 clippingPlanes[NUM_CLIPPING_PLANES];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\nvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\nvClipPosition=-mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\ndiffuseColor*=vColor;\n#elif defined( USE_COLOR )\ndiffuseColor.rgb*=vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\nvarying vec4 vColor;\n#elif defined( USE_COLOR )\nvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\nvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\nvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\nvColor=vec4(1.0);\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\nvColor=vec3(1.0);\n#endif\n#ifdef USE_COLOR\nvColor*=color;\n#endif\n#ifdef USE_INSTANCING_COLOR\nvColor.xyz*=instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2(const in float x){return x*x;}\nvec3 pow2(const in vec3 x){return x*x;}\nfloat pow3(const in float x){return x*x*x;}\nfloat pow4(const in float x){float x2=x*x;return x2*x2;}\nfloat max3(const in vec3 v){return max(max(v.x,v.y),v.z);}\nfloat average(const in vec3 color){return dot(color,vec3(0.3333));}\nhighp float rand(const in vec2 uv){\nconst highp float a=12.9898,b=78.233,c=43758.5453;\nhighp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);\nreturn fract(sin(sn)*c);\n}\n#ifdef HIGH_PRECISION\nfloat precisionSafeLength(vec3 v){return length(v);}\n#else\nfloat precisionSafeLength(vec3 v){\nfloat maxComponent=max3(abs(v));\nreturn length(v/maxComponent)*maxComponent;\n}\n#endif\nstruct IncidentLight{\nvec3 color;\nvec3 direction;\nbool visible;\n};\nstruct ReflectedLight{\nvec3 directDiffuse;\nvec3 directSpecular;\nvec3 indirectDiffuse;\nvec3 indirectSpecular;\n};\nstruct GeometricContext{\nvec3 position;\nvec3 normal;\nvec3 viewDir;\n#ifdef USE_CLEARCOAT\nvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection(in vec3 dir,in mat4 matrix){\nreturn normalize((matrix*vec4(dir,0.0)).xyz);\n}\nvec3 inverseTransformDirection(in vec3 dir,in mat4 matrix){\nreturn normalize((vec4(dir,0.0)*matrix).xyz);\n}\nmat3 transposeMat3(const in mat3 m){\nmat3 tmp;\ntmp[0]=vec3(m[0].x,m[1].x,m[2].x);\ntmp[1]=vec3(m[0].y,m[1].y,m[2].y);\ntmp[2]=vec3(m[0].z,m[1].z,m[2].z);\nreturn tmp;\n}\nfloat linearToRelativeLuminance(const in vec3 color){\nvec3 weights=vec3(0.2126,0.7152,0.0722);\nreturn dot(weights,color.rgb);\n}\nbool isPerspectiveMatrix(mat4 m){\nreturn m[2][3]==-1.0;\n}\nvec2 equirectUv(in vec3 dir){\nfloat u=atan(dir.z,dir.x)*RECIPROCAL_PI2+0.5;\nfloat v=asin(clamp(dir.y,-1.0,1.0))*RECIPROCAL_PI+0.5;\nreturn vec2(u,v);\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction){\nvec3 absDirection=abs(direction);\nfloat face=-1.0;\nif(absDirection.x > absDirection.z){\nif(absDirection.x > absDirection.y)\nface=direction.x > 0.0 ? 0.0 : 3.0;\nelse\nface=direction.y > 0.0 ? 1.0 : 4.0;\n}else{\nif(absDirection.z > absDirection.y)\nface=direction.z > 0.0 ? 2.0 : 5.0;\nelse\nface=direction.y > 0.0 ? 1.0 : 4.0;\n}\nreturn face;\n}\nvec2 getUV(vec3 direction,float face){\nvec2 uv;\nif(face==0.0){\nuv=vec2(direction.z,direction.y)/abs(direction.x);\n}else if(face==1.0){\nuv=vec2(-direction.x,-direction.z)/abs(direction.y);\n}else if(face==2.0){\nuv=vec2(-direction.x,direction.y)/abs(direction.z);\n}else if(face==3.0){\nuv=vec2(-direction.z,direction.y)/abs(direction.x);\n}else if(face==4.0){\nuv=vec2(-direction.x,direction.z)/abs(direction.y);\n}else{\nuv=vec2(direction.x,direction.y)/abs(direction.z);\n}\nreturn 0.5*(uv+1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap,vec3 direction,float mipInt){\nfloat face=getFace(direction);\nfloat filterInt=max(cubeUV_minMipLevel-mipInt,0.0);\nmipInt=max(mipInt,cubeUV_minMipLevel);\nfloat faceSize=exp2(mipInt);\nvec2 uv=getUV(direction,face)*(faceSize-2.0)+1.0;\nif(face > 2.0){\nuv.y+=faceSize;\nface-=3.0;\n}\nuv.x+=face*faceSize;\nuv.x+=filterInt*3.0*cubeUV_minTileSize;\nuv.y+=4.0*(exp2(CUBEUV_MAX_MIP)-faceSize);\nuv.x*=CUBEUV_TEXEL_WIDTH;\nuv.y*=CUBEUV_TEXEL_HEIGHT;\n#ifdef texture2DGradEXT\nreturn texture2DGradEXT(envMap,uv,vec2(0.0),vec2(0.0)).rgb;\n\n#else\nreturn texture2D(envMap,uv).rgb;\n#endif\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 - 2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 - 1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness){\nfloat mip=0.0;\nif(roughness >=r1){\nmip=(r0-roughness)*(m1-m0)/(r0-r1)+m0;\n}else if(roughness >=r4){\nmip=(r1-roughness)*(m4-m1)/(r1-r4)+m1;\n}else if(roughness >=r5){\nmip=(r4-roughness)*(m5-m4)/(r4-r5)+m4;\n}else if(roughness >=r6){\nmip=(r5-roughness)*(m6-m5)/(r5-r6)+m5;\n}else{\nmip=-2.0*log2(1.16*roughness);\n}\nreturn mip;\n}\nvec4 textureCubeUV(sampler2D envMap,vec3 sampleDir,float roughness){\nfloat mip=clamp(roughnessToMip(roughness),m0,CUBEUV_MAX_MIP);\nfloat mipF=fract(mip);\nfloat mipInt=floor(mip);\nvec3 color0=bilinearCubeUV(envMap,sampleDir,mipInt);\nif(mipF==0.0){\nreturn vec4(color0,1.0);\n}else{\nvec3 color1=bilinearCubeUV(envMap,sampleDir,mipInt+1.0);\nreturn vec4(mix(color0,color1,mipF),1.0);\n}\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal=objectNormal;\n#ifdef USE_INSTANCING\nmat3 m=mat3(instanceMatrix);\ntransformedNormal/=vec3(dot(m[0],m[0]),dot(m[1],m[1]),dot(m[2],m[2]));\ntransformedNormal=m*transformedNormal;\n#endif\ntransformedNormal=normalMatrix*transformedNormal;\n#ifdef FLIP_SIDED\ntransformedNormal=-transformedNormal;\n#endif\n#ifdef USE_TANGENT\nvec3 transformedTangent=(modelViewMatrix*vec4(objectTangent,0.0)).xyz;\n#ifdef FLIP_SIDED\ntransformedTangent=-transformedTangent;\n#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\nuniform sampler2D displacementMap;\nuniform float displacementScale;\nuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\ntransformed+=normalize(objectNormal)*(texture2D(displacementMap,vUv).x*displacementScale+displacementBias);\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\nvec4 emissiveColor=texture2D(emissiveMap,vUv);\ntotalEmissiveRadiance*=emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\nuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor=linearToOutputTexel(gl_FragColor);",encodings_pars_fragment:"vec4 LinearToLinear(in vec4 value){\nreturn value;\n}\nvec4 LinearTosRGB(in vec4 value){\nreturn vec4(mix(pow(value.rgb,vec3(0.41666))*1.055-vec3(0.055),value.rgb*12.92,vec3(lessThanEqual(value.rgb,vec3(0.0031308)))),value.a);\n}",envmap_fragment:"#ifdef USE_ENVMAP\n#ifdef ENV_WORLDPOS\nvec3 cameraToFrag;\nif(isOrthographic){\ncameraToFrag=normalize(vec3(-viewMatrix[0][2],-viewMatrix[1][2],-viewMatrix[2][2]));\n}else{\ncameraToFrag=normalize(vWorldPosition-cameraPosition);\n}\nvec3 worldNormal=inverseTransformDirection(normal,viewMatrix);\n#ifdef ENVMAP_MODE_REFLECTION\nvec3 reflectVec=reflect(cameraToFrag,worldNormal);\n#else\nvec3 reflectVec=refract(cameraToFrag,worldNormal,refractionRatio);\n#endif\n#else\nvec3 reflectVec=vReflect;\n#endif\n#ifdef ENVMAP_TYPE_CUBE\nvec4 envColor=textureCube(envMap,vec3(flipEnvMap*reflectVec.x,reflectVec.yz));\n#elif defined( ENVMAP_TYPE_CUBE_UV )\nvec4 envColor=textureCubeUV(envMap,reflectVec,0.0);\n#else\nvec4 envColor=vec4(0.0);\n#endif\n#ifdef ENVMAP_BLENDING_MULTIPLY\noutgoingLight=mix(outgoingLight,outgoingLight*envColor.xyz,specularStrength*reflectivity);\n#elif defined( ENVMAP_BLENDING_MIX )\noutgoingLight=mix(outgoingLight,envColor.xyz,specularStrength*reflectivity);\n#elif defined( ENVMAP_BLENDING_ADD )\noutgoingLight+=envColor.xyz*specularStrength*reflectivity;\n#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\nuniform float envMapIntensity;\nuniform float flipEnvMap;\n#ifdef ENVMAP_TYPE_CUBE\nuniform samplerCube envMap;\n#else\nuniform sampler2D envMap;\n#endif\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n#define ENV_WORLDPOS\n#endif\n#ifdef ENV_WORLDPOS\nvarying vec3 vWorldPosition;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n#define ENV_WORLDPOS\n#endif\n#ifdef ENV_WORLDPOS\nvarying vec3 vWorldPosition;\n#else\nvarying vec3 vReflect;\nuniform float refractionRatio;\n#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\nvec3 getIBLIrradiance(const in vec3 normal){\n#if defined( ENVMAP_TYPE_CUBE_UV )\nvec3 worldNormal=inverseTransformDirection(normal,viewMatrix);\nvec4 envMapColor=textureCubeUV(envMap,worldNormal,1.0);\nreturn PI*envMapColor.rgb*envMapIntensity;\n#else\nreturn vec3(0.0);\n#endif\n}\nvec3 getIBLRadiance(const in vec3 viewDir,const in vec3 normal,const in float roughness){\n#if defined( ENVMAP_TYPE_CUBE_UV )\nvec3 reflectVec=reflect(-viewDir,normal);\nreflectVec=normalize(mix(reflectVec,normal,roughness*roughness));\nreflectVec=inverseTransformDirection(reflectVec,viewMatrix);\nvec4 envMapColor=textureCubeUV(envMap,reflectVec,roughness);\nreturn envMapColor.rgb*envMapIntensity;\n#else\nreturn vec3(0.0);\n#endif\n}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n#ifdef ENV_WORLDPOS\nvWorldPosition=worldPosition.xyz;\n#else\nvec3 cameraToVertex;\nif(isOrthographic){\ncameraToVertex=normalize(vec3(-viewMatrix[0][2],-viewMatrix[1][2],-viewMatrix[2][2]));\n}else{\ncameraToVertex=normalize(worldPosition.xyz-cameraPosition);\n}\nvec3 worldNormal=inverseTransformDirection(transformedNormal,viewMatrix);\n#ifdef ENVMAP_MODE_REFLECTION\nvReflect=reflect(cameraToVertex,worldNormal);\n#else\nvReflect=refract(cameraToVertex,worldNormal,refractionRatio);\n#endif\n#endif\n#endif",fog_vertex:"#ifdef USE_FOG\nvFogDepth=-mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\nvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n#ifdef FOG_EXP2\nfloat fogFactor=1.0-exp(-fogDensity*fogDensity*vFogDepth*vFogDepth);\n#else\nfloat fogFactor=smoothstep(fogNear,fogFar,vFogDepth);\n#endif\ngl_FragColor.rgb=mix(gl_FragColor.rgb,fogColor,fogFactor);\n#endif",fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\nvarying float vFogDepth;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\nuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance(vec3 normal,vec3 lightDirection){\nfloat dotNL=dot(normal,lightDirection);\nvec2 coord=vec2(dotNL*0.5+0.5,0.0);\n#ifdef USE_GRADIENTMAP\nreturn vec3(texture2D(gradientMap,coord).r);\n#else\nreturn(coord.x < 0.7)? vec3(0.7): vec3(1.0);\n#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\nvec4 lightMapTexel=texture2D(lightMap,vUv2);\nvec3 lightMapIrradiance=lightMapTexel.rgb*lightMapIntensity;\nreflectedLight.indirectDiffuse+=lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nuniform sampler2D lightMap;\nuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse=vec3(1.0);\nGeometricContext geometry;\ngeometry.position=mvPosition.xyz;\ngeometry.normal=normalize(transformedNormal);\ngeometry.viewDir=(isOrthographic)? vec3(0,0,1): normalize(-mvPosition.xyz);\nGeometricContext backGeometry;\nbackGeometry.position=geometry.position;\nbackGeometry.normal=-geometry.normal;\nbackGeometry.viewDir=geometry.viewDir;\nvLightFront=vec3(0.0);\nvIndirectFront=vec3(0.0);\n#ifdef DOUBLE_SIDED\nvLightBack=vec3(0.0);\nvIndirectBack=vec3(0.0);\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront+=getAmbientLightIrradiance(ambientLightColor);\nvIndirectFront+=getLightProbeIrradiance(lightProbe,geometry.normal);\n#ifdef DOUBLE_SIDED\nvIndirectBack+=getAmbientLightIrradiance(ambientLightColor);\nvIndirectBack+=getLightProbeIrradiance(lightProbe,backGeometry.normal);\n#endif\n#if NUM_POINT_LIGHTS > 0\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_POINT_LIGHTS;i++){\ngetPointLightInfo(pointLights[i],geometry,directLight);\ndotNL=dot(geometry.normal,directLight.direction);\ndirectLightColor_Diffuse=directLight.color;\nvLightFront+=saturate(dotNL)*directLightColor_Diffuse;\n#ifdef DOUBLE_SIDED\nvLightBack+=saturate(-dotNL)*directLightColor_Diffuse;\n#endif\n}\n#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_SPOT_LIGHTS;i++){\ngetSpotLightInfo(spotLights[i],geometry,directLight);\ndotNL=dot(geometry.normal,directLight.direction);\ndirectLightColor_Diffuse=directLight.color;\nvLightFront+=saturate(dotNL)*directLightColor_Diffuse;\n#ifdef DOUBLE_SIDED\nvLightBack+=saturate(-dotNL)*directLightColor_Diffuse;\n#endif\n}\n#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_DIR_LIGHTS;i++){\ngetDirectionalLightInfo(directionalLights[i],geometry,directLight);\ndotNL=dot(geometry.normal,directLight.direction);\ndirectLightColor_Diffuse=directLight.color;\nvLightFront+=saturate(dotNL)*directLightColor_Diffuse;\n#ifdef DOUBLE_SIDED\nvLightBack+=saturate(-dotNL)*directLightColor_Diffuse;\n#endif\n}\n#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_HEMI_LIGHTS;i++){\nvIndirectFront+=getHemisphereLightIrradiance(hemisphereLights[i],geometry.normal);\n#ifdef DOUBLE_SIDED\nvIndirectBack+=getHemisphereLightIrradiance(hemisphereLights[i],backGeometry.normal);\n#endif\n}\n#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[9];\nvec3 shGetIrradianceAt(in vec3 normal,in vec3 shCoefficients[9]){\nfloat x=normal.x,y=normal.y,z=normal.z;\nvec3 result=shCoefficients[0]*0.886227;\nresult+=shCoefficients[1]*2.0*0.511664*y;\nresult+=shCoefficients[2]*2.0*0.511664*z;\nresult+=shCoefficients[3]*2.0*0.511664*x;\nresult+=shCoefficients[4]*2.0*0.429043*x*y;\nresult+=shCoefficients[5]*2.0*0.429043*y*z;\nresult+=shCoefficients[6]*(0.743125*z*z-0.247708);\nresult+=shCoefficients[7]*2.0*0.429043*x*z;\nresult+=shCoefficients[8]*0.429043*(x*x-y*y);\nreturn result;\n}\nvec3 getLightProbeIrradiance(const in vec3 lightProbe[9],const in vec3 normal){\nvec3 worldNormal=inverseTransformDirection(normal,viewMatrix);\nvec3 irradiance=shGetIrradianceAt(worldNormal,lightProbe);\nreturn irradiance;\n}\nvec3 getAmbientLightIrradiance(const in vec3 ambientLightColor){\nvec3 irradiance=ambientLightColor;\nreturn irradiance;\n}\nfloat getDistanceAttenuation(const in float lightDistance,const in float cutoffDistance,const in float decayExponent){\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\nfloat distanceFalloff=1.0/max(pow(lightDistance,decayExponent),0.01);\nif(cutoffDistance > 0.0){\ndistanceFalloff*=pow2(saturate(1.0-pow4(lightDistance/cutoffDistance)));\n}\nreturn distanceFalloff;\n#else\nif(cutoffDistance > 0.0 && decayExponent > 0.0){\nreturn pow(saturate(-lightDistance/cutoffDistance+1.0),decayExponent);\n}\nreturn 1.0;\n#endif\n}\nfloat getSpotAttenuation(const in float coneCosine,const in float penumbraCosine,const in float angleCosine){\nreturn smoothstep(coneCosine,penumbraCosine,angleCosine);\n}\n#if NUM_DIR_LIGHTS > 0\nstruct DirectionalLight{\nvec3 direction;\nvec3 color;\n};\nuniform DirectionalLight directionalLights[NUM_DIR_LIGHTS];\nvoid getDirectionalLightInfo(const in DirectionalLight directionalLight,const in GeometricContext geometry,out IncidentLight light){\nlight.color=directionalLight.color;\nlight.direction=directionalLight.direction;\nlight.visible=true;\n}\n#endif\n#if NUM_POINT_LIGHTS > 0\nstruct PointLight{\nvec3 position;\nvec3 color;\nfloat distance;\nfloat decay;\n};\nuniform PointLight pointLights[NUM_POINT_LIGHTS];\nvoid getPointLightInfo(const in PointLight pointLight,const in GeometricContext geometry,out IncidentLight light){\nvec3 lVector=pointLight.position-geometry.position;\nlight.direction=normalize(lVector);\nfloat lightDistance=length(lVector);\nlight.color=pointLight.color;\nlight.color*=getDistanceAttenuation(lightDistance,pointLight.distance,pointLight.decay);\nlight.visible=(light.color !=vec3(0.0));\n}\n#endif\n#if NUM_SPOT_LIGHTS > 0\nstruct SpotLight{\nvec3 position;\nvec3 direction;\nvec3 color;\nfloat distance;\nfloat decay;\nfloat coneCos;\nfloat penumbraCos;\n};\nuniform SpotLight spotLights[NUM_SPOT_LIGHTS];\nvoid getSpotLightInfo(const in SpotLight spotLight,const in GeometricContext geometry,out IncidentLight light){\nvec3 lVector=spotLight.position-geometry.position;\nlight.direction=normalize(lVector);\nfloat angleCos=dot(light.direction,spotLight.direction);\nfloat spotAttenuation=getSpotAttenuation(spotLight.coneCos,spotLight.penumbraCos,angleCos);\nif(spotAttenuation > 0.0){\nfloat lightDistance=length(lVector);\nlight.color=spotLight.color*spotAttenuation;\nlight.color*=getDistanceAttenuation(lightDistance,spotLight.distance,spotLight.decay);\nlight.visible=(light.color !=vec3(0.0));\n}else{\nlight.color=vec3(0.0);\nlight.visible=false;\n}\n}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\nstruct RectAreaLight{\nvec3 color;\nvec3 position;\nvec3 halfWidth;\nvec3 halfHeight;\n};\nuniform sampler2D ltc_1;\n\nuniform sampler2D ltc_2;\n\nuniform RectAreaLight rectAreaLights[NUM_RECT_AREA_LIGHTS];\n#endif\n#if NUM_HEMI_LIGHTS > 0\nstruct HemisphereLight{\nvec3 direction;\nvec3 skyColor;\nvec3 groundColor;\n};\nuniform HemisphereLight hemisphereLights[NUM_HEMI_LIGHTS];\nvec3 getHemisphereLightIrradiance(const in HemisphereLight hemiLight,const in vec3 normal){\nfloat dotNL=dot(normal,hemiLight.direction);\nfloat hemiDiffuseWeight=0.5*dotNL+0.5;\nvec3 irradiance=mix(hemiLight.groundColor,hemiLight.skyColor,hemiDiffuseWeight);\nreturn irradiance;\n}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor=diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial{\nvec3 diffuseColor;\n};\nvoid RE_Direct_Toon(const in IncidentLight directLight,const in GeometricContext geometry,const in ToonMaterial material,inout ReflectedLight reflectedLight){\nvec3 irradiance=getGradientIrradiance(geometry.normal,directLight.direction)*directLight.color;\nreflectedLight.directDiffuse+=irradiance*BRDF_Lambert(material.diffuseColor);\n}\nvoid RE_IndirectDiffuse_Toon(const in vec3 irradiance,const in GeometricContext geometry,const in ToonMaterial material,inout ReflectedLight reflectedLight){\nreflectedLight.indirectDiffuse+=irradiance*BRDF_Lambert(material.diffuseColor);\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor=diffuseColor.rgb;\nmaterial.specularColor=specular;\nmaterial.specularShininess=shininess;\nmaterial.specularStrength=specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial{\nvec3 diffuseColor;\nvec3 specularColor;\nfloat specularShininess;\nfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong(const in IncidentLight directLight,const in GeometricContext geometry,const in BlinnPhongMaterial material,inout ReflectedLight reflectedLight){\nfloat dotNL=saturate(dot(geometry.normal,directLight.direction));\nvec3 irradiance=dotNL*directLight.color;\nreflectedLight.directDiffuse+=irradiance*BRDF_Lambert(material.diffuseColor);\nreflectedLight.directSpecular+=irradiance*BRDF_BlinnPhong(directLight.direction,geometry.viewDir,geometry.normal,material.specularColor,material.specularShininess)*material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong(const in vec3 irradiance,const in GeometricContext geometry,const in BlinnPhongMaterial material,inout ReflectedLight reflectedLight){\nreflectedLight.indirectDiffuse+=irradiance*BRDF_Lambert(material.diffuseColor);\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor=diffuseColor.rgb*(1.0-metalnessFactor);\nvec3 dxy=max(abs(dFdx(geometryNormal)),abs(dFdy(geometryNormal)));\nfloat geometryRoughness=max(max(dxy.x,dxy.y),dxy.z);\nmaterial.roughness=max(roughnessFactor,0.0525);\n\nmaterial.roughness+=geometryRoughness;\nmaterial.roughness=min(material.roughness,1.0);\n#ifdef IOR\n#ifdef SPECULAR\nfloat specularIntensityFactor=specularIntensity;\nvec3 specularColorFactor=specularColor;\n#ifdef USE_SPECULARINTENSITYMAP\nspecularIntensityFactor*=texture2D(specularIntensityMap,vUv).a;\n#endif\n#ifdef USE_SPECULARCOLORMAP\nspecularColorFactor*=texture2D(specularColorMap,vUv).rgb;\n#endif\nmaterial.specularF90=mix(specularIntensityFactor,1.0,metalnessFactor);\n#else\nfloat specularIntensityFactor=1.0;\nvec3 specularColorFactor=vec3(1.0);\nmaterial.specularF90=1.0;\n#endif\nmaterial.specularColor=mix(min(pow2((ior-1.0)/(ior+1.0))*specularColorFactor,vec3(1.0))*specularIntensityFactor,diffuseColor.rgb,metalnessFactor);\n#else\nmaterial.specularColor=mix(vec3(0.04),diffuseColor.rgb,metalnessFactor);\nmaterial.specularF90=1.0;\n#endif\n#ifdef USE_CLEARCOAT\nmaterial.clearcoat=clearcoat;\nmaterial.clearcoatRoughness=clearcoatRoughness;\nmaterial.clearcoatF0=vec3(0.04);\nmaterial.clearcoatF90=1.0;\n#ifdef USE_CLEARCOATMAP\nmaterial.clearcoat*=texture2D(clearcoatMap,vUv).x;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\nmaterial.clearcoatRoughness*=texture2D(clearcoatRoughnessMap,vUv).y;\n#endif\nmaterial.clearcoat=saturate(material.clearcoat);\n\nmaterial.clearcoatRoughness=max(material.clearcoatRoughness,0.0525);\nmaterial.clearcoatRoughness+=geometryRoughness;\nmaterial.clearcoatRoughness=min(material.clearcoatRoughness,1.0);\n#endif\n#ifdef USE_IRIDESCENCE\nmaterial.iridescence=iridescence;\nmaterial.iridescenceIOR=iridescenceIOR;\n#ifdef USE_IRIDESCENCEMAP\nmaterial.iridescence*=texture2D(iridescenceMap,vUv).r;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\nmaterial.iridescenceThickness=(iridescenceThicknessMaximum-iridescenceThicknessMinimum)*texture2D(iridescenceThicknessMap,vUv).g+iridescenceThicknessMinimum;\n#else\nmaterial.iridescenceThickness=iridescenceThicknessMaximum;\n#endif\n#endif\n#ifdef USE_SHEEN\nmaterial.sheenColor=sheenColor;\n#ifdef USE_SHEENCOLORMAP\nmaterial.sheenColor*=texture2D(sheenColorMap,vUv).rgb;\n#endif\nmaterial.sheenRoughness=clamp(sheenRoughness,0.07,1.0);\n#ifdef USE_SHEENROUGHNESSMAP\nmaterial.sheenRoughness*=texture2D(sheenRoughnessMap,vUv).a;\n#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial{\nvec3 diffuseColor;\nfloat roughness;\nvec3 specularColor;\nfloat specularF90;\n#ifdef USE_CLEARCOAT\nfloat clearcoat;\nfloat clearcoatRoughness;\nvec3 clearcoatF0;\nfloat clearcoatF90;\n#endif\n#ifdef USE_IRIDESCENCE\nfloat iridescence;\nfloat iridescenceIOR;\nfloat iridescenceThickness;\nvec3 iridescenceFresnel;\nvec3 iridescenceF0;\n#endif\n#ifdef USE_SHEEN\nvec3 sheenColor;\nfloat sheenRoughness;\n#endif\n};\nvec3 clearcoatSpecular=vec3(0.0);\nvec3 sheenSpecular=vec3(0.0);\nfloat IBLSheenBRDF(const in vec3 normal,const in vec3 viewDir,const in float roughness){\nfloat dotNV=saturate(dot(normal,viewDir));\nfloat r2=roughness*roughness;\nfloat a=roughness < 0.25 ?-339.2*r2+161.4*roughness-25.9 :-8.48*r2+14.3*roughness-9.95;\nfloat b=roughness < 0.25 ? 44.0*r2-23.7*roughness+3.26 : 1.97*r2-3.27*roughness+0.72;\nfloat DG=exp(a*dotNV+b)+(roughness < 0.25 ? 0.0 : 0.1*(roughness-0.25));\nreturn saturate(DG*RECIPROCAL_PI);\n}\nvec2 DFGApprox(const in vec3 normal,const in vec3 viewDir,const in float roughness){\nfloat dotNV=saturate(dot(normal,viewDir));\nconst vec4 c0=vec4(-1,-0.0275,-0.572,0.022);\nconst vec4 c1=vec4(1,0.0425,1.04,-0.04);\nvec4 r=roughness*c0+c1;\nfloat a004=min(r.x*r.x,exp2(-9.28*dotNV))*r.x+r.y;\nvec2 fab=vec2(-1.04,1.04)*a004+r.zw;\nreturn fab;\n}\nvec3 EnvironmentBRDF(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float roughness){\nvec2 fab=DFGApprox(normal,viewDir,roughness);\nreturn specularColor*fab.x+specularF90*fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float iridescence,const in vec3 iridescenceF0,const in float roughness,inout vec3 singleScatter,inout vec3 multiScatter){\n#else\nvoid computeMultiscattering(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float roughness,inout vec3 singleScatter,inout vec3 multiScatter){\n#endif\nvec2 fab=DFGApprox(normal,viewDir,roughness);\n#ifdef USE_IRIDESCENCE\nvec3 Fr=mix(specularColor,iridescenceF0,iridescence);\n#else\nvec3 Fr=specularColor;\n#endif\nvec3 FssEss=Fr*fab.x+specularF90*fab.y;\nfloat Ess=fab.x+fab.y;\nfloat Ems=1.0-Ess;\nvec3 Favg=Fr+(1.0-Fr)*0.047619;\n\nvec3 Fms=FssEss*Favg/(1.0-Ems*Favg);\nsingleScatter+=FssEss;\nmultiScatter+=Fms*Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\nvoid RE_Direct_RectArea_Physical(const in RectAreaLight rectAreaLight,const in GeometricContext geometry,const in PhysicalMaterial material,inout ReflectedLight reflectedLight){\nvec3 normal=geometry.normal;\nvec3 viewDir=geometry.viewDir;\nvec3 position=geometry.position;\nvec3 lightPos=rectAreaLight.position;\nvec3 halfWidth=rectAreaLight.halfWidth;\nvec3 halfHeight=rectAreaLight.halfHeight;\nvec3 lightColor=rectAreaLight.color;\nfloat roughness=material.roughness;\nvec3 rectCoords[4];\nrectCoords[0]=lightPos+halfWidth-halfHeight;\n\nrectCoords[1]=lightPos-halfWidth-halfHeight;\nrectCoords[2]=lightPos-halfWidth+halfHeight;\nrectCoords[3]=lightPos+halfWidth+halfHeight;\nvec2 uv=LTC_Uv(normal,viewDir,roughness);\nvec4 t1=texture2D(ltc_1,uv);\nvec4 t2=texture2D(ltc_2,uv);\nmat3 mInv=mat3(\nvec3(t1.x,0,t1.y),\nvec3(0,1,0),\nvec3(t1.z,0,t1.w)\n);\nvec3 fresnel=(material.specularColor*t2.x+(vec3(1.0)-material.specularColor)*t2.y);\nreflectedLight.directSpecular+=lightColor*fresnel*LTC_Evaluate(normal,viewDir,position,mInv,rectCoords);\nreflectedLight.directDiffuse+=lightColor*material.diffuseColor*LTC_Evaluate(normal,viewDir,position,mat3(1.0),rectCoords);\n}\n#endif\nvoid RE_Direct_Physical(const in IncidentLight directLight,const in GeometricContext geometry,const in PhysicalMaterial material,inout ReflectedLight reflectedLight){\nfloat dotNL=saturate(dot(geometry.normal,directLight.direction));\nvec3 irradiance=dotNL*directLight.color;\n#ifdef USE_CLEARCOAT\nfloat dotNLcc=saturate(dot(geometry.clearcoatNormal,directLight.direction));\nvec3 ccIrradiance=dotNLcc*directLight.color;\nclearcoatSpecular+=ccIrradiance*BRDF_GGX(directLight.direction,geometry.viewDir,geometry.clearcoatNormal,material.clearcoatF0,material.clearcoatF90,material.clearcoatRoughness);\n#endif\n#ifdef USE_SHEEN\nsheenSpecular+=irradiance*BRDF_Sheen(directLight.direction,geometry.viewDir,geometry.normal,material.sheenColor,material.sheenRoughness);\n#endif\n#ifdef USE_IRIDESCENCE\nreflectedLight.directSpecular+=irradiance*BRDF_GGX_Iridescence(directLight.direction,geometry.viewDir,geometry.normal,material.specularColor,material.specularF90,material.iridescence,material.iridescenceFresnel,material.roughness);\n#else\nreflectedLight.directSpecular+=irradiance*BRDF_GGX(directLight.direction,geometry.viewDir,geometry.normal,material.specularColor,material.specularF90,material.roughness);\n#endif\nreflectedLight.directDiffuse+=irradiance*BRDF_Lambert(material.diffuseColor);\n}\nvoid RE_IndirectDiffuse_Physical(const in vec3 irradiance,const in GeometricContext geometry,const in PhysicalMaterial material,inout ReflectedLight reflectedLight){\nreflectedLight.indirectDiffuse+=irradiance*BRDF_Lambert(material.diffuseColor);\n}\nvoid RE_IndirectSpecular_Physical(const in vec3 radiance,const in vec3 irradiance,const in vec3 clearcoatRadiance,const in GeometricContext geometry,const in PhysicalMaterial material,inout ReflectedLight reflectedLight){\n#ifdef USE_CLEARCOAT\nclearcoatSpecular+=clearcoatRadiance*EnvironmentBRDF(geometry.clearcoatNormal,geometry.viewDir,material.clearcoatF0,material.clearcoatF90,material.clearcoatRoughness);\n#endif\n#ifdef USE_SHEEN\nsheenSpecular+=irradiance*material.sheenColor*IBLSheenBRDF(geometry.normal,geometry.viewDir,material.sheenRoughness);\n#endif\nvec3 singleScattering=vec3(0.0);\nvec3 multiScattering=vec3(0.0);\nvec3 cosineWeightedIrradiance=irradiance*RECIPROCAL_PI;\n#ifdef USE_IRIDESCENCE\ncomputeMultiscatteringIridescence(geometry.normal,geometry.viewDir,material.specularColor,material.specularF90,material.iridescence,material.iridescenceFresnel,material.roughness,singleScattering,multiScattering);\n#else\ncomputeMultiscattering(geometry.normal,geometry.viewDir,material.specularColor,material.specularF90,material.roughness,singleScattering,multiScattering);\n#endif\nvec3 totalScattering=singleScattering+multiScattering;\nvec3 diffuse=material.diffuseColor*(1.0-max(max(totalScattering.r,totalScattering.g),totalScattering.b));\nreflectedLight.indirectSpecular+=radiance*singleScattering;\nreflectedLight.indirectSpecular+=multiScattering*cosineWeightedIrradiance;\nreflectedLight.indirectDiffuse+=diffuse*cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion(const in float dotNV,const in float ambientOcclusion,const in float roughness){\nreturn saturate(pow(dotNV+ambientOcclusion,exp2(-16.0*roughness-1.0))-1.0+ambientOcclusion);\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position=-vViewPosition;\ngeometry.normal=normal;\ngeometry.viewDir=(isOrthographic)? vec3(0,0,1): normalize(vViewPosition);\n#ifdef USE_CLEARCOAT\ngeometry.clearcoatNormal=clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\nfloat dotNVi=saturate(dot(normal,geometry.viewDir));\nif(material.iridescenceThickness==0.0){\nmaterial.iridescence=0.0;\n}else{\nmaterial.iridescence=saturate(material.iridescence);\n}\nif(material.iridescence > 0.0){\nmaterial.iridescenceFresnel=evalIridescence(1.0,material.iridescenceIOR,dotNVi,material.iridescenceThickness,material.specularColor);\nmaterial.iridescenceF0=Schlick_to_F0(material.iridescenceFresnel,1.0,dotNVi);\n}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\nPointLight pointLight;\n#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\nPointLightShadow pointLightShadow;\n#endif\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_POINT_LIGHTS;i++){\npointLight=pointLights[i];\ngetPointLightInfo(pointLight,geometry,directLight);\n#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\npointLightShadow=pointLightShadows[i];\ndirectLight.color*=all(bvec2(directLight.visible,receiveShadow))? getPointShadow(pointShadowMap[i],pointLightShadow.shadowMapSize,pointLightShadow.shadowBias,pointLightShadow.shadowRadius,vPointShadowCoord[i],pointLightShadow.shadowCameraNear,pointLightShadow.shadowCameraFar): 1.0;\n#endif\nRE_Direct(directLight,geometry,material,reflectedLight);\n}\n#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\nSpotLight spotLight;\n#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\nSpotLightShadow spotLightShadow;\n#endif\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_SPOT_LIGHTS;i++){\nspotLight=spotLights[i];\ngetSpotLightInfo(spotLight,geometry,directLight);\n#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\nspotLightShadow=spotLightShadows[i];\ndirectLight.color*=all(bvec2(directLight.visible,receiveShadow))? getShadow(spotShadowMap[i],spotLightShadow.shadowMapSize,spotLightShadow.shadowBias,spotLightShadow.shadowRadius,vSpotShadowCoord[i]): 1.0;\n#endif\nRE_Direct(directLight,geometry,material,reflectedLight);\n}\n#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\nDirectionalLight directionalLight;\n#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\nDirectionalLightShadow directionalLightShadow;\n#endif\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_DIR_LIGHTS;i++){\ndirectionalLight=directionalLights[i];\ngetDirectionalLightInfo(directionalLight,geometry,directLight);\n#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\ndirectionalLightShadow=directionalLightShadows[i];\ndirectLight.color*=all(bvec2(directLight.visible,receiveShadow))? getShadow(directionalShadowMap[i],directionalLightShadow.shadowMapSize,directionalLightShadow.shadowBias,directionalLightShadow.shadowRadius,vDirectionalShadowCoord[i]): 1.0;\n#endif\nRE_Direct(directLight,geometry,material,reflectedLight);\n}\n#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\nRectAreaLight rectAreaLight;\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_RECT_AREA_LIGHTS;i++){\nrectAreaLight=rectAreaLights[i];\nRE_Direct_RectArea(rectAreaLight,geometry,material,reflectedLight);\n}\n#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\nvec3 iblIrradiance=vec3(0.0);\nvec3 irradiance=getAmbientLightIrradiance(ambientLightColor);\nirradiance+=getLightProbeIrradiance(lightProbe,geometry.normal);\n#if ( NUM_HEMI_LIGHTS > 0 )\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_HEMI_LIGHTS;i++){\nirradiance+=getHemisphereLightIrradiance(hemisphereLights[i],geometry.normal);\n}\n#pragma unroll_loop_end\n#endif\n#endif\n#if defined( RE_IndirectSpecular )\nvec3 radiance=vec3(0.0);\nvec3 clearcoatRadiance=vec3(0.0);\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n#ifdef USE_LIGHTMAP\nvec4 lightMapTexel=texture2D(lightMap,vUv2);\nvec3 lightMapIrradiance=lightMapTexel.rgb*lightMapIntensity;\nirradiance+=lightMapIrradiance;\n#endif\n#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\niblIrradiance+=getIBLIrradiance(geometry.normal);\n#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\nradiance+=getIBLRadiance(geometry.viewDir,geometry.normal,material.roughness);\n#ifdef USE_CLEARCOAT\nclearcoatRadiance+=getIBLRadiance(geometry.viewDir,geometry.clearcoatNormal,material.clearcoatRoughness);\n#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\nRE_IndirectDiffuse(irradiance,geometry,material,reflectedLight);\n#endif\n#if defined( RE_IndirectSpecular )\nRE_IndirectSpecular(radiance,iblIrradiance,clearcoatRadiance,geometry,material,reflectedLight);\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\ngl_FragDepthEXT=vIsPerspective==0.0 ? gl_FragCoord.z : log2(vFragDepth)*logDepthBufFC*0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\nuniform float logDepthBufFC;\nvarying float vFragDepth;\nvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n#ifdef USE_LOGDEPTHBUF_EXT\nvarying float vFragDepth;\nvarying float vIsPerspective;\n#else\nuniform float logDepthBufFC;\n#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n#ifdef USE_LOGDEPTHBUF_EXT\nvFragDepth=1.0+gl_Position.w;\nvIsPerspective=float(isPerspectiveMatrix(projectionMatrix));\n#else\nif(isPerspectiveMatrix(projectionMatrix)){\ngl_Position.z=log2(max(EPSILON,gl_Position.w+1.0))*logDepthBufFC-1.0;\ngl_Position.z*=gl_Position.w;\n}\n#endif\n#endif",map_fragment:"#ifdef USE_MAP\nvec4 sampledDiffuseColor=texture2D(map,vUv);\n#ifdef DECODE_VIDEO_TEXTURE\nsampledDiffuseColor=vec4(mix(pow(sampledDiffuseColor.rgb*0.9478672986+vec3(0.0521327014),vec3(2.4)),sampledDiffuseColor.rgb*0.0773993808,vec3(lessThanEqual(sampledDiffuseColor.rgb,vec3(0.04045)))),sampledDiffuseColor.w);\n#endif\ndiffuseColor*=sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\nvec2 uv=(uvTransform*vec3(gl_PointCoord.x,1.0-gl_PointCoord.y,1)).xy;\n#endif\n#ifdef USE_MAP\ndiffuseColor*=texture2D(map,uv);\n#endif\n#ifdef USE_ALPHAMAP\ndiffuseColor.a*=texture2D(alphaMap,uv).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\nuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\nuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor=metalness;\n#ifdef USE_METALNESSMAP\nvec4 texelMetalness=texture2D(metalnessMap,vUv);\nmetalnessFactor*=texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\nuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\nvColor*=morphTargetBaseInfluence;\nfor(int i=0;i < MORPHTARGETS_COUNT;i++){\n#if defined( USE_COLOR_ALPHA )\nif(morphTargetInfluences[i]!=0.0)vColor+=getMorph(gl_VertexID,i,2)*morphTargetInfluences[i];\n#elif defined( USE_COLOR )\nif(morphTargetInfluences[i]!=0.0)vColor+=getMorph(gl_VertexID,i,2).rgb*morphTargetInfluences[i];\n#endif\n}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nobjectNormal*=morphTargetBaseInfluence;\n#ifdef MORPHTARGETS_TEXTURE\nfor(int i=0;i < MORPHTARGETS_COUNT;i++){\nif(morphTargetInfluences[i]!=0.0)objectNormal+=getMorph(gl_VertexID,i,1).xyz*morphTargetInfluences[i];\n}\n#else\nobjectNormal+=morphNormal0*morphTargetInfluences[0];\nobjectNormal+=morphNormal1*morphTargetInfluences[1];\nobjectNormal+=morphNormal2*morphTargetInfluences[2];\nobjectNormal+=morphNormal3*morphTargetInfluences[3];\n#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\nuniform float morphTargetBaseInfluence;\n#ifdef MORPHTARGETS_TEXTURE\nuniform float morphTargetInfluences[MORPHTARGETS_COUNT];\nuniform sampler2DArray morphTargetsTexture;\nuniform ivec2 morphTargetsTextureSize;\nvec4 getMorph(const in int vertexIndex,const in int morphTargetIndex,const in int offset){\nint texelIndex=vertexIndex*MORPHTARGETS_TEXTURE_STRIDE+offset;\nint y=texelIndex/morphTargetsTextureSize.x;\nint x=texelIndex-y*morphTargetsTextureSize.x;\nivec3 morphUV=ivec3(x,y,morphTargetIndex);\nreturn texelFetch(morphTargetsTexture,morphUV,0);\n}\n#else\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[8];\n#else\nuniform float morphTargetInfluences[4];\n#endif\n#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\ntransformed*=morphTargetBaseInfluence;\n#ifdef MORPHTARGETS_TEXTURE\nfor(int i=0;i < MORPHTARGETS_COUNT;i++){\nif(morphTargetInfluences[i]!=0.0)transformed+=getMorph(gl_VertexID,i,0).xyz*morphTargetInfluences[i];\n}\n#else\ntransformed+=morphTarget0*morphTargetInfluences[0];\ntransformed+=morphTarget1*morphTargetInfluences[1];\ntransformed+=morphTarget2*morphTargetInfluences[2];\ntransformed+=morphTarget3*morphTargetInfluences[3];\n#ifndef USE_MORPHNORMALS\ntransformed+=morphTarget4*morphTargetInfluences[4];\ntransformed+=morphTarget5*morphTargetInfluences[5];\ntransformed+=morphTarget6*morphTargetInfluences[6];\ntransformed+=morphTarget7*morphTargetInfluences[7];\n#endif\n#endif\n#endif",normal_fragment_begin:"float faceDirection=gl_FrontFacing ? 1.0 :-1.0;\n#ifdef FLAT_SHADED\nvec3 fdx=vec3(dFdx(vViewPosition.x),dFdx(vViewPosition.y),dFdx(vViewPosition.z));\nvec3 fdy=vec3(dFdy(vViewPosition.x),dFdy(vViewPosition.y),dFdy(vViewPosition.z));\nvec3 normal=normalize(cross(fdx,fdy));\n#else\nvec3 normal=normalize(vNormal);\n#ifdef DOUBLE_SIDED\nnormal=normal*faceDirection;\n#endif\n#ifdef USE_TANGENT\nvec3 tangent=normalize(vTangent);\nvec3 bitangent=normalize(vBitangent);\n#ifdef DOUBLE_SIDED\ntangent=tangent*faceDirection;\nbitangent=bitangent*faceDirection;\n#endif\n#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\nmat3 vTBN=mat3(tangent,bitangent,normal);\n#endif\n#endif\n#endif\nvec3 geometryNormal=normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\nnormal=texture2D(normalMap,vUv).xyz*2.0-1.0;\n\n#ifdef FLIP_SIDED\nnormal=-normal;\n#endif\n#ifdef DOUBLE_SIDED\nnormal=normal*faceDirection;\n#endif\nnormal=normalize(normalMatrix*normal);\n#elif defined( TANGENTSPACE_NORMALMAP )\nvec3 mapN=texture2D(normalMap,vUv).xyz*2.0-1.0;\nmapN.xy*=normalScale;\n#ifdef USE_TANGENT\nnormal=normalize(vTBN*mapN);\n#else\nnormal=perturbNormal2Arb(-vViewPosition,normal,mapN,faceDirection);\n#endif\n#elif defined( USE_BUMPMAP )\nnormal=perturbNormalArb(-vViewPosition,normal,dHdxy_fwd(),faceDirection);\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#ifdef USE_TANGENT\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#ifdef USE_TANGENT\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED // normal is computed with derivatives when FLAT_SHADED\nvNormal=normalize(transformedNormal);\n#ifdef USE_TANGENT\nvTangent=normalize(transformedTangent);\nvBitangent=normalize(cross(vNormal,vTangent)*tangent.w);\n#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\nuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\nvec3 perturbNormal2Arb(vec3 eye_pos,vec3 surf_norm,vec3 mapN,float faceDirection){\nvec3 q0=vec3(dFdx(eye_pos.x),dFdx(eye_pos.y),dFdx(eye_pos.z));\nvec3 q1=vec3(dFdy(eye_pos.x),dFdy(eye_pos.y),dFdy(eye_pos.z));\nvec2 st0=dFdx(vUv.st);\nvec2 st1=dFdy(vUv.st);\nvec3 N=surf_norm;\n\nvec3 q1perp=cross(q1,N);\nvec3 q0perp=cross(N,q0);\nvec3 T=q1perp*st0.x+q0perp*st1.x;\nvec3 B=q1perp*st0.y+q0perp*st1.y;\nfloat det=max(dot(T,T),dot(B,B));\nfloat scale=(det==0.0)? 0.0 : faceDirection*inversesqrt(det);\nreturn normalize(T*(mapN.x*scale)+B*(mapN.y*scale)+N*mapN.z);\n}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\nvec3 clearcoatNormal=geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\nvec3 clearcoatMapN=texture2D(clearcoatNormalMap,vUv).xyz*2.0-1.0;\nclearcoatMapN.xy*=clearcoatNormalScale;\n#ifdef USE_TANGENT\nclearcoatNormal=normalize(vTBN*clearcoatMapN);\n#else\nclearcoatNormal=perturbNormal2Arb(-vViewPosition,clearcoatNormal,clearcoatMapN,faceDirection);\n#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\nuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\nuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\nuniform sampler2D clearcoatNormalMap;\nuniform vec2 clearcoatNormalScale;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\nuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\nuniform sampler2D iridescenceThicknessMap;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a=1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a*=transmissionAlpha+0.1;\n#endif\ngl_FragColor=vec4(outgoingLight,diffuseColor.a);",packing:"vec3 packNormalToRGB(const in vec3 normal){\nreturn normalize(normal)*0.5+0.5;\n}\nvec3 unpackRGBToNormal(const in vec3 rgb){\nreturn 2.0*rgb.xyz-1.0;\n}\nconst float PackUpscale=256./255.;\n\nconst float UnpackDownscale=255./256.;\n\nconst vec3 PackFactors=vec3(256.*256.*256.,256.*256.,256.);\nconst vec4 UnpackFactors=UnpackDownscale/vec4(PackFactors,1.);\nconst float ShiftRight8=1./256.;\nvec4 packDepthToRGBA(const in float v){\nvec4 r=vec4(fract(v*PackFactors),v);\nr.yzw-=r.xyz*ShiftRight8;\n\nreturn r*PackUpscale;\n}\nfloat unpackRGBAToDepth(const in vec4 v){\nreturn dot(v,UnpackFactors);\n}\nvec4 pack2HalfToRGBA(vec2 v){\nvec4 r=vec4(v.x,fract(v.x*255.0),v.y,fract(v.y*255.0));\nreturn vec4(r.x-r.y/255.0,r.y,r.z-r.w/255.0,r.w);\n}\nvec2 unpackRGBATo2Half(vec4 v){\nreturn vec2(v.x+(v.y/255.0),v.z+(v.w/255.0));\n}\nfloat viewZToOrthographicDepth(const in float viewZ,const in float near,const in float far){\nreturn(viewZ+near)/(near-far);\n}\nfloat orthographicDepthToViewZ(const in float linearClipZ,const in float near,const in float far){\nreturn linearClipZ*(near-far)-near;\n}\nfloat viewZToPerspectiveDepth(const in float viewZ,const in float near,const in float far){\nreturn((near+viewZ)*far)/((far-near)*viewZ);\n}\nfloat perspectiveDepthToViewZ(const in float invClipZ,const in float near,const in float far){\nreturn(near*far)/((far-near)*invClipZ-far);\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\ngl_FragColor.rgb*=gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition=vec4(transformed,1.0);\n#ifdef USE_INSTANCING\nmvPosition=instanceMatrix*mvPosition;\n#endif\nmvPosition=modelViewMatrix*mvPosition;\ngl_Position=projectionMatrix*mvPosition;",dithering_fragment:"#ifdef DITHERING\ngl_FragColor.rgb=dithering(gl_FragColor.rgb);\n#endif",dithering_pars_fragment:"#ifdef DITHERING\nvec3 dithering(vec3 color){\nfloat grid_position=rand(gl_FragCoord.xy);\nvec3 dither_shift_RGB=vec3(0.25/255.0,-0.25/255.0,0.25/255.0);\ndither_shift_RGB=mix(2.0*dither_shift_RGB,-2.0*dither_shift_RGB,grid_position);\nreturn color+dither_shift_RGB;\n}\n#endif",roughnessmap_fragment:"float roughnessFactor=roughness;\n#ifdef USE_ROUGHNESSMAP\nvec4 texelRoughness=texture2D(roughnessMap,vUv);\nroughnessFactor*=texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\nuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n#if NUM_DIR_LIGHT_SHADOWS > 0\nuniform sampler2D directionalShadowMap[NUM_DIR_LIGHT_SHADOWS];\nvarying vec4 vDirectionalShadowCoord[NUM_DIR_LIGHT_SHADOWS];\nstruct DirectionalLightShadow{\nfloat shadowBias;\nfloat shadowNormalBias;\nfloat shadowRadius;\nvec2 shadowMapSize;\n};\nuniform DirectionalLightShadow directionalLightShadows[NUM_DIR_LIGHT_SHADOWS];\n#endif\n#if NUM_SPOT_LIGHT_SHADOWS > 0\nuniform sampler2D spotShadowMap[NUM_SPOT_LIGHT_SHADOWS];\nvarying vec4 vSpotShadowCoord[NUM_SPOT_LIGHT_SHADOWS];\nstruct SpotLightShadow{\nfloat shadowBias;\nfloat shadowNormalBias;\nfloat shadowRadius;\nvec2 shadowMapSize;\n};\nuniform SpotLightShadow spotLightShadows[NUM_SPOT_LIGHT_SHADOWS];\n#endif\n#if NUM_POINT_LIGHT_SHADOWS > 0\nuniform sampler2D pointShadowMap[NUM_POINT_LIGHT_SHADOWS];\nvarying vec4 vPointShadowCoord[NUM_POINT_LIGHT_SHADOWS];\nstruct PointLightShadow{\nfloat shadowBias;\nfloat shadowNormalBias;\nfloat shadowRadius;\nvec2 shadowMapSize;\nfloat shadowCameraNear;\nfloat shadowCameraFar;\n};\nuniform PointLightShadow pointLightShadows[NUM_POINT_LIGHT_SHADOWS];\n#endif\n\nfloat texture2DCompare(sampler2D depths,vec2 uv,float compare){\nreturn step(compare,unpackRGBAToDepth(texture2D(depths,uv)));\n}\nvec2 texture2DDistribution(sampler2D shadow,vec2 uv){\nreturn unpackRGBATo2Half(texture2D(shadow,uv));\n}\nfloat VSMShadow(sampler2D shadow,vec2 uv,float compare){\nfloat occlusion=1.0;\nvec2 distribution=texture2DDistribution(shadow,uv);\nfloat hard_shadow=step(compare,distribution.x);\n\nif(hard_shadow !=1.0){\nfloat distance=compare-distribution.x;\nfloat variance=max(0.00000,distribution.y*distribution.y);\nfloat softness_probability=variance/(variance+distance*distance);\n\nsoftness_probability=clamp((softness_probability-0.3)/(0.95-0.3),0.0,1.0);\n\nocclusion=clamp(max(hard_shadow,softness_probability),0.0,1.0);\n}\nreturn occlusion;\n}\nfloat getShadow(sampler2D shadowMap,vec2 shadowMapSize,float shadowBias,float shadowRadius,vec4 shadowCoord){\nfloat shadow=1.0;\nshadowCoord.xyz/=shadowCoord.w;\nshadowCoord.z+=shadowBias;\nbvec4 inFrustumVec=bvec4(shadowCoord.x >=0.0,shadowCoord.x <=1.0,shadowCoord.y >=0.0,shadowCoord.y <=1.0);\nbool inFrustum=all(inFrustumVec);\nbvec2 frustumTestVec=bvec2(inFrustum,shadowCoord.z <=1.0);\nbool frustumTest=all(frustumTestVec);\nif(frustumTest){\n#if defined( SHADOWMAP_TYPE_PCF )\nvec2 texelSize=vec2(1.0)/shadowMapSize;\nfloat dx0=-texelSize.x*shadowRadius;\nfloat dy0=-texelSize.y*shadowRadius;\nfloat dx1=+texelSize.x*shadowRadius;\nfloat dy1=+texelSize.y*shadowRadius;\nfloat dx2=dx0/2.0;\nfloat dy2=dy0/2.0;\nfloat dx3=dx1/2.0;\nfloat dy3=dy1/2.0;\nshadow=(\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx0,dy0),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(0.0,dy0),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx1,dy0),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx2,dy2),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(0.0,dy2),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx3,dy2),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx0,0.0),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx2,0.0),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy,shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx3,0.0),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx1,0.0),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx2,dy3),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(0.0,dy3),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx3,dy3),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx0,dy1),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(0.0,dy1),shadowCoord.z)+\ntexture2DCompare(shadowMap,shadowCoord.xy+vec2(dx1,dy1),shadowCoord.z)\n)*(1.0/17.0);\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nvec2 texelSize=vec2(1.0)/shadowMapSize;\nfloat dx=texelSize.x;\nfloat dy=texelSize.y;\nvec2 uv=shadowCoord.xy;\nvec2 f=fract(uv*shadowMapSize+0.5);\nuv-=f*texelSize;\nshadow=(\ntexture2DCompare(shadowMap,uv,shadowCoord.z)+\ntexture2DCompare(shadowMap,uv+vec2(dx,0.0),shadowCoord.z)+\ntexture2DCompare(shadowMap,uv+vec2(0.0,dy),shadowCoord.z)+\ntexture2DCompare(shadowMap,uv+texelSize,shadowCoord.z)+\nmix(texture2DCompare(shadowMap,uv+vec2(-dx,0.0),shadowCoord.z),\ntexture2DCompare(shadowMap,uv+vec2(2.0*dx,0.0),shadowCoord.z),\nf.x)+\nmix(texture2DCompare(shadowMap,uv+vec2(-dx,dy),shadowCoord.z),\ntexture2DCompare(shadowMap,uv+vec2(2.0*dx,dy),shadowCoord.z),\nf.x)+\nmix(texture2DCompare(shadowMap,uv+vec2(0.0,-dy),shadowCoord.z),\ntexture2DCompare(shadowMap,uv+vec2(0.0,2.0*dy),shadowCoord.z),\nf.y)+\nmix(texture2DCompare(shadowMap,uv+vec2(dx,-dy),shadowCoord.z),\ntexture2DCompare(shadowMap,uv+vec2(dx,2.0*dy),shadowCoord.z),\nf.y)+\nmix(mix(texture2DCompare(shadowMap,uv+vec2(-dx,-dy),shadowCoord.z),\ntexture2DCompare(shadowMap,uv+vec2(2.0*dx,-dy),shadowCoord.z),\nf.x),\nmix(texture2DCompare(shadowMap,uv+vec2(-dx,2.0*dy),shadowCoord.z),\ntexture2DCompare(shadowMap,uv+vec2(2.0*dx,2.0*dy),shadowCoord.z),\nf.x),\nf.y)\n)*(1.0/9.0);\n#elif defined( SHADOWMAP_TYPE_VSM )\nshadow=VSMShadow(shadowMap,shadowCoord.xy,shadowCoord.z);\n#else // no percentage-closer filtering:\nshadow=texture2DCompare(shadowMap,shadowCoord.xy,shadowCoord.z);\n#endif\n}\nreturn shadow;\n}\nvec2 cubeToUV(vec3 v,float texelSizeY){\nvec3 absV=abs(v);\nfloat scaleToCube=1.0/max(absV.x,max(absV.y,absV.z));\nabsV*=scaleToCube;\nv*=scaleToCube*(1.0-2.0*texelSizeY);\nvec2 planar=v.xy;\nfloat almostATexel=1.5*texelSizeY;\nfloat almostOne=1.0-almostATexel;\nif(absV.z >=almostOne){\nif(v.z > 0.0)\nplanar.x=4.0-v.x;\n}else if(absV.x >=almostOne){\nfloat signX=sign(v.x);\nplanar.x=v.z*signX+2.0*signX;\n}else if(absV.y >=almostOne){\nfloat signY=sign(v.y);\nplanar.x=v.x+2.0*signY+2.0;\nplanar.y=v.z*signY-2.0;\n}\nreturn vec2(0.125,0.25)*planar+vec2(0.375,0.75);\n}\nfloat getPointShadow(sampler2D shadowMap,vec2 shadowMapSize,float shadowBias,float shadowRadius,vec4 shadowCoord,float shadowCameraNear,float shadowCameraFar){\nvec2 texelSize=vec2(1.0)/(shadowMapSize*vec2(4.0,2.0));\nvec3 lightToPosition=shadowCoord.xyz;\nfloat dp=(length(lightToPosition)-shadowCameraNear)/(shadowCameraFar-shadowCameraNear);\n\ndp+=shadowBias;\nvec3 bd3D=normalize(lightToPosition);\n#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\nvec2 offset=vec2(-1,1)*shadowRadius*texelSize.y;\nreturn(\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.xyy,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.yyy,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.xyx,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.yyx,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.xxy,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.yxy,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.xxx,texelSize.y),dp)+\ntexture2DCompare(shadowMap,cubeToUV(bd3D+offset.yxx,texelSize.y),dp)\n)*(1.0/9.0);\n#else // no percentage-closer filtering\nreturn texture2DCompare(shadowMap,cubeToUV(bd3D,texelSize.y),dp);\n#endif\n}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n#if NUM_DIR_LIGHT_SHADOWS > 0\nuniform mat4 directionalShadowMatrix[NUM_DIR_LIGHT_SHADOWS];\nvarying vec4 vDirectionalShadowCoord[NUM_DIR_LIGHT_SHADOWS];\nstruct DirectionalLightShadow{\nfloat shadowBias;\nfloat shadowNormalBias;\nfloat shadowRadius;\nvec2 shadowMapSize;\n};\nuniform DirectionalLightShadow directionalLightShadows[NUM_DIR_LIGHT_SHADOWS];\n#endif\n#if NUM_SPOT_LIGHT_SHADOWS > 0\nuniform mat4 spotShadowMatrix[NUM_SPOT_LIGHT_SHADOWS];\nvarying vec4 vSpotShadowCoord[NUM_SPOT_LIGHT_SHADOWS];\nstruct SpotLightShadow{\nfloat shadowBias;\nfloat shadowNormalBias;\nfloat shadowRadius;\nvec2 shadowMapSize;\n};\nuniform SpotLightShadow spotLightShadows[NUM_SPOT_LIGHT_SHADOWS];\n#endif\n#if NUM_POINT_LIGHT_SHADOWS > 0\nuniform mat4 pointShadowMatrix[NUM_POINT_LIGHT_SHADOWS];\nvarying vec4 vPointShadowCoord[NUM_POINT_LIGHT_SHADOWS];\nstruct PointLightShadow{\nfloat shadowBias;\nfloat shadowNormalBias;\nfloat shadowRadius;\nvec2 shadowMapSize;\nfloat shadowCameraNear;\nfloat shadowCameraFar;\n};\nuniform PointLightShadow pointLightShadows[NUM_POINT_LIGHT_SHADOWS];\n#endif\n\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\nvec3 shadowWorldNormal=inverseTransformDirection(transformedNormal,viewMatrix);\nvec4 shadowWorldPosition;\n#endif\n#if NUM_DIR_LIGHT_SHADOWS > 0\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_DIR_LIGHT_SHADOWS;i++){\nshadowWorldPosition=worldPosition+vec4(shadowWorldNormal*directionalLightShadows[i].shadowNormalBias,0);\nvDirectionalShadowCoord[i]=directionalShadowMatrix[i]*shadowWorldPosition;\n}\n#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHT_SHADOWS > 0\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_SPOT_LIGHT_SHADOWS;i++){\nshadowWorldPosition=worldPosition+vec4(shadowWorldNormal*spotLightShadows[i].shadowNormalBias,0);\nvSpotShadowCoord[i]=spotShadowMatrix[i]*shadowWorldPosition;\n}\n#pragma unroll_loop_end\n#endif\n#if NUM_POINT_LIGHT_SHADOWS > 0\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_POINT_LIGHT_SHADOWS;i++){\nshadowWorldPosition=worldPosition+vec4(shadowWorldNormal*pointLightShadows[i].shadowNormalBias,0);\nvPointShadowCoord[i]=pointShadowMatrix[i]*shadowWorldPosition;\n}\n#pragma unroll_loop_end\n#endif\n\n#endif",shadowmask_pars_fragment:"float getShadowMask(){\nfloat shadow=1.0;\n#ifdef USE_SHADOWMAP\n#if NUM_DIR_LIGHT_SHADOWS > 0\nDirectionalLightShadow directionalLight;\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_DIR_LIGHT_SHADOWS;i++){\ndirectionalLight=directionalLightShadows[i];\nshadow*=receiveShadow ? getShadow(directionalShadowMap[i],directionalLight.shadowMapSize,directionalLight.shadowBias,directionalLight.shadowRadius,vDirectionalShadowCoord[i]): 1.0;\n}\n#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHT_SHADOWS > 0\nSpotLightShadow spotLight;\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_SPOT_LIGHT_SHADOWS;i++){\nspotLight=spotLightShadows[i];\nshadow*=receiveShadow ? getShadow(spotShadowMap[i],spotLight.shadowMapSize,spotLight.shadowBias,spotLight.shadowRadius,vSpotShadowCoord[i]): 1.0;\n}\n#pragma unroll_loop_end\n#endif\n#if NUM_POINT_LIGHT_SHADOWS > 0\nPointLightShadow pointLight;\n#pragma unroll_loop_start\nfor(int i=0;i < NUM_POINT_LIGHT_SHADOWS;i++){\npointLight=pointLightShadows[i];\nshadow*=receiveShadow ? getPointShadow(pointShadowMap[i],pointLight.shadowMapSize,pointLight.shadowBias,pointLight.shadowRadius,vPointShadowCoord[i],pointLight.shadowCameraNear,pointLight.shadowCameraFar): 1.0;\n}\n#pragma unroll_loop_end\n#endif\n\n#endif\nreturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX=getBoneMatrix(skinIndex.x);\nmat4 boneMatY=getBoneMatrix(skinIndex.y);\nmat4 boneMatZ=getBoneMatrix(skinIndex.z);\nmat4 boneMatW=getBoneMatrix(skinIndex.w);\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\nuniform mat4 bindMatrix;\nuniform mat4 bindMatrixInverse;\nuniform highp sampler2D boneTexture;\nuniform int boneTextureSize;\nmat4 getBoneMatrix(const in float i){\nfloat j=i*4.0;\nfloat x=mod(j,float(boneTextureSize));\nfloat y=floor(j/float(boneTextureSize));\nfloat dx=1.0/float(boneTextureSize);\nfloat dy=1.0/float(boneTextureSize);\ny=dy*(y+0.5);\nvec4 v1=texture2D(boneTexture,vec2(dx*(x+0.5),y));\nvec4 v2=texture2D(boneTexture,vec2(dx*(x+1.5),y));\nvec4 v3=texture2D(boneTexture,vec2(dx*(x+2.5),y));\nvec4 v4=texture2D(boneTexture,vec2(dx*(x+3.5),y));\nmat4 bone=mat4(v1,v2,v3,v4);\nreturn bone;\n}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\nvec4 skinVertex=bindMatrix*vec4(transformed,1.0);\nvec4 skinned=vec4(0.0);\nskinned+=boneMatX*skinVertex*skinWeight.x;\nskinned+=boneMatY*skinVertex*skinWeight.y;\nskinned+=boneMatZ*skinVertex*skinWeight.z;\nskinned+=boneMatW*skinVertex*skinWeight.w;\ntransformed=(bindMatrixInverse*skinned).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix=mat4(0.0);\nskinMatrix+=skinWeight.x*boneMatX;\nskinMatrix+=skinWeight.y*boneMatY;\nskinMatrix+=skinWeight.z*boneMatZ;\nskinMatrix+=skinWeight.w*boneMatW;\nskinMatrix=bindMatrixInverse*skinMatrix*bindMatrix;\nobjectNormal=vec4(skinMatrix*vec4(objectNormal,0.0)).xyz;\n#ifdef USE_TANGENT\nobjectTangent=vec4(skinMatrix*vec4(objectTangent,0.0)).xyz;\n#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular=texture2D(specularMap,vUv);\nspecularStrength=texelSpecular.r;\n#else\nspecularStrength=1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\ngl_FragColor.rgb=toneMapping(gl_FragColor.rgb);\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping(vec3 color){\nreturn toneMappingExposure*color;\n}\nvec3 ReinhardToneMapping(vec3 color){\ncolor*=toneMappingExposure;\nreturn saturate(color/(vec3(1.0)+color));\n}\nvec3 OptimizedCineonToneMapping(vec3 color){\ncolor*=toneMappingExposure;\ncolor=max(vec3(0.0),color-0.004);\nreturn pow((color*(6.2*color+0.5))/(color*(6.2*color+1.7)+0.06),vec3(2.2));\n}\nvec3 RRTAndODTFit(vec3 v){\nvec3 a=v*(v+0.0245786)-0.000090537;\nvec3 b=v*(0.983729*v+0.4329510)+0.238081;\nreturn a/b;\n}\nvec3 ACESFilmicToneMapping(vec3 color){\nconst mat3 ACESInputMat=mat3(\nvec3(0.59719,0.07600,0.02840),\n\nvec3(0.35458,0.90834,0.13383),\nvec3(0.04823,0.01566,0.83777)\n);\nconst mat3 ACESOutputMat=mat3(\nvec3(1.60475,-0.10208,-0.00327),\n\nvec3(-0.53108,1.10813,-0.07276),\nvec3(-0.07367,-0.00605,1.07602)\n);\ncolor*=toneMappingExposure/0.6;\ncolor=ACESInputMat*color;\ncolor=RRTAndODTFit(color);\ncolor=ACESOutputMat*color;\nreturn saturate(color);\n}\nvec3 CustomToneMapping(vec3 color){return color;}",transmission_fragment:"#ifdef USE_TRANSMISSION\nfloat transmissionAlpha=1.0;\nfloat transmissionFactor=transmission;\nfloat thicknessFactor=thickness;\n#ifdef USE_TRANSMISSIONMAP\ntransmissionFactor*=texture2D(transmissionMap,vUv).r;\n#endif\n#ifdef USE_THICKNESSMAP\nthicknessFactor*=texture2D(thicknessMap,vUv).g;\n#endif\nvec3 pos=vWorldPosition;\nvec3 v=normalize(cameraPosition-pos);\nvec3 n=inverseTransformDirection(normal,viewMatrix);\nvec4 transmission=getIBLVolumeRefraction(\nn,v,roughnessFactor,material.diffuseColor,material.specularColor,material.specularF90,\npos,modelMatrix,viewMatrix,projectionMatrix,ior,thicknessFactor,\nattenuationColor,attenuationDistance);\ntotalDiffuse=mix(totalDiffuse,transmission.rgb,transmissionFactor);\ntransmissionAlpha=mix(transmissionAlpha,transmission.a,transmissionFactor);\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\nuniform float transmission;\nuniform float thickness;\nuniform float attenuationDistance;\nuniform vec3 attenuationColor;\n#ifdef USE_TRANSMISSIONMAP\nuniform sampler2D transmissionMap;\n#endif\n#ifdef USE_THICKNESSMAP\nuniform sampler2D thicknessMap;\n#endif\nuniform vec2 transmissionSamplerSize;\nuniform sampler2D transmissionSamplerMap;\nuniform mat4 modelMatrix;\nuniform mat4 projectionMatrix;\nvarying vec3 vWorldPosition;\nvec3 getVolumeTransmissionRay(const in vec3 n,const in vec3 v,const in float thickness,const in float ior,const in mat4 modelMatrix){\nvec3 refractionVector=refract(-v,normalize(n),1.0/ior);\nvec3 modelScale;\nmodelScale.x=length(vec3(modelMatrix[0].xyz));\nmodelScale.y=length(vec3(modelMatrix[1].xyz));\nmodelScale.z=length(vec3(modelMatrix[2].xyz));\nreturn normalize(refractionVector)*thickness*modelScale;\n}\nfloat applyIorToRoughness(const in float roughness,const in float ior){\nreturn roughness*clamp(ior*2.0-2.0,0.0,1.0);\n}\nvec4 getTransmissionSample(const in vec2 fragCoord,const in float roughness,const in float ior){\nfloat framebufferLod=log2(transmissionSamplerSize.x)*applyIorToRoughness(roughness,ior);\n#ifdef texture2DLodEXT\nreturn texture2DLodEXT(transmissionSamplerMap,fragCoord.xy,framebufferLod);\n#else\nreturn texture2D(transmissionSamplerMap,fragCoord.xy,framebufferLod);\n#endif\n}\nvec3 applyVolumeAttenuation(const in vec3 radiance,const in float transmissionDistance,const in vec3 attenuationColor,const in float attenuationDistance){\nif(attenuationDistance==0.0){\nreturn radiance;\n}else{\nvec3 attenuationCoefficient=-log(attenuationColor)/attenuationDistance;\nvec3 transmittance=exp(-attenuationCoefficient*transmissionDistance);\n\nreturn transmittance*radiance;\n}\n}\nvec4 getIBLVolumeRefraction(const in vec3 n,const in vec3 v,const in float roughness,const in vec3 diffuseColor,\nconst in vec3 specularColor,const in float specularF90,const in vec3 position,const in mat4 modelMatrix,\nconst in mat4 viewMatrix,const in mat4 projMatrix,const in float ior,const in float thickness,\nconst in vec3 attenuationColor,const in float attenuationDistance){\nvec3 transmissionRay=getVolumeTransmissionRay(n,v,thickness,ior,modelMatrix);\nvec3 refractedRayExit=position+transmissionRay;\nvec4 ndcPos=projMatrix*viewMatrix*vec4(refractedRayExit,1.0);\nvec2 refractionCoords=ndcPos.xy/ndcPos.w;\nrefractionCoords+=1.0;\nrefractionCoords/=2.0;\nvec4 transmittedLight=getTransmissionSample(refractionCoords,roughness,ior);\nvec3 attenuatedColor=applyVolumeAttenuation(transmittedLight.rgb,length(transmissionRay),attenuationColor,attenuationDistance);\nvec3 F=EnvironmentBRDF(n,v,specularColor,specularF90,roughness);\nreturn vec4((1.0-F)*attenuatedColor*diffuseColor,transmittedLight.a);\n}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\nvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n#ifdef UVS_VERTEX_ONLY\nvec2 vUv;\n#else\nvarying vec2 vUv;\n#endif\nuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\nvUv=(uvTransform*vec3(uv,1)).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\nvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\nattribute vec2 uv2;\nvarying vec2 vUv2;\nuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\nvUv2=(uv2Transform*vec3(uv2,1)).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\nvec4 worldPosition=vec4(transformed,1.0);\n#ifdef USE_INSTANCING\nworldPosition=instanceMatrix*worldPosition;\n#endif\nworldPosition=modelMatrix*worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main(){\nvUv=(uvTransform*vec3(uv,1)).xy;\ngl_Position=vec4(position.xy,1.0,1.0);\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main(){\ngl_FragColor=texture2D(t2D,vUv);\n#ifdef DECODE_VIDEO_TEXTURE\ngl_FragColor=vec4(mix(pow(gl_FragColor.rgb*0.9478672986+vec3(0.0521327014),vec3(2.4)),gl_FragColor.rgb*0.0773993808,vec3(lessThanEqual(gl_FragColor.rgb,vec3(0.04045)))),gl_FragColor.w);\n#endif\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main(){\nvWorldDirection=transformDirection(position,modelMatrix);\n#include <begin_vertex>\n#include <project_vertex>\ngl_Position.z=gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main(){\nvec3 vReflect=vWorldDirection;\n#include <envmap_fragment>\ngl_FragColor=envColor;\ngl_FragColor.a*=opacity;\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main(){\n#include <uv_vertex>\n#include <skinbase_vertex>\n#ifdef USE_DISPLACEMENTMAP\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinnormal_vertex>\n#endif\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\nvHighPrecisionZW=gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\nuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(1.0);\n#if DEPTH_PACKING == 3200\ndiffuseColor.a=opacity;\n#endif\n#include <map_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <logdepthbuf_fragment>\nfloat fragCoordZ=0.5*vHighPrecisionZW[0]/vHighPrecisionZW[1]+0.5;\n#if DEPTH_PACKING == 3200\ngl_FragColor=vec4(vec3(1.0-fragCoordZ),opacity);\n#elif DEPTH_PACKING == 3201\ngl_FragColor=packDepthToRGBA(fragCoordZ);\n#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <skinbase_vertex>\n#ifdef USE_DISPLACEMENTMAP\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinnormal_vertex>\n#endif\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <worldpos_vertex>\n#include <clipping_planes_vertex>\nvWorldPosition=worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(1.0);\n#include <map_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\nfloat dist=length(vWorldPosition-referencePosition);\ndist=(dist-nearDistance)/(farDistance-nearDistance);\ndist=saturate(dist);\n\ngl_FragColor=packDepthToRGBA(dist);\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main(){\nvWorldDirection=transformDirection(position,modelMatrix);\n#include <begin_vertex>\n#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main(){\nvec3 direction=normalize(vWorldDirection);\nvec2 sampleUV=equirectUv(direction);\ngl_FragColor=texture2D(tEquirect,sampleUV);\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\nvLineDistance=scale*lineDistance;\n#include <color_vertex>\n#include <morphcolor_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nif(mod(vLineDistance,totalSize)> dashSize){\ndiscard;\n}\nvec3 outgoingLight=vec3(0.0);\nvec4 diffuseColor=vec4(diffuse,opacity);\n#include <logdepthbuf_fragment>\n#include <color_fragment>\noutgoingLight=diffuseColor.rgb;\n\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <uv2_vertex>\n#include <color_vertex>\n#include <morphcolor_vertex>\n#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#endif\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n#include <envmap_vertex>\n#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\nvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(diffuse,opacity);\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <specularmap_fragment>\nReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));\n#ifdef USE_LIGHTMAP\nvec4 lightMapTexel=texture2D(lightMap,vUv2);\nreflectedLight.indirectDiffuse+=lightMapTexel.rgb*lightMapIntensity*RECIPROCAL_PI;\n#else\nreflectedLight.indirectDiffuse+=vec3(1.0);\n#endif\n#include <aomap_fragment>\nreflectedLight.indirectDiffuse*=diffuseColor.rgb;\nvec3 outgoingLight=reflectedLight.indirectDiffuse;\n#include <envmap_fragment>\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\nvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <uv2_vertex>\n#include <color_vertex>\n#include <morphcolor_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n#include <envmap_vertex>\n#include <lights_lambert_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\nvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(diffuse,opacity);\nReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));\nvec3 totalEmissiveRadiance=emissive;\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <specularmap_fragment>\n#include <emissivemap_fragment>\n#ifdef DOUBLE_SIDED\nreflectedLight.indirectDiffuse+=(gl_FrontFacing)? vIndirectFront : vIndirectBack;\n#else\nreflectedLight.indirectDiffuse+=vIndirectFront;\n#endif\n#include <lightmap_fragment>\nreflectedLight.indirectDiffuse*=BRDF_Lambert(diffuseColor.rgb);\n#ifdef DOUBLE_SIDED\nreflectedLight.directDiffuse=(gl_FrontFacing)? vLightFront : vLightBack;\n#else\nreflectedLight.directDiffuse=vLightFront;\n#endif\nreflectedLight.directDiffuse*=BRDF_Lambert(diffuseColor.rgb)*getShadowMask();\n#include <aomap_fragment>\nvec3 outgoingLight=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+totalEmissiveRadiance;\n#include <envmap_fragment>\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <color_vertex>\n#include <morphcolor_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <normal_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <fog_vertex>\nvViewPosition=-mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(diffuse,opacity);\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\nvec3 viewDir=normalize(vViewPosition);\nvec3 x=normalize(vec3(viewDir.z,0.0,-viewDir.x));\nvec3 y=cross(viewDir,x);\nvec2 uv=vec2(dot(x,normal),dot(y,normal))*0.495+0.5;\n\n#ifdef USE_MATCAP\nvec4 matcapColor=texture2D(matcap,uv);\n#else\nvec4 matcapColor=vec4(vec3(mix(0.2,0.8,uv.y)),1.0);\n\n#endif\nvec3 outgoingLight=diffuseColor.rgb*matcapColor.rgb;\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\nvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <normal_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\nvViewPosition=-mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\nvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\n#include <logdepthbuf_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\ngl_FragColor=vec4(packNormalToRGB(normal),opacity);\n#ifdef OPAQUE\ngl_FragColor.a=1.0;\n#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <uv2_vertex>\n#include <color_vertex>\n#include <morphcolor_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <normal_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <worldpos_vertex>\n#include <envmap_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(diffuse,opacity);\nReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));\nvec3 totalEmissiveRadiance=emissive;\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <specularmap_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\n#include <emissivemap_fragment>\n#include <lights_phong_fragment>\n#include <lights_fragment_begin>\n#include <lights_fragment_maps>\n#include <lights_fragment_end>\n#include <aomap_fragment>\nvec3 outgoingLight=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+reflectedLight.directSpecular+reflectedLight.indirectSpecular+totalEmissiveRadiance;\n#include <envmap_fragment>\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\nvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <uv2_vertex>\n#include <color_vertex>\n#include <morphcolor_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <normal_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <worldpos_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n#ifdef USE_TRANSMISSION\nvWorldPosition=worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n#define IOR\n#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\nuniform float ior;\n#endif\n#ifdef SPECULAR\nuniform float specularIntensity;\nuniform vec3 specularColor;\n#ifdef USE_SPECULARINTENSITYMAP\nuniform sampler2D specularIntensityMap;\n#endif\n#ifdef USE_SPECULARCOLORMAP\nuniform sampler2D specularColorMap;\n#endif\n#endif\n#ifdef USE_CLEARCOAT\nuniform float clearcoat;\nuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\nuniform float iridescence;\nuniform float iridescenceIOR;\nuniform float iridescenceThicknessMinimum;\nuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\nuniform vec3 sheenColor;\nuniform float sheenRoughness;\n#ifdef USE_SHEENCOLORMAP\nuniform sampler2D sheenColorMap;\n#endif\n#ifdef USE_SHEENROUGHNESSMAP\nuniform sampler2D sheenRoughnessMap;\n#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(diffuse,opacity);\nReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));\nvec3 totalEmissiveRadiance=emissive;\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <roughnessmap_fragment>\n#include <metalnessmap_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\n#include <clearcoat_normal_fragment_begin>\n#include <clearcoat_normal_fragment_maps>\n#include <emissivemap_fragment>\n#include <lights_physical_fragment>\n#include <lights_fragment_begin>\n#include <lights_fragment_maps>\n#include <lights_fragment_end>\n#include <aomap_fragment>\nvec3 totalDiffuse=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse;\nvec3 totalSpecular=reflectedLight.directSpecular+reflectedLight.indirectSpecular;\n#include <transmission_fragment>\nvec3 outgoingLight=totalDiffuse+totalSpecular+totalEmissiveRadiance;\n#ifdef USE_SHEEN\nfloat sheenEnergyComp=1.0-0.157*max3(material.sheenColor);\noutgoingLight=outgoingLight*sheenEnergyComp+sheenSpecular;\n#endif\n#ifdef USE_CLEARCOAT\nfloat dotNVcc=saturate(dot(geometry.clearcoatNormal,geometry.viewDir));\nvec3 Fcc=F_Schlick(material.clearcoatF0,material.clearcoatF90,dotNVcc);\noutgoingLight=outgoingLight*(1.0-material.clearcoat*Fcc)+clearcoatSpecular*material.clearcoat;\n#endif\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\n#include <uv2_vertex>\n#include <color_vertex>\n#include <morphcolor_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <normal_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <worldpos_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(diffuse,opacity);\nReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));\nvec3 totalEmissiveRadiance=emissive;\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\n#include <emissivemap_fragment>\n#include <lights_toon_fragment>\n#include <lights_fragment_begin>\n#include <lights_fragment_maps>\n#include <lights_fragment_end>\n#include <aomap_fragment>\nvec3 outgoingLight=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+totalEmissiveRadiance;\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <color_vertex>\n#include <morphcolor_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\ngl_PointSize=size;\n#ifdef USE_SIZEATTENUATION\nbool isPerspective=isPerspectiveMatrix(projectionMatrix);\nif(isPerspective)gl_PointSize*=(scale/-mvPosition.z);\n#endif\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec3 outgoingLight=vec3(0.0);\nvec4 diffuseColor=vec4(diffuse,opacity);\n#include <logdepthbuf_fragment>\n#include <map_particle_fragment>\n#include <color_fragment>\n#include <alphatest_fragment>\noutgoingLight=diffuseColor.rgb;\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main(){\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <begin_vertex>\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <project_vertex>\n#include <worldpos_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main(){\ngl_FragColor=vec4(color,opacity*(1.0-getShadowMask()));\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main(){\n#include <uv_vertex>\nvec4 mvPosition=modelViewMatrix*vec4(0.0,0.0,0.0,1.0);\nvec2 scale;\nscale.x=length(vec3(modelMatrix[0].x,modelMatrix[0].y,modelMatrix[0].z));\nscale.y=length(vec3(modelMatrix[1].x,modelMatrix[1].y,modelMatrix[1].z));\n#ifndef USE_SIZEATTENUATION\nbool isPerspective=isPerspectiveMatrix(projectionMatrix);\nif(isPerspective)scale*=-mvPosition.z;\n#endif\nvec2 alignedPosition=(position.xy-(center-vec2(0.5)))*scale;\nvec2 rotatedPosition;\nrotatedPosition.x=cos(rotation)*alignedPosition.x-sin(rotation)*alignedPosition.y;\nrotatedPosition.y=sin(rotation)*alignedPosition.x+cos(rotation)*alignedPosition.y;\nmvPosition.xy+=rotatedPosition;\ngl_Position=projectionMatrix*mvPosition;\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main(){\n#include <clipping_planes_fragment>\nvec3 outgoingLight=vec3(0.0);\nvec4 diffuseColor=vec4(diffuse,opacity);\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\noutgoingLight=diffuseColor.rgb;\n#include <output_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n}"},Ee={common:{diffuse:{value:new f(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new c},uv2Transform:{value:new c},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new l(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new f(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new f(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new c}},sprite:{diffuse:{value:new f(16777215)},opacity:{value:1},center:{value:new l(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new c}}},Se={basic:{uniforms:ae([Ee.common,Ee.specularmap,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.fog]),vertexShader:xe.meshbasic_vert,fragmentShader:xe.meshbasic_frag},lambert:{uniforms:ae([Ee.common,Ee.specularmap,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.fog,Ee.lights,{emissive:{value:new f(0)}}]),vertexShader:xe.meshlambert_vert,fragmentShader:xe.meshlambert_frag},phong:{uniforms:ae([Ee.common,Ee.specularmap,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.fog,Ee.lights,{emissive:{value:new f(0)},specular:{value:new f(1118481)},shininess:{value:30}}]),vertexShader:xe.meshphong_vert,fragmentShader:xe.meshphong_frag},standard:{uniforms:ae([Ee.common,Ee.envmap,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.roughnessmap,Ee.metalnessmap,Ee.fog,Ee.lights,{emissive:{value:new f(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:xe.meshphysical_vert,fragmentShader:xe.meshphysical_frag},toon:{uniforms:ae([Ee.common,Ee.aomap,Ee.lightmap,Ee.emissivemap,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.gradientmap,Ee.fog,Ee.lights,{emissive:{value:new f(0)}}]),vertexShader:xe.meshtoon_vert,fragmentShader:xe.meshtoon_frag},matcap:{uniforms:ae([Ee.common,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,Ee.fog,{matcap:{value:null}}]),vertexShader:xe.meshmatcap_vert,fragmentShader:xe.meshmatcap_frag},points:{uniforms:ae([Ee.points,Ee.fog]),vertexShader:xe.points_vert,fragmentShader:xe.points_frag},dashed:{uniforms:ae([Ee.common,Ee.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:xe.linedashed_vert,fragmentShader:xe.linedashed_frag},depth:{uniforms:ae([Ee.common,Ee.displacementmap]),vertexShader:xe.depth_vert,fragmentShader:xe.depth_frag},normal:{uniforms:ae([Ee.common,Ee.bumpmap,Ee.normalmap,Ee.displacementmap,{opacity:{value:1}}]),vertexShader:xe.meshnormal_vert,fragmentShader:xe.meshnormal_frag},sprite:{uniforms:ae([Ee.sprite,Ee.fog]),vertexShader:xe.sprite_vert,fragmentShader:xe.sprite_frag},background:{uniforms:{uvTransform:{value:new c},t2D:{value:null}},vertexShader:xe.background_vert,fragmentShader:xe.background_frag},cube:{uniforms:ae([Ee.envmap,{opacity:{value:1}}]),vertexShader:xe.cube_vert,fragmentShader:xe.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:xe.equirect_vert,fragmentShader:xe.equirect_frag},distanceRGBA:{uniforms:ae([Ee.common,Ee.displacementmap,{referencePosition:{value:new M},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:xe.distanceRGBA_vert,fragmentShader:xe.distanceRGBA_frag},shadow:{uniforms:ae([Ee.lights,Ee.fog,{color:{value:new f(0)},opacity:{value:1}}]),vertexShader:xe.shadow_vert,fragmentShader:xe.shadow_frag}};function Me(e,t,n,i,r,a){const o=new f(0);let s,l,c=!0===r?0:1,d=null,u=0,h=null;function p(e,t){n.buffers.color.setClear(e.r,e.g,e.b,t,a)}return{getClearColor:function(){return o},render:function(n,r){let a=!1,f=!0===r.isScene?r.background:null;f&&f.isTexture&&(f=t.get(f));const m=e.xr,g=m.getSession&&m.getSession();g&&"additive"===g.environmentBlendMode&&(f=null),null===f?p(o,c):f&&f.isColor&&(p(f,1),a=!0),(e.autoClear||a)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),f&&(f.isCubeTexture||306===f.mapping)?(void 0===l&&(l=new ne(new ie(1,1,1),new se({name:"BackgroundCubeMaterial",uniforms:re(Se.cube.uniforms),vertexShader:Se.cube.vertexShader,fragmentShader:Se.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(l.material,"envMap",{}),i.update(l)),l.material.uniforms.envMap.value=f,l.material.uniforms.flipEnvMap.value=f.isCubeTexture&&!1===f.isRenderTargetTexture?-1:1,d===f&&u===f.version&&h===e.toneMapping||(l.material.needsUpdate=!0,d=f,u=f.version,h=e.toneMapping),l.layers.enableAll(),n.unshift(l,l.geometry,l.material,0,0,null)):f&&f.isTexture&&(void 0===s&&(s=new ne(new ve(2,2),new se({name:"BackgroundMaterial",uniforms:re(Se.background.uniforms),vertexShader:Se.background.vertexShader,fragmentShader:Se.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),s.geometry.deleteAttribute("normal"),Object.defineProperty(s.material,"map",{}),i.update(s)),s.material.uniforms.t2D.value=f,!0===f.matrixAutoUpdate&&f.updateMatrix(),s.material.uniforms.uvTransform.value.copy(f.matrix),d===f&&u===f.version&&h===e.toneMapping||(s.material.needsUpdate=!0,d=f,u=f.version,h=e.toneMapping),s.layers.enableAll(),n.unshift(s,s.geometry,s.material,0,0,null))}}}function Te(e,t,n,i){const r=e.getParameter(e.MAX_VERTEX_ATTRIBS),a=i.isWebGL2?null:t.get("OES_vertex_array_object"),o=i.isWebGL2||null!==a,s={},l=h(null);let c=l,d=!1;function u(t){return i.isWebGL2?e.deleteVertexArray(t):a.deleteVertexArrayOES(t)}function h(e){const t=[],n=[],i=[];for(let e=0;e<r;e++)t[e]=0,n[e]=0,i[e]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:i,object:e,attributes:{},index:null}}function f(){const e=c.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function p(e){m(e,0)}function m(n,r){const a=c.newAttributes,o=c.enabledAttributes,s=c.attributeDivisors;a[n]=1,0===o[n]&&(e.enableVertexAttribArray(n),o[n]=1),s[n]!==r&&((i.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),s[n]=r)}function g(){const t=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==t[i]&&(e.disableVertexAttribArray(i),n[i]=0)}function _(t,n,r,a,o,s){!0!==i.isWebGL2||r!==e.INT&&r!==e.UNSIGNED_INT?e.vertexAttribPointer(t,n,r,a,o,s):e.vertexAttribIPointer(t,n,r,o,s)}return{setup:function(r,l,u,v,x){let E=!1;if(o){const t=function(t,n,r){const o=!0===r.wireframe;let l=s[t.id];void 0===l&&(l={},s[t.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let d=c[o];return void 0===d&&(d=h(i.isWebGL2?e.createVertexArray():a.createVertexArrayOES()),c[o]=d),d}(v,u,l);c!==t&&(c=t,S=c.object,i.isWebGL2?e.bindVertexArray(S):a.bindVertexArrayOES(S)),E=function(e,t,n,i){const r=c.attributes,a=t.attributes;let o=0;const s=n.getAttributes();for(const t in s)if(s[t].location>=0){const n=r[t];let i=a[t];if(void 0===i&&("instanceMatrix"===t&&e.instanceMatrix&&(i=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(i=e.instanceColor)),void 0===n)return!0;if(n.attribute!==i)return!0;if(i&&n.data!==i.data)return!0;o++}return c.attributesNum!==o||c.index!==i}(r,v,u,x),E&&function(e,t,n,i){const r={},a=t.attributes;let o=0;const s=n.getAttributes();for(const t in s)if(s[t].location>=0){let n=a[t];void 0===n&&("instanceMatrix"===t&&e.instanceMatrix&&(n=e.instanceMatrix),"instanceColor"===t&&e.instanceColor&&(n=e.instanceColor));const i={};i.attribute=n,n&&n.data&&(i.data=n.data),r[t]=i,o++}c.attributes=r,c.attributesNum=o,c.index=i}(r,v,u,x)}else{const e=!0===l.wireframe;c.geometry===v.id&&c.program===u.id&&c.wireframe===e||(c.geometry=v.id,c.program=u.id,c.wireframe=e,E=!0)}var S;null!==x&&n.update(x,e.ELEMENT_ARRAY_BUFFER),(E||d)&&(d=!1,function(r,a,o,s){if(!1===i.isWebGL2&&(r.isInstancedMesh||s.isInstancedBufferGeometry)&&null===t.get("ANGLE_instanced_arrays"))return;f();const l=s.attributes,c=o.getAttributes(),d=a.defaultAttributeValues;for(const t in c){const i=c[t];if(i.location>=0){let a=l[t];if(void 0===a&&("instanceMatrix"===t&&r.instanceMatrix&&(a=r.instanceMatrix),"instanceColor"===t&&r.instanceColor&&(a=r.instanceColor)),void 0!==a){const t=a.normalized,o=a.itemSize,l=n.get(a);if(void 0===l)continue;const c=l.buffer,d=l.type,u=l.bytesPerElement;if(a.isInterleavedBufferAttribute){const n=a.data,l=n.stride,h=a.offset;if(n.isInstancedInterleavedBuffer){for(let e=0;e<i.locationSize;e++)m(i.location+e,n.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===s._maxInstanceCount&&(s._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let e=0;e<i.locationSize;e++)p(i.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<i.locationSize;e++)_(i.location+e,o/i.locationSize,d,t,l*u,(h+o/i.locationSize*e)*u)}else{if(a.isInstancedBufferAttribute){for(let e=0;e<i.locationSize;e++)m(i.location+e,a.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===s._maxInstanceCount&&(s._maxInstanceCount=a.meshPerAttribute*a.count)}else for(let e=0;e<i.locationSize;e++)p(i.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<i.locationSize;e++)_(i.location+e,o/i.locationSize,d,t,o*u,o/i.locationSize*e*u)}}else if(void 0!==d){const n=d[t];if(void 0!==n)switch(n.length){case 2:e.vertexAttrib2fv(i.location,n);break;case 3:e.vertexAttrib3fv(i.location,n);break;case 4:e.vertexAttrib4fv(i.location,n);break;default:e.vertexAttrib1fv(i.location,n)}}}}g()}(r,l,u,v),null!==x&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.get(x).buffer))},reset:function(){},resetDefaultState:function(){l.geometry=null,l.program=null,l.wireframe=!1},dispose:function(){},releaseStatesOfGeometry:function(e){if(void 0===s[e.id])return;const t=s[e.id];for(const e in t){const n=t[e];for(const e in n)u(n[e].object),delete n[e];delete t[e]}delete s[e.id]},releaseStatesOfProgram:function(e){for(const t in s){const n=s[t];if(void 0===n[e.id])continue;const i=n[e.id];for(const e in i)u(i[e].object),delete i[e];delete n[e.id]}},initAttributes:f,enableAttribute:p,disableUnusedAttributes:g}}function be(e,t,n,i){let r;i.isWebGL2,this.setMode=function(e){r=e},this.render=function(t,i){e.drawArrays(r,t,i),n.update(i,r,1)},this.renderInstances=function(e,t,n){}}function Ae(e,t,n){function i(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const r="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&e instanceof WebGL2ComputeRenderingContext;let a=void 0!==n.precision?n.precision:"highp";const o=i(a);o!==a&&(a=o);const s=r||t.has("WEBGL_draw_buffers"),l=!0===n.logarithmicDepthBuffer,c=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),d=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),h=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),f=e.getParameter(e.MAX_VERTEX_ATTRIBS),p=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),m=e.getParameter(e.MAX_VARYING_VECTORS),g=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),_=d>0,v=r||t.has("OES_texture_float");return{isWebGL2:r,drawBuffers:s,getMaxAnisotropy:function(){},getMaxPrecision:i,precision:a,logarithmicDepthBuffer:l,maxTextures:c,maxVertexTextures:d,maxTextureSize:u,maxCubemapSize:h,maxAttributes:f,maxVertexUniforms:p,maxVaryings:m,maxFragmentUniforms:g,vertexTextures:_,floatFragmentTextures:v,floatVertexTextures:_&&v,maxSamples:r?e.getParameter(e.MAX_SAMPLES):0}}function we(e){const t=this;let n=null,i=0,r=!1,a=!1;const o=new fe,s=new c,l={value:null,needsUpdate:!1};function d(e,n,i,r){const a=null!==e?e.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const t=i+4*a,r=n.matrixWorldInverse;s.getNormalMatrix(r),(null===c||c.length<t)&&(c=new Float32Array(t));for(let t=0,n=i;t!==a;++t,n+=4)o.copy(e[t]).applyMatrix4(r,s),o.normal.toArray(c,n),c[n+3]=o.constant}l.value=c,l.needsUpdate=!0}return t.numPlanes=a,t.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t,a){const o=0!==e.length||t||0!==i||r;return r=t,n=d(e,a,0),i=e.length,o},this.beginShadows=function(){a=!0,d(null)},this.endShadows=function(){a=!1},this.setState=function(t,o,s){const c=t.clippingPlanes,u=t.clipIntersection,h=t.clipShadows,f=e.get(t);if(!r||null===c||0===c.length||a&&!h)a&&d(null);else{const e=a?0:i,t=4*e;let r=f.clippingState||null;l.value=r,r=d(c,o,t,s);for(let e=0;e!==t;++e)r[e]=n[e];f.clippingState=r,this.numIntersection=u?this.numPlanes:0,this.numPlanes+=e}}}function Ce(e){let t=new WeakMap;function n(e){}return{get:function(i){if(i&&i.isTexture&&!1===i.isRenderTargetTexture){const r=i.mapping;if(303===r||304===r){if(t.has(i))return t.get(i).texture,void i.mapping;{const r=i.image;if(r&&r.height>0){const a=new de(r.height/2);return a.fromEquirectangularTexture(e,i),t.set(i,a),i.addEventListener("dispose",n),a.texture,void i.mapping}return null}}}return i},dispose:function(){}}}Se.physical={uniforms:ae([Se.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new l(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new f(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new l},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new f(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new f(1,1,1)},specularColorMap:{value:null}}]),vertexShader:xe.meshphysical_vert,fragmentShader:xe.meshphysical_frag};class ye extends le{constructor(e=-1,t=1,n=1,i=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-e,a=n+e,o=i+t,s=i-t;if(null!==this.view&&this.view.enabled){const e=(this.right-this.left)/this.view.fullWidth/this.zoom,t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=e*this.view.offsetX,a=r+e*this.view.width,o-=t*this.view.offsetY,s=o-t*this.view.height}this.projectionMatrix.makeOrthographic(r,a,o,s,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}}const Le=[.125,.215,.35,.446,.526,.582],Re=new ye,De=new f;let Pe=null;const Ie=(1+Math.sqrt(5))/2,Ne=1/Ie,Ue=[new M(1,1,1),new M(-1,1,1),new M(1,1,-1),new M(-1,1,-1),new M(0,Ie,Ne),new M(0,Ie,-Ne),new M(Ne,0,Ie),new M(-Ne,0,Ie),new M(Ie,Ne,0),new M(-Ie,Ne,0)];class Fe{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){Pe=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,n,i,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_cleanup(e){this._renderer.setRenderTarget(Pe),e.scissorTest=!1,Be(e,0,0,e.width,e.height)}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:1006,minFilter:1006,generateMipmaps:!1,type:1016,format:1023,encoding:3e3,depthBuffer:!1},i=Oe(e,t,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Oe(e,t,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(e){const t=[],n=[],i=[];let r=e;const a=e-4+1+Le.length;for(let o=0;o<a;o++){const a=Math.pow(2,r);n.push(a);let s=1/a;o>e-4?s=Le[o-e+4-1]:0===o&&(s=0),i.push(s);const l=1/(a-2),c=-l,d=1+l,u=[c,c,d,c,d,d,c,c,d,d,c,d],h=6,f=6,p=3,m=2,g=1,_=new Float32Array(p*f*h),v=new Float32Array(m*f*h),x=new Float32Array(g*f*h);for(let e=0;e<h;e++){const t=e%3*2/3-1,n=e>2?0:-1,i=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];_.set(i,p*f*e),v.set(u,m*f*e);const r=[e,e,e,e,e,e];x.set(r,g*f*e)}const E=new te;E.setAttribute("position",new j(_,p)),E.setAttribute("uv",new j(v,m)),E.setAttribute("faceIndex",new j(x,g)),t.push(E),r>4&&r--}return{lodPlanes:t,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(e,t,n){const i=new Float32Array(20),r=new M(0,1,0);return new se({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(i,e,t)}return i}_compileMaterial(e){const t=new ne(this._lodPlanes[0],e);this._renderer.compile(t,Re)}_sceneToCubeUV(e,t,n,i){const r=new ce(90,1,t,n),a=[1,-1,1,1,1,1],o=[1,1,1,-1,-1,-1],s=this._renderer,l=s.autoClear,c=s.toneMapping;s.getClearColor(De),s.toneMapping=0,s.autoClear=!1;const d=new X({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),u=new ne(new ie,d);let h=!1;const f=e.background;f?f.isColor&&(d.color.copy(f),e.background=null,h=!0):(d.color.copy(De),h=!0);for(let t=0;t<6;t++){const n=t%3;0===n?(r.up.set(0,a[t],0),r.lookAt(o[t],0,0)):1===n?(r.up.set(0,0,a[t]),r.lookAt(0,o[t],0)):(r.up.set(0,a[t],0),r.lookAt(0,0,o[t]));const l=this._cubeSize;Be(i,n*l,t>2?l:0,l,l),s.setRenderTarget(i),h&&s.render(u,r),s.render(e,r)}u.geometry.dispose(),u.material.dispose(),s.toneMapping=c,s.autoClear=l,e.background=f}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let t=1;t<this._lodPlanes.length;t++){const n=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=Ue[(t-1)%Ue.length];this._blur(e,t-1,t,n,i)}t.autoClear=n}_blur(e,t,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,i,"latitudinal",r),this._halfBlur(a,e,n,n,i,"longitudinal",r)}_halfBlur(e,t,n,i,r,a,o){const s=this._renderer,l=this._blurMaterial,c=new ne(this._lodPlanes[i],l),d=l.uniforms,u=this._sizeLods[n]-1,h=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,f=r/h,p=isFinite(r)?1+Math.floor(3*f):20,m=[];let g=0;for(let e=0;e<20;++e){const t=e/f,n=Math.exp(-t*t/2);m.push(n),0===e?g+=n:e<p&&(g+=2*n)}for(let e=0;e<m.length;e++)m[e]=m[e]/g;d.envMap.value=e.texture,d.samples.value=p,d.weights.value=m,d.latitudinal.value="latitudinal"===a,o&&(d.poleAxis.value=o);const{_lodMax:_}=this;d.dTheta.value=h,d.mipInt.value=_-n;const v=this._sizeLods[i];Be(t,3*v*(i>_-4?i-_+4:0),4*(this._cubeSize-v),3*v,2*v),s.setRenderTarget(t),s.render(c,Re)}}function Oe(e,t,n){const i=new E(e,t,n);return i.texture.mapping=306,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Be(e,t,n,i,r){e.viewport.set(t,n,i,r),e.scissor.set(t,n,i,r)}function Ge(e){let t=new WeakMap,n=null;function i(e){}return{get:function(r){if(r&&r.isTexture){const a=r.mapping,o=303===a||304===a,s=301===a||302===a;if(o||s){if(r.isRenderTargetTexture&&!0===r.needsPMREMUpdate){r.needsPMREMUpdate=!1;let i=t.get(r);return null===n&&(n=new Fe(e)),i=o?n.fromEquirectangular(r,i):n.fromCubemap(r,i),t.set(r,i),i.texture}if(t.has(r))return t.get(r).texture;{const a=r.image;if(o&&a&&a.height>0){null===n&&(n=new Fe(e));const a=o?n.fromEquirectangular(r):n.fromCubemap(r);return t.set(r,a),r.addEventListener("dispose",i),a.texture}return null}}}return r},dispose:function(){}}}function He(e){const t={};function n(n){if(void 0!==t[n])return t[n];let i;switch(n){case"WEBGL_depth_texture":i=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=e.getExtension(n)}return t[n]=i,i}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){return n(e)}}}function ze(e,t,n,i){const r={},a=new WeakMap;function o(e){const s=e.target;null!==s.index&&t.remove(s.index);for(const e in s.attributes)t.remove(s.attributes[e]);s.removeEventListener("dispose",o),delete r[s.id];const l=a.get(s);l&&(t.remove(l),a.delete(s)),i.releaseStatesOfGeometry(s),!0===s.isInstancedBufferGeometry&&delete s._maxInstanceCount,n.memory.geometries--}return{get:function(e,t){return!0===r[t.id]||(t.addEventListener("dispose",o),r[t.id]=!0,n.memory.geometries++),t},update:function(n){const i=n.attributes;for(const n in i)t.update(i[n],e.ARRAY_BUFFER);const r=n.morphAttributes;for(const n in r){const i=r[n];for(let n=0,r=i.length;n<r;n++)t.update(i[n],e.ARRAY_BUFFER)}},getWireframeAttribute:function(e){}}}function ke(e,t,n,i){let r,a,o;i.isWebGL2,this.setMode=function(e){r=e},this.setIndex=function(e){a=e.type,o=e.bytesPerElement},this.render=function(t,i){e.drawElements(r,i,a,t*o),n.update(i,r,1)},this.renderInstances=function(e,t,n){}}function Ve(e){const t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(n,i,r){switch(t.calls++,i){case e.TRIANGLES:t.triangles+=r*(n/3);break;case e.LINES:t.lines+=r*(n/2);break;case e.LINE_STRIP:t.lines+=r*(n-1);break;case e.LINE_LOOP:t.lines+=r*n;break;case e.POINTS:t.points+=r*n}}}}function We(e,t,n){return new x,{update:function(e,t,n,i){}}}function Xe(e,t,n,i){let r=new WeakMap;function a(e){}return{update:function(o){const s=i.render.frame,l=o.geometry,c=t.get(o,l);return r.get(c)!==s&&(t.update(c),r.set(c,s)),o.isInstancedMesh&&(!1===o.hasEventListener("dispose",a)&&o.addEventListener("dispose",a),n.update(o.instanceMatrix,e.ARRAY_BUFFER),null!==o.instanceColor&&n.update(o.instanceColor,e.ARRAY_BUFFER)),c},dispose:function(){}}}const je=new v;new class extends v{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},new class extends v{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}},new class extends v{constructor(e,t,n,i,r,a,o,s,l,c){super(e=void 0!==e?e:[],t=void 0!==t?t:301,n,i,r,a,o,s,l,c),this.isCubeTexture=!0,this.flipY=!1}};const Ye=[],Ke=new Float32Array(16),qe=new Float32Array(9);function Ze(e,t){if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(e[n]!==t[n])return!1;return!0}function $e(e,t){for(let n=0,i=t.length;n<i;n++)e[n]=t[n]}function Je(e,t){const n=this.cache;n[0]!==t&&(e.uniform1f(this.addr,t),n[0]=t)}function Qe(e,t){}function et(e,t){const n=this.cache;if(void 0!==t.x)n[0]===t.x&&n[1]===t.y&&n[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(void 0!==t.r)n[0]===t.r&&n[1]===t.g&&n[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(Ze(n,t))return;e.uniform3fv(this.addr,t),$e(n,t)}}function tt(e,t){}function nt(e,t){}function it(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ze(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),$e(n,t)}else{if(Ze(n,i))return;qe.set(i),e.uniformMatrix3fv(this.addr,!1,qe),$e(n,i)}}function rt(e,t){const n=this.cache,i=t.elements;if(void 0===i){if(Ze(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),$e(n,t)}else{if(Ze(n,i))return;Ke.set(i),e.uniformMatrix4fv(this.addr,!1,Ke),$e(n,i)}}function at(e,t){const n=this.cache;n[0]!==t&&(e.uniform1i(this.addr,t),n[0]=t)}function ot(e,t){}function st(e,t){}function lt(e,t){}function ct(e,t){}function dt(e,t){}function ut(e,t){}function ht(e,t){}function ft(e,t,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(e.uniform1i(this.addr,r),i[0]=r),n.setTexture2D(t||je,r)}function pt(e,t,n){}function mt(e,t,n){}function gt(e,t,n){}function _t(e,t){e.uniform1fv(this.addr,t)}function vt(e,t){}function xt(e,t){const n=function(e,t,n){const i=e[0];if(i<=0||i>0)return e;const r=3*t;let a=Ye[r];if(void 0===a&&(a=new Float32Array(r),Ye[r]=a),0!==t){i.toArray(a,0);for(let n=1,i=0;n!==t;++n)i+=3,e[n].toArray(a,i)}return a}(t,this.size);e.uniform3fv(this.addr,n)}function Et(e,t){}function St(e,t){}function Mt(e,t){}function Tt(e,t){}function bt(e,t){}function At(e,t){}function wt(e,t){}function Ct(e,t){}function yt(e,t){}function Lt(e,t){}function Rt(e,t){}function Dt(e,t){}function Pt(e,t,n){}function It(e,t,n){}function Nt(e,t,n){}function Ut(e,t,n){}class Ft{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=function(e){switch(e){case 5126:return Je;case 35664:return Qe;case 35665:return et;case 35666:return tt;case 35674:return nt;case 35675:return it;case 35676:return rt;case 5124:case 35670:return at;case 35667:case 35671:return ot;case 35668:case 35672:return st;case 35669:case 35673:return lt;case 5125:return ct;case 36294:return dt;case 36295:return ut;case 36296:return ht;case 35678:case 36198:case 36298:case 36306:case 35682:return ft;case 35679:case 36299:case 36307:return pt;case 35680:case 36300:case 36308:case 36293:return mt;case 36289:case 36303:case 36311:case 36292:return gt}}(t.type)}}class Ot{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return _t;case 35664:return vt;case 35665:return xt;case 35666:return Et;case 35674:return St;case 35675:return Mt;case 35676:return Tt;case 5124:case 35670:return bt;case 35667:case 35671:return At;case 35668:case 35672:return wt;case 35669:case 35673:return Ct;case 5125:return yt;case 36294:return Lt;case 36295:return Rt;case 36296:return Dt;case 35678:case 36198:case 36298:case 36306:case 35682:return Pt;case 35679:case 36299:case 36307:return It;case 35680:case 36300:case 36308:case 36293:return Nt;case 36289:case 36303:case 36311:case 36292:return Ut}}(t.type)}}class Bt{}const Gt=/(\w+)(\])?(\[|\.)?/g;function Ht(e,t){e.seq.push(t),e.map[t.id]=t}function zt(e,t,n){const i=e.name,r=i.length;for(Gt.lastIndex=0;;){const a=Gt.exec(i),o=Gt.lastIndex;let s=a[1];const l="]"===a[2],c=a[3];if(l&&(s|=0),void 0===c||"["===c&&o+2===r){Ht(n,void 0===c?new Ft(s,e,t):new Ot(s,e,t));break}{let e=n.map[s];void 0===e&&(e=new Bt(s),Ht(n,e)),n=e}}}class kt{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=e.getActiveUniform(t,i);zt(n,e.getUniformLocation(t,n.name),this)}}setValue(e,t,n,i){const r=this.map[t];void 0!==r&&r.setValue(e,n,i)}static upload(e,t,n,i){for(let r=0,a=t.length;r!==a;++r){const a=t[r],o=n[a.id];!1!==o.needsUpdate&&a.setValue(e,o.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,r=e.length;i!==r;++i){const r=e[i];r.id in t&&n.push(r)}return n}}function Vt(e,t,n){const i=e.createShader(t);return e.shaderSource(i,n),e.compileShader(i),i}let Wt=0;function Xt(e,t){const n=function(e){switch(e){case 3e3:default:return["Linear","( value )"];case 3001:return["sRGB","( value )"]}}(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function jt(e,t){let n;switch(t){case 1:default:n="Linear";break;case 2:n="Reinhard";break;case 3:n="OptimizedCineon";break;case 4:n="ACESFilmic";break;case 5:n="Custom"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function Yt(e){return""!==e}function Kt(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function qt(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const Zt=/^[ \t]*#include +<([\w\d./]+)>/gm;function $t(e){return e.replace(Zt,Jt)}function Jt(e,t){const n=xe[t];if(void 0===n)throw new Error("Can not resolve #include <"+t+">");return $t(n)}const Qt=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,en=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function tn(e){return e.replace(en,rn).replace(Qt,nn)}function nn(e,t,n,i){}function rn(e,t,n,i){let r="";for(let e=parseInt(t);e<parseInt(n);e++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return r}function an(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function on(e,t,n,i){const r=e.getContext(),a=n.defines;let o=n.vertexShader,s=n.fragmentShader;const l=function(e){let t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(n),c=function(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case 301:case 302:t="ENVMAP_TYPE_CUBE";break;case 306:t="ENVMAP_TYPE_CUBE_UV"}return t}(n),d=function(e){let t="ENVMAP_MODE_REFLECTION";return e.envMap&&302===e.envMapMode&&(t="ENVMAP_MODE_REFRACTION"),t}(n),u=function(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case 0:t="ENVMAP_BLENDING_MULTIPLY";break;case 1:t="ENVMAP_BLENDING_MIX";break;case 2:t="ENVMAP_BLENDING_ADD"}return t}(n),h=function(e){const t=e.envMapCubeUVHeight;if(null===t)return null;const n=Math.log2(t)-2,i=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),f=n.isWebGL2?"":void 0,p=function(e){const t=[];for(const n in e){const i=e[n];!1!==i&&t.push("#define "+n+" "+i)}return t.join("\n")}(a),m=r.createProgram();let g,_,v=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(g=[p].filter(Yt).join("\n"),g.length>0&&(g+="\n"),_=[f,p].filter(Yt).join("\n"),_.length>0&&(_+="\n")):(g=[an(n),"#define SHADER_NAME "+n.shaderName,p,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Yt).join("\n"),_=[f,an(n),"#define SHADER_NAME "+n.shaderName,p,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+d:"",n.envMap?"#define "+u:"",h?"#define CUBEUV_TEXEL_WIDTH "+h.texelWidth:"",h?"#define CUBEUV_TEXEL_HEIGHT "+h.texelHeight:"",h?"#define CUBEUV_MAX_MIP "+h.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?xe.tonemapping_pars_fragment:"",0!==n.toneMapping?jt("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",xe.encodings_pars_fragment,Xt("linearToOutputTexel",n.outputEncoding),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Yt).join("\n")),o=$t(o),o=Kt(o,n),o=qt(o,n),s=$t(s),s=Kt(s,n),s=qt(s,n),o=tn(o),s=tn(s),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(v="#version 300 es\n",g=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g,_=["#define varying in","300 es"===n.glslVersion?"":"layout(location = 0) out highp vec4 pc_fragColor;","300 es"===n.glslVersion?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const x=v+g+o,E=v+_+s,S=Vt(r,r.VERTEX_SHADER,x),M=Vt(r,r.FRAGMENT_SHADER,E);if(r.attachShader(m,S),r.attachShader(m,M),void 0!==n.index0AttributeName?r.bindAttribLocation(m,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(m,0,"position"),r.linkProgram(m),e.debug.checkShaderErrors){const e=r.getProgramInfoLog(m).trim(),t=r.getShaderInfoLog(S).trim(),n=r.getShaderInfoLog(M).trim();let i=!0,a=!0;!1===r.getProgramParameter(m,r.LINK_STATUS)?(i=!1,r.getError(),r.getProgramParameter(m,r.VALIDATE_STATUS)):""!==e||""!==t&&""!==n||(a=!1),a&&(this.diagnostics={runnable:i,programLog:e,vertexShader:{log:t,prefix:g},fragmentShader:{log:n,prefix:_}})}let T,b;return r.deleteShader(S),r.deleteShader(M),this.getUniforms=function(){return void 0===T&&(T=new kt(r,m)),T},this.getAttributes=function(){return void 0===b&&(b=function(e,t){const n={},i=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=e.getActiveAttrib(t,r),a=i.name;let o=1;i.type===e.FLOAT_MAT2&&(o=2),i.type===e.FLOAT_MAT3&&(o=3),i.type===e.FLOAT_MAT4&&(o=4),n[a]={type:i.type,location:e.getAttribLocation(t,a),locationSize:o}}return n}(r,m)),b},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(m),this.program=void 0},this.name=n.shaderName,this.id=Wt++,this.cacheKey=t,this.usedTimes=1,this.program=m,this.vertexShader=S,this.fragmentShader=M,this}let sn=0;class ln{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(e);return!1===a.has(i)&&(a.add(i),i.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}_getShaderCacheForMaterial(e){const t=this.materialCache;return!1===t.has(e)&&t.set(e,new Set),t.get(e)}_getShaderStage(e){const t=this.shaderCache;if(!1===t.has(e)){const n=new cn(e);t.set(e,n)}return t.get(e)}}class cn{constructor(e){this.id=sn++,this.code=e,this.usedTimes=0}}function dn(e,t,n,i,r,a,o){const s=new U,l=new ln,c=[],d=r.isWebGL2,u=r.logarithmicDepthBuffer,h=r.vertexTextures;let f=r.precision;const p={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(a,s,c,m,g){const _=m.fog,v=g.geometry,x=a.isMeshStandardMaterial?m.environment:null,E=(a.isMeshStandardMaterial?n:t).get(a.envMap||x),S=E&&306===E.mapping?E.image.height:null,M=p[a.type];null!==a.precision&&(f=r.getMaxPrecision(a.precision),f!==a.precision&&a.precision);const T=v.morphAttributes.position||v.morphAttributes.normal||v.morphAttributes.color,b=void 0!==T?T.length:0;let A,w,C,y,L=0;if(void 0!==v.morphAttributes.position&&(L=1),void 0!==v.morphAttributes.normal&&(L=2),void 0!==v.morphAttributes.color&&(L=3),M){const e=Se[M];A=e.vertexShader,w=e.fragmentShader}else A=a.vertexShader,w=a.fragmentShader,l.update(a),C=l.getVertexShaderID(a),y=l.getFragmentShaderID(a);const R=e.getRenderTarget(),D=a.alphaTest>0,P=a.clearcoat>0,I=a.iridescence>0;return{isWebGL2:d,shaderID:M,shaderName:a.type,vertexShader:A,fragmentShader:w,defines:a.defines,customVertexShaderID:C,customFragmentShaderID:y,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:f,instancing:!0===g.isInstancedMesh,instancingColor:!0===g.isInstancedMesh&&null!==g.instanceColor,supportsVertexTextures:h,outputEncoding:null===R?e.outputEncoding:!0===R.isXRRenderTarget?R.texture.encoding:3e3,map:!!a.map,matcap:!!a.matcap,envMap:!!E,envMapMode:E&&E.mapping,envMapCubeUVHeight:S,lightMap:!!a.lightMap,aoMap:!!a.aoMap,emissiveMap:!!a.emissiveMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,objectSpaceNormalMap:1===a.normalMapType,tangentSpaceNormalMap:0===a.normalMapType,decodeVideoTexture:!!a.map&&!0===a.map.isVideoTexture&&3001===a.map.encoding,clearcoat:P,clearcoatMap:P&&!!a.clearcoatMap,clearcoatRoughnessMap:P&&!!a.clearcoatRoughnessMap,clearcoatNormalMap:P&&!!a.clearcoatNormalMap,iridescence:I,iridescenceMap:I&&!!a.iridescenceMap,iridescenceThicknessMap:I&&!!a.iridescenceThicknessMap,displacementMap:!!a.displacementMap,roughnessMap:!!a.roughnessMap,metalnessMap:!!a.metalnessMap,specularMap:!!a.specularMap,specularIntensityMap:!!a.specularIntensityMap,specularColorMap:!!a.specularColorMap,opaque:!1===a.transparent&&1===a.blending,alphaMap:!!a.alphaMap,alphaTest:D,gradientMap:!!a.gradientMap,sheen:a.sheen>0,sheenColorMap:!!a.sheenColorMap,sheenRoughnessMap:!!a.sheenRoughnessMap,transmission:a.transmission>0,transmissionMap:!!a.transmissionMap,thicknessMap:!!a.thicknessMap,combine:a.combine,vertexTangents:!!a.normalMap&&!!v.attributes.tangent,vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!v.attributes.color&&4===v.attributes.color.itemSize,vertexUvs:!!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatMap||a.clearcoatRoughnessMap||a.clearcoatNormalMap||a.iridescenceMap||a.iridescenceThicknessMap||a.displacementMap||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularColorMap||a.sheenColorMap||a.sheenRoughnessMap),uvsVertexOnly:!(a.map||a.bumpMap||a.normalMap||a.specularMap||a.alphaMap||a.emissiveMap||a.roughnessMap||a.metalnessMap||a.clearcoatNormalMap||a.iridescenceMap||a.iridescenceThicknessMap||a.transmission>0||a.transmissionMap||a.thicknessMap||a.specularIntensityMap||a.specularColorMap||a.sheen>0||a.sheenColorMap||a.sheenRoughnessMap||!a.displacementMap),fog:!!_,useFog:!0===a.fog,fogExp2:_&&_.isFogExp2,flatShading:!!a.flatShading,sizeAttenuation:a.sizeAttenuation,logarithmicDepthBuffer:u,skinning:!0===g.isSkinnedMesh,morphTargets:void 0!==v.morphAttributes.position,morphNormals:void 0!==v.morphAttributes.normal,morphColors:void 0!==v.morphAttributes.color,morphTargetsCount:b,morphTextureStride:L,numDirLights:s.directional.length,numPointLights:s.point.length,numSpotLights:s.spot.length,numRectAreaLights:s.rectArea.length,numHemiLights:s.hemi.length,numDirLightShadows:s.directionalShadowMap.length,numPointLightShadows:s.pointShadowMap.length,numSpotLightShadows:s.spotShadowMap.length,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:a.dithering,shadowMapEnabled:e.shadowMap.enabled&&c.length>0,shadowMapType:e.shadowMap.type,toneMapping:a.toneMapped?e.toneMapping:0,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,useDepthPacking:!!a.depthPacking,depthPacking:a.depthPacking||0,index0AttributeName:a.index0AttributeName,extensionDerivatives:a.extensions&&a.extensions.derivatives,extensionFragDepth:a.extensions&&a.extensions.fragDepth,extensionDrawBuffers:a.extensions&&a.extensions.drawBuffers,extensionShaderTextureLOD:a.extensions&&a.extensions.shaderTextureLOD,rendererExtensionFragDepth:d||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:d||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:d||i.has("EXT_shader_texture_lod"),customProgramCacheKey:a.customProgramCacheKey()}},getProgramCacheKey:function(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),void 0!==t.defines)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return!1===t.isRawShaderMaterial&&(function(e,t){e.push(t.precision),e.push(t.outputEncoding),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.combine),e.push(t.vertexUvs),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection),e.push(t.depthPacking)}(n,t),function(e,t){s.disableAll(),t.isWebGL2&&s.enable(0),t.supportsVertexTextures&&s.enable(1),t.instancing&&s.enable(2),t.instancingColor&&s.enable(3),t.map&&s.enable(4),t.matcap&&s.enable(5),t.envMap&&s.enable(6),t.lightMap&&s.enable(7),t.aoMap&&s.enable(8),t.emissiveMap&&s.enable(9),t.bumpMap&&s.enable(10),t.normalMap&&s.enable(11),t.objectSpaceNormalMap&&s.enable(12),t.tangentSpaceNormalMap&&s.enable(13),t.clearcoat&&s.enable(14),t.clearcoatMap&&s.enable(15),t.clearcoatRoughnessMap&&s.enable(16),t.clearcoatNormalMap&&s.enable(17),t.iridescence&&s.enable(18),t.iridescenceMap&&s.enable(19),t.iridescenceThicknessMap&&s.enable(20),t.displacementMap&&s.enable(21),t.specularMap&&s.enable(22),t.roughnessMap&&s.enable(23),t.metalnessMap&&s.enable(24),t.gradientMap&&s.enable(25),t.alphaMap&&s.enable(26),t.alphaTest&&s.enable(27),t.vertexColors&&s.enable(28),t.vertexAlphas&&s.enable(29),t.vertexUvs&&s.enable(30),t.vertexTangents&&s.enable(31),t.uvsVertexOnly&&s.enable(32),t.fog&&s.enable(33),e.push(s.mask),s.disableAll(),t.useFog&&s.enable(0),t.flatShading&&s.enable(1),t.logarithmicDepthBuffer&&s.enable(2),t.skinning&&s.enable(3),t.morphTargets&&s.enable(4),t.morphNormals&&s.enable(5),t.morphColors&&s.enable(6),t.premultipliedAlpha&&s.enable(7),t.shadowMapEnabled&&s.enable(8),t.physicallyCorrectLights&&s.enable(9),t.doubleSided&&s.enable(10),t.flipSided&&s.enable(11),t.useDepthPacking&&s.enable(12),t.dithering&&s.enable(13),t.specularIntensityMap&&s.enable(14),t.specularColorMap&&s.enable(15),t.transmission&&s.enable(16),t.transmissionMap&&s.enable(17),t.thicknessMap&&s.enable(18),t.sheen&&s.enable(19),t.sheenColorMap&&s.enable(20),t.sheenRoughnessMap&&s.enable(21),t.decodeVideoTexture&&s.enable(22),t.opaque&&s.enable(23),e.push(s.mask)}(n,t),n.push(e.outputEncoding)),n.push(t.customProgramCacheKey),n.join()},getUniforms:function(e){const t=p[e.type];let n;if(t){const e=Se[t];n=oe.clone(e.uniforms)}else n=e.uniforms;return n},acquireProgram:function(t,n){let i;for(let e=0,t=c.length;e<t;e++){const t=c[e];if(t.cacheKey===n){i=t,++i.usedTimes;break}}return void 0===i&&(i=new on(e,n,t,a),c.push(i)),i},releaseProgram:function(e){if(0==--e.usedTimes){const t=c.indexOf(e);c[t]=c[c.length-1],c.pop(),e.destroy()}},releaseShaderCache:function(e){},programs:c,dispose:function(){}}}function un(){let e=new WeakMap;return{get:function(t){let n=e.get(t);return void 0===n&&(n={},e.set(t,n)),n},remove:function(t){e.delete(t)},update:function(e,t,n){},dispose:function(){}}}function hn(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function fn(e,t){}function pn(){const e=[];let t=0;const n=[],i=[],r=[];return{opaque:n,transmissive:i,transparent:r,init:function(){t=0,n.length=0,i.length=0,r.length=0},push:function(a,o,s,l,c,d){const u=function(n,i,r,a,o,s){let l=e[t];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:a,renderOrder:n.renderOrder,z:o,group:s},e[t]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=a,l.renderOrder=n.renderOrder,l.z=o,l.group=s),t++,l}(a,o,s,l,c,d);s.transmission>0?i.push(u):!0===s.transparent?r.push(u):n.push(u)},unshift:function(e,t,n,i,r,a){},finish:function(){for(let n=t,i=e.length;n<i;n++){const t=e[n];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.group=null}},sort:function(e,t){n.length>1&&n.sort(e||hn),i.length>1&&i.sort(t||fn),r.length>1&&r.sort(t||fn)}}}function mn(){let e=new WeakMap;return{get:function(t,n){let i;return!1===e.has(t)?(i=new pn,e.set(t,[i])):n>=e.get(t).length?(i=new pn,e.get(t).push(i)):i=e.get(t)[n],i},dispose:function(){}}}function gn(){return{}}let _n=0;function vn(e,t){}function xn(e,t){const n=new gn,i={},r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let e=0;e<9;e++)r.probe.push(new M);const a=new M,o=new w,s=new w;return{setup:function(a,o){let s=0,l=0,c=0;for(let e=0;e<9;e++)r.probe[e].set(0,0,0);let d=0,u=0,h=0,f=0,p=0,m=0,g=0,_=0;a.sort(vn);const v=!0!==o?Math.PI:1;for(let e=0,t=a.length;e<t;e++){const t=a[e],o=t.color,x=t.intensity,E=t.distance,S=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)s+=o.r*x*v,l+=o.g*x*v,c+=o.b*x*v;else if(t.isLightProbe)for(let e=0;e<9;e++)r.probe[e].addScaledVector(t.sh.coefficients[e],x);else if(t.isDirectionalLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*v),t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.directionalShadow[d]=n,r.directionalShadowMap[d]=S,r.directionalShadowMatrix[d]=t.shadow.matrix,m++}r.directional[d]=e,d++}else if(t.isSpotLight){const e=n.get(t);if(e.position.setFromMatrixPosition(t.matrixWorld),e.color.copy(o).multiplyScalar(x*v),e.distance=E,e.coneCos=Math.cos(t.angle),e.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,r.spotShadow[h]=n,r.spotShadowMap[h]=S,r.spotShadowMatrix[h]=t.shadow.matrix,_++}r.spot[h]=e,h++}else if(t.isRectAreaLight){const e=n.get(t);e.color.copy(o).multiplyScalar(x),e.halfWidth.set(.5*t.width,0,0),e.halfHeight.set(0,.5*t.height,0),r.rectArea[f]=e,f++}else if(t.isPointLight){const e=n.get(t);if(e.color.copy(t.color).multiplyScalar(t.intensity*v),e.distance=t.distance,e.decay=t.decay,t.castShadow){const e=t.shadow,n=i.get(t);n.shadowBias=e.bias,n.shadowNormalBias=e.normalBias,n.shadowRadius=e.radius,n.shadowMapSize=e.mapSize,n.shadowCameraNear=e.camera.near,n.shadowCameraFar=e.camera.far,r.pointShadow[u]=n,r.pointShadowMap[u]=S,r.pointShadowMatrix[u]=t.shadow.matrix,g++}r.point[u]=e,u++}else if(t.isHemisphereLight){const e=n.get(t);e.skyColor.copy(t.color).multiplyScalar(x*v),e.groundColor.copy(t.groundColor).multiplyScalar(x*v),r.hemi[p]=e,p++}}f>0&&(t.isWebGL2||!0===e.has("OES_texture_float_linear")?(r.rectAreaLTC1=Ee.LTC_FLOAT_1,r.rectAreaLTC2=Ee.LTC_FLOAT_2):!0===e.has("OES_texture_half_float_linear")&&(r.rectAreaLTC1=Ee.LTC_HALF_1,r.rectAreaLTC2=Ee.LTC_HALF_2)),r.ambient[0]=s,r.ambient[1]=l,r.ambient[2]=c;const x=r.hash;x.directionalLength===d&&x.pointLength===u&&x.spotLength===h&&x.rectAreaLength===f&&x.hemiLength===p&&x.numDirectionalShadows===m&&x.numPointShadows===g&&x.numSpotShadows===_||(r.directional.length=d,r.spot.length=h,r.rectArea.length=f,r.point.length=u,r.hemi.length=p,r.directionalShadow.length=m,r.directionalShadowMap.length=m,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=_,r.spotShadowMap.length=_,r.directionalShadowMatrix.length=m,r.pointShadowMatrix.length=g,r.spotShadowMatrix.length=_,x.directionalLength=d,x.pointLength=u,x.spotLength=h,x.rectAreaLength=f,x.hemiLength=p,x.numDirectionalShadows=m,x.numPointShadows=g,x.numSpotShadows=_,r.version=_n++)},setupView:function(e,t){let n=0,i=0,l=0,c=0,d=0;const u=t.matrixWorldInverse;for(let t=0,h=e.length;t<h;t++){const h=e[t];if(h.isDirectionalLight){const e=r.directional[n];e.direction.setFromMatrixPosition(h.matrixWorld),a.setFromMatrixPosition(h.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),n++}else if(h.isSpotLight){const e=r.spot[l];e.position.setFromMatrixPosition(h.matrixWorld),e.position.applyMatrix4(u),e.direction.setFromMatrixPosition(h.matrixWorld),a.setFromMatrixPosition(h.target.matrixWorld),e.direction.sub(a),e.direction.transformDirection(u),l++}else if(h.isRectAreaLight){const e=r.rectArea[c];e.position.setFromMatrixPosition(h.matrixWorld),e.position.applyMatrix4(u),s.identity(),o.copy(h.matrixWorld),o.premultiply(u),s.extractRotation(o),e.halfWidth.set(.5*h.width,0,0),e.halfHeight.set(0,.5*h.height,0),e.halfWidth.applyMatrix4(s),e.halfHeight.applyMatrix4(s),c++}else if(h.isPointLight){const e=r.point[i];e.position.setFromMatrixPosition(h.matrixWorld),e.position.applyMatrix4(u),i++}else if(h.isHemisphereLight){const e=r.hemi[d];e.direction.setFromMatrixPosition(h.matrixWorld),e.direction.transformDirection(u),d++}}},state:r}}function En(e,t){const n=new xn(e,t),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(e){n.setup(i,e)},setupLightsView:function(e){n.setupView(i,e)},pushLight:function(e){},pushShadow:function(e){}}}function Sn(e,t){let n=new WeakMap;return{get:function(i,r=0){let a;return!1===n.has(i)?(a=new En(e,t),n.set(i,[a])):r>=n.get(i).length?(a=new En(e,t),n.get(i).push(a)):a=n.get(i)[r],a},dispose:function(){}}}class Mn extends W{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}}class Tn extends W{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.referencePosition=new M,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}}function bn(e,t,n){new me;const i=new l,r=new l,a=new x;new Mn({depthPacking:3201}),new Tn;const o=n.maxTextureSize,s=new se({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new l},radius:{value:4}},vertexShader:"void main(){\ngl_Position=vec4(position,1.0);\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main(){\nconst float samples=float(VSM_SAMPLES);\nfloat mean=0.0;\nfloat squared_mean=0.0;\nfloat uvStride=samples <=1.0 ? 0.0 : 2.0/(samples-1.0);\nfloat uvStart=samples <=1.0 ? 0.0 :-1.0;\nfor(float i=0.0;i < samples;i++){\nfloat uvOffset=uvStart+i*uvStride;\n#ifdef HORIZONTAL_PASS\nvec2 distribution=unpackRGBATo2Half(texture2D(shadow_pass,(gl_FragCoord.xy+vec2(uvOffset,0.0)*radius)/resolution));\nmean+=distribution.x;\nsquared_mean+=distribution.y*distribution.y+distribution.x*distribution.x;\n#else\nfloat depth=unpackRGBAToDepth(texture2D(shadow_pass,(gl_FragCoord.xy+vec2(0.0,uvOffset)*radius)/resolution));\nmean+=depth;\nsquared_mean+=depth*depth;\n#endif\n}\nmean=mean/samples;\nsquared_mean=squared_mean/samples;\nfloat std_dev=sqrt(squared_mean-mean*mean);\ngl_FragColor=pack2HalfToRGBA(vec2(mean,std_dev));\n}"});s.clone().defines.HORIZONTAL_PASS=1;const c=new te;c.setAttribute("position",new j(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3)),new ne(c,s);const d=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(t,n,s){if(!1===d.enabled)return;if(!1===d.autoUpdate&&!1===d.needsUpdate)return;if(0===t.length)return;const l=e.getRenderTarget(),c=e.getActiveCubeFace(),u=e.getActiveMipmapLevel(),h=e.state;h.setBlending(0),h.buffers.color.setClear(1,1,1,1),h.buffers.depth.setTest(!0),h.setScissorTest(!1);for(let n=0,s=t.length;n<s;n++){const s=t[n],l=s.shadow;if(void 0===l)continue;if(!1===l.autoUpdate&&!1===l.needsUpdate)continue;i.copy(l.mapSize);const c=l.getFrameExtents();if(i.multiply(c),r.copy(l.mapSize),(i.x>o||i.y>o)&&(i.x>o&&(r.x=Math.floor(o/c.x),i.x=r.x*c.x,l.mapSize.x=r.x),i.y>o&&(r.y=Math.floor(o/c.y),i.y=r.y*c.y,l.mapSize.y=r.y)),null!==l.map||l.isPointLightShadow||3!==this.type||(l.map=new E(i.x,i.y),l.map.texture.name=s.name+".shadowMap",l.mapPass=new E(i.x,i.y),l.camera.updateProjectionMatrix()),null===l.map){const e={minFilter:1003,magFilter:1003,format:1023};l.map=new E(i.x,i.y,e),l.map.texture.name=s.name+".shadowMap",l.camera.updateProjectionMatrix()}e.setRenderTarget(l.map),e.clear();const d=l.getViewportCount();for(let e=0;e<d;e++){const t=l.getViewport(e);a.set(r.x*t.x,r.y*t.y,r.x*t.z,r.y*t.w),h.viewport(a),l.updateMatrices(s,e),l.getFrustum(),l.camera,this.type}!l.isPointLightShadow&&this.type,l.needsUpdate=!1}d.needsUpdate=!1,e.setRenderTarget(l,c,u)}}function An(e,t,n){const i=n.isWebGL2,r=new function(){const t=new x;let n=null;const i=new x(0,0,0,0);return{setMask:function(t){n!==t&&(e.colorMask(t,t,t,t),n=t)},setClear:function(n,r,a,o,s){!0===s&&(n*=o,r*=o,a*=o),t.set(n,r,a,o),!1===i.equals(t)&&(e.clearColor(n,r,a,o),i.copy(t))}}},a=new function(){let t=null,n=null,i=null;return{setTest:function(t){t?F(e.DEPTH_TEST):O(e.DEPTH_TEST)},setMask:function(n){t!==n&&(e.depthMask(n),t=n)},setFunc:function(t){if(n!==t){if(t)switch(t){case 0:e.depthFunc(e.NEVER);break;case 1:e.depthFunc(e.ALWAYS);break;case 2:e.depthFunc(e.LESS);break;case 3:default:e.depthFunc(e.LEQUAL);break;case 4:e.depthFunc(e.EQUAL);break;case 5:e.depthFunc(e.GEQUAL);break;case 6:e.depthFunc(e.GREATER);break;case 7:e.depthFunc(e.NOTEQUAL)}else e.depthFunc(e.LEQUAL);n=t}},setClear:function(t){i!==t&&(e.clearDepth(t),i=t)}}},o=new function(){let t=null;return{setTest:function(t){t?F(e.STENCIL_TEST):O(e.STENCIL_TEST)},setClear:function(n){t!==n&&(e.clearStencil(n),t=n)}}};let s={},l={},c=new WeakMap,d=[],u=null,h=!1,f=null,p=null,m=null,g=null,_=null,v=null,E=null,S=!1,M=null,T=null,b=null,A=null;const w=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),C=e.getParameter(e.VERSION);-1!==C.indexOf("WebGL")?parseFloat(/^WebGL (\d)/.exec(C)[1]):-1!==C.indexOf("OpenGL ES")&&parseFloat(/^OpenGL ES (\d)/.exec(C)[1]);let y=null,L={};const R=e.getParameter(e.SCISSOR_BOX),D=e.getParameter(e.VIEWPORT),P=(new x).fromArray(R),I=(new x).fromArray(D);function N(t,n,i){const r=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let t=0;t<i;t++)e.texImage2D(n+t,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,r);return a}const U={};function F(t){!0!==s[t]&&(e.enable(t),s[t]=!0)}function O(t){!1!==s[t]&&(e.disable(t),s[t]=!1)}U[e.TEXTURE_2D]=N(e.TEXTURE_2D,e.TEXTURE_2D,1),U[e.TEXTURE_CUBE_MAP]=N(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),r.setClear(0,0,0,1),a.setClear(1),o.setClear(0),F(e.DEPTH_TEST),a.setFunc(3),z(!1),k(1),F(e.CULL_FACE),H(0);const B={100:e.FUNC_ADD,101:e.FUNC_SUBTRACT,102:e.FUNC_REVERSE_SUBTRACT};if(i)B[103]=e.MIN,B[104]=e.MAX;else{const e=t.get("EXT_blend_minmax");null!==e&&(B[103]=e.MIN_EXT,B[104]=e.MAX_EXT)}const G={200:e.ZERO,201:e.ONE,202:e.SRC_COLOR,204:e.SRC_ALPHA,210:e.SRC_ALPHA_SATURATE,208:e.DST_COLOR,206:e.DST_ALPHA,203:e.ONE_MINUS_SRC_COLOR,205:e.ONE_MINUS_SRC_ALPHA,209:e.ONE_MINUS_DST_COLOR,207:e.ONE_MINUS_DST_ALPHA};function H(t,n,i,r,a,o,s,l){if(0!==t){if(!1===h&&(F(e.BLEND),h=!0),5===t)a=a||n,o=o||i,s=s||r,n===p&&a===_||(e.blendEquationSeparate(B[n],B[a]),p=n,_=a),i===m&&r===g&&o===v&&s===E||(e.blendFuncSeparate(G[i],G[r],G[o],G[s]),m=i,g=r,v=o,E=s),f=t,S=null;else if(t!==f||l!==S){if(100===p&&100===_||(e.blendEquation(e.FUNC_ADD),p=100,_=100),l)switch(t){case 1:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.ONE,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA)}else switch(t){case 1:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case 2:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case 3:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case 4:e.blendFunc(e.ZERO,e.SRC_COLOR)}m=null,g=null,v=null,E=null,f=t,S=l}}else!0===h&&(O(e.BLEND),h=!1)}function z(t){M!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),M=t)}function k(t){0!==t?(F(e.CULL_FACE),t!==T&&(1===t?e.cullFace(e.BACK):2===t?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):O(e.CULL_FACE),T=t}function V(t,n,i){t?(F(e.POLYGON_OFFSET_FILL),b===n&&A===i||(e.polygonOffset(n,i),b=n,A=i)):O(e.POLYGON_OFFSET_FILL)}function W(t){void 0===t&&(t=e.TEXTURE0+w-1),y!==t&&(e.activeTexture(t),y=t)}return{buffers:{color:r,depth:a,stencil:o},enable:F,disable:O,bindFramebuffer:function(t,n){return l[t]!==n&&(e.bindFramebuffer(t,n),l[t]=n,i&&(t===e.DRAW_FRAMEBUFFER&&(l[e.FRAMEBUFFER]=n),t===e.FRAMEBUFFER&&(l[e.DRAW_FRAMEBUFFER]=n)),!0)},drawBuffers:function(i,r){let a=d,o=!1;if(i)if(a=c.get(r),void 0===a&&(a=[],c.set(r,a)),i.isWebGLMultipleRenderTargets){const t=i.texture;if(a.length!==t.length||a[0]!==e.COLOR_ATTACHMENT0){for(let n=0,i=t.length;n<i;n++)a[n]=e.COLOR_ATTACHMENT0+n;a.length=t.length,o=!0}}else a[0]!==e.COLOR_ATTACHMENT0&&(a[0]=e.COLOR_ATTACHMENT0,o=!0);else a[0]!==e.BACK&&(a[0]=e.BACK,o=!0);o&&(n.isWebGL2?e.drawBuffers(a):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(a))},useProgram:function(t){return u!==t&&(e.useProgram(t),u=t,!0)},setBlending:H,setMaterial:function(t,n){2===t.side?O(e.CULL_FACE):F(e.CULL_FACE);let i=1===t.side;n&&(i=!i),z(i),1===t.blending&&!1===t.transparent?H(0):H(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),r.setMask(t.colorWrite);const s=t.stencilWrite;o.setTest(s),s&&(o.setMask(t.stencilWriteMask),o.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),o.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),V(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?F(e.SAMPLE_ALPHA_TO_COVERAGE):O(e.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:z,setCullFace:k,setLineWidth:function(e){},setPolygonOffset:V,setScissorTest:function(t){t?F(e.SCISSOR_TEST):O(e.SCISSOR_TEST)},activeTexture:W,bindTexture:function(t,n){null===y&&W();let i=L[y];void 0===i&&(i={type:void 0,texture:void 0},L[y]=i),i.type===t&&i.texture===n||(e.bindTexture(t,n||U[t]),i.type=t,i.texture=n)},unbindTexture:function(){const t=L[y];void 0!==t&&void 0!==t.type&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)},compressedTexImage2D:function(){},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){}},texImage3D:function(){},texStorage2D:function(){try{e.texStorage2D.apply(e,arguments)}catch(e){}},texStorage3D:function(){},texSubImage2D:function(){try{e.texSubImage2D.apply(e,arguments)}catch(e){}},texSubImage3D:function(){},compressedTexSubImage2D:function(){},scissor:function(t){!1===P.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),P.copy(t))},viewport:function(t){!1===I.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),I.copy(t))},reset:function(){}}}function wn(e,t,n,i,r,a,l){const c=r.isWebGL2;r.maxTextures,r.maxCubemapSize;const d=r.maxTextureSize;r.maxSamples;const u=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,h=/OculusBrowser/g.test(navigator.userAgent);let f;const p=new WeakMap;let g=!1;try{g="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(e){}function _(e){return o(e.width)&&o(e.height)}function v(e,t){return e.generateMipmaps&&t&&1003!==e.minFilter&&1006!==e.minFilter}function x(t){e.generateMipmap(t)}function E(n,i,r,a,o=!1){if(!1===c)return i;if(null!==n&&void 0!==e[n])return e[n];let s=i;return i===e.RED&&(r===e.FLOAT&&(s=e.R32F),r===e.HALF_FLOAT&&(s=e.R16F),r===e.UNSIGNED_BYTE&&(s=e.R8)),i===e.RG&&(r===e.FLOAT&&(s=e.RG32F),r===e.HALF_FLOAT&&(s=e.RG16F),r===e.UNSIGNED_BYTE&&(s=e.RG8)),i===e.RGBA&&(r===e.FLOAT&&(s=e.RGBA32F),r===e.HALF_FLOAT&&(s=e.RGBA16F),r===e.UNSIGNED_BYTE&&(s=3001===a&&!1===o?e.SRGB8_ALPHA8:e.RGBA8),r===e.UNSIGNED_SHORT_4_4_4_4&&(s=e.RGBA4),r===e.UNSIGNED_SHORT_5_5_5_1&&(s=e.RGB5_A1)),s!==e.R16F&&s!==e.R32F&&s!==e.RG16F&&s!==e.RG32F&&s!==e.RGBA16F&&s!==e.RGBA32F||t.get("EXT_color_buffer_float"),s}function S(e){}function M(e){}let T=0;const b={1e3:e.REPEAT,1001:e.CLAMP_TO_EDGE,1002:e.MIRRORED_REPEAT},A={1003:e.NEAREST,1004:e.NEAREST_MIPMAP_NEAREST,1005:e.NEAREST_MIPMAP_LINEAR,1006:e.LINEAR,1007:e.LINEAR_MIPMAP_NEAREST,1008:e.LINEAR_MIPMAP_LINEAR};function w(n,a,o){if(o?(e.texParameteri(n,e.TEXTURE_WRAP_S,b[a.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,b[a.wrapT]),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,b[a.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,A[a.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,A[a.minFilter])):(e.texParameteri(n,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(n,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,e.CLAMP_TO_EDGE),1001!==a.wrapS||a.wrapT,e.texParameteri(n,e.TEXTURE_MAG_FILTER,void a.magFilter),e.texParameteri(n,e.TEXTURE_MIN_FILTER,void a.minFilter),1003!==a.minFilter&&a.minFilter),!0===t.has("EXT_texture_filter_anisotropic")){const o=t.get("EXT_texture_filter_anisotropic");if(1015===a.type&&!1===t.has("OES_texture_float_linear"))return;if(!1===c&&1016===a.type&&!1===t.has("OES_texture_half_float_linear"))return;(a.anisotropy>1||i.get(a).__currentAnisotropy)&&(e.texParameterf(n,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy)}}function C(t,r,o,s,l){const c=a.convert(o.format,o.encoding),d=a.convert(o.type),h=E(o.internalFormat,c,d,o.encoding);i.get(r).__hasExternalTextures||(l===e.TEXTURE_3D||l===e.TEXTURE_2D_ARRAY?n.texImage3D(l,0,h,r.width,r.height,r.depth,0,c,d,null):n.texImage2D(l,0,h,r.width,r.height,0,c,d,null)),n.bindFramebuffer(e.FRAMEBUFFER,t),R(r)?u.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,s,l,i.get(o).__webglTexture,0,void 0):e.framebufferTexture2D(e.FRAMEBUFFER,s,l,i.get(o).__webglTexture,0),n.bindFramebuffer(e.FRAMEBUFFER,null)}function y(t,n,i){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer&&!n.stencilBuffer){let r=e.DEPTH_COMPONENT16;if(i||R(n)){const t=n.depthTexture;t&&t.isDepthTexture&&(1015===t.type?r=e.DEPTH_COMPONENT32F:1014===t.type&&(r=e.DEPTH_COMPONENT24));const i=void 0;R(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,i,r,n.width,n.height):e.renderbufferStorageMultisample(e.RENDERBUFFER,i,r,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,r,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)}else if(n.depthBuffer&&n.stencilBuffer){const r=void 0;i&&!1===R(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,n.width,n.height):R(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,r,e.DEPTH24_STENCIL8,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)}else{const t=!0===n.isWebGLMultipleRenderTargets?n.texture:[n.texture];for(let r=0;r<t.length;r++){const o=t[r],s=a.convert(o.format,o.encoding),l=a.convert(o.type),c=E(o.internalFormat,s,l,o.encoding),d=void 0;i&&!1===R(n)?e.renderbufferStorageMultisample(e.RENDERBUFFER,d,c,n.width,n.height):R(n)?u.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,d,c,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,c,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function L(t){const r=i.get(t),a=!0===t.isWebGLCubeRenderTarget;if(t.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");r.__webglFramebuffer}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=e.createRenderbuffer(),y(r.__webglDepthbuffer[i],t,!1)}else n.bindFramebuffer(e.FRAMEBUFFER,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),y(r.__webglDepthbuffer,t,!1);n.bindFramebuffer(e.FRAMEBUFFER,null)}function R(e){const n=i.get(e);return c&&e.samples>0&&!0===t.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}this.allocateTextureUnit=function(){const e=T;return T+=1,e},this.resetTextureUnits=function(){T=0},this.setTexture2D=function(r,o){const u=i.get(r);if(r.isVideoTexture,!1===r.isRenderTargetTexture&&r.version>0&&u.__version!==r.version){const i=r.image;if(null===i);else if(!1!==i.complete)return void function(i,r,o){let u=e.TEXTURE_2D;r.isDataArrayTexture&&(u=e.TEXTURE_2D_ARRAY),r.isData3DTexture&&(u=e.TEXTURE_3D);const h=function(t,n){let i=!1;void 0===t.__webglInit&&(t.__webglInit=!0,n.addEventListener("dispose",S));const r=n.source;let a=p.get(r);void 0===a&&(a={},p.set(r,a));const o=function(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.encoding),t.join()}(n);if(o!==t.__cacheKey){void 0===a[o]&&(a[o]={texture:e.createTexture(),usedTimes:0},l.memory.textures++,i=!0),a[o].usedTimes++;const n=a[t.__cacheKey];void 0!==n&&(a[t.__cacheKey].usedTimes--,n.usedTimes),t.__cacheKey=o,t.__webglTexture=a[o].texture}return i}(i,r),g=r.source;if(n.activeTexture(e.TEXTURE0+o),n.bindTexture(u,i.__webglTexture),g.version!==g.__currentVersion||!0===h){e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,r.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,e.NONE);const i=function(e){return!c&&(1001!==e.wrapS||1001!==e.wrapT||1003!==e.minFilter&&1006!==e.minFilter)}(r)&&!1===_(r.image);let o=function(e,t,n,i){let r=1;if((e.width>i||e.height>i)&&(r=i/Math.max(e.width,e.height)),r<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){const n=t?s:Math.floor,i=n(r*e.width),a=n(r*e.height);void 0===f&&(f=void 0);const o=f;return o.width=i,o.height=a,o.getContext("2d").drawImage(e,0,0,i,a),e.width,e.height,o}return"data"in e&&(e.width,e.height),e}return e}(r.image,i,0,d);o=function(e,n){const i=e.encoding,r=e.format;return e.type,!0===e.isCompressedTexture||!0===e.isVideoTexture||1035===e.format||3e3!==i&&3001===i&&!1===c&&(!0===t.has("EXT_sRGB")&&1023===r?(e.format=1035,e.minFilter=1006,e.generateMipmaps=!1):n=m.sRGBToLinear(n)),n}(r,o);const l=_(o)||c,p=a.convert(r.format,r.encoding);let S,M=a.convert(r.type),T=E(r.internalFormat,p,M,r.encoding,r.isVideoTexture);w(u,r,l);const b=r.mipmaps,A=c&&!0!==r.isVideoTexture,C=void 0===g.__currentVersion||!0===h,y=function(e,t,n){return!0===v(e,n)||e.isFramebufferTexture&&1003!==e.minFilter&&1006!==e.minFilter?Math.log2(Math.max(t.width,t.height))+1:void 0!==e.mipmaps&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}(r,o,l);if(r.isDepthTexture)T=e.DEPTH_COMPONENT,c?T=1015===r.type?e.DEPTH_COMPONENT32F:1014===r.type?e.DEPTH_COMPONENT24:1020===r.type?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT16:r.type,1026===r.format&&T===e.DEPTH_COMPONENT&&1012!==r.type&&1014!==r.type&&(r.type=1014,M=a.convert(r.type)),1027===r.format&&T===e.DEPTH_COMPONENT&&(T=e.DEPTH_STENCIL,1020!==r.type&&(r.type=1020,M=a.convert(r.type))),C&&(A?n.texStorage2D(e.TEXTURE_2D,1,T,o.width,o.height):n.texImage2D(e.TEXTURE_2D,0,T,o.width,o.height,0,p,M,null));else if(r.isDataTexture)if(b.length>0&&l){A&&C&&n.texStorage2D(e.TEXTURE_2D,y,T,b[0].width,b[0].height);for(let t=0,i=b.length;t<i;t++)S=b[t],A?n.texSubImage2D(e.TEXTURE_2D,t,0,0,S.width,S.height,p,M,S.data):n.texImage2D(e.TEXTURE_2D,t,T,S.width,S.height,0,p,M,S.data);r.generateMipmaps=!1}else A?(C&&n.texStorage2D(e.TEXTURE_2D,y,T,o.width,o.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,o.width,o.height,p,M,o.data)):n.texImage2D(e.TEXTURE_2D,0,T,o.width,o.height,0,p,M,o.data);else if(r.isCompressedTexture){A&&C&&n.texStorage2D(e.TEXTURE_2D,y,T,b[0].width,b[0].height);for(let t=0,i=b.length;t<i;t++)S=b[t],1023!==r.format?null!==p&&(A?n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,S.width,S.height,p,S.data):n.compressedTexImage2D(e.TEXTURE_2D,t,T,S.width,S.height,0,S.data)):A?n.texSubImage2D(e.TEXTURE_2D,t,0,0,S.width,S.height,p,M,S.data):n.texImage2D(e.TEXTURE_2D,t,T,S.width,S.height,0,p,M,S.data)}else if(r.isDataArrayTexture)A?(C&&n.texStorage3D(e.TEXTURE_2D_ARRAY,y,T,o.width,o.height,o.depth),n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,o.width,o.height,o.depth,p,M,o.data)):n.texImage3D(e.TEXTURE_2D_ARRAY,0,T,o.width,o.height,o.depth,0,p,M,o.data);else if(r.isData3DTexture)A?(C&&n.texStorage3D(e.TEXTURE_3D,y,T,o.width,o.height,o.depth),n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,o.width,o.height,o.depth,p,M,o.data)):n.texImage3D(e.TEXTURE_3D,0,T,o.width,o.height,o.depth,0,p,M,o.data);else if(r.isFramebufferTexture){if(C)if(A)n.texStorage2D(e.TEXTURE_2D,y,T,o.width,o.height);else{let t=o.width,i=o.height;for(let r=0;r<y;r++)n.texImage2D(e.TEXTURE_2D,r,T,t,i,0,p,M,null),t>>=1,i>>=1}}else if(b.length>0&&l){A&&C&&n.texStorage2D(e.TEXTURE_2D,y,T,b[0].width,b[0].height);for(let t=0,i=b.length;t<i;t++)S=b[t],A?n.texSubImage2D(e.TEXTURE_2D,t,0,0,p,M,S):n.texImage2D(e.TEXTURE_2D,t,T,p,M,S);r.generateMipmaps=!1}else A?(C&&n.texStorage2D(e.TEXTURE_2D,y,T,o.width,o.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,p,M,o)):n.texImage2D(e.TEXTURE_2D,0,T,p,M,o);v(r,l)&&x(u),g.__currentVersion=g.version,r.onUpdate&&r.onUpdate(r)}i.__version=r.version}(u,r,o)}n.activeTexture(e.TEXTURE0+o),n.bindTexture(e.TEXTURE_2D,u.__webglTexture)},this.setTexture2DArray=function(e,t){},this.setTexture3D=function(e,t){},this.setTextureCube=function(e,t){},this.rebindTextures=function(e,t,n){},this.setupRenderTarget=function(t){const o=t.texture,s=i.get(t),d=i.get(o);t.addEventListener("dispose",M),!0!==t.isWebGLMultipleRenderTargets&&(void 0===d.__webglTexture&&(d.__webglTexture=e.createTexture()),d.__version=o.version,l.memory.textures++);const u=!0===t.isWebGLCubeRenderTarget,h=!0===t.isWebGLMultipleRenderTargets,f=_(t)||c;if(u){s.__webglFramebuffer=[];for(let t=0;t<6;t++)s.__webglFramebuffer[t]=e.createFramebuffer()}else{if(s.__webglFramebuffer=e.createFramebuffer(),h&&r.drawBuffers){const n=t.texture;for(let t=0,r=n.length;t<r;t++){const r=i.get(n[t]);void 0===r.__webglTexture&&(r.__webglTexture=e.createTexture(),l.memory.textures++)}}if(c&&t.samples>0&&!1===R(t)){const i=h?o:[o];s.__webglMultisampledFramebuffer=e.createFramebuffer(),s.__webglColorRenderbuffer=[],n.bindFramebuffer(e.FRAMEBUFFER,s.__webglMultisampledFramebuffer);for(let n=0;n<i.length;n++){const r=i[n];s.__webglColorRenderbuffer[n]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,s.__webglColorRenderbuffer[n]);const o=a.convert(r.format,r.encoding),l=a.convert(r.type),c=E(r.internalFormat,o,l,r.encoding),d=void 0;e.renderbufferStorageMultisample(e.RENDERBUFFER,d,c,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,s.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(s.__webglDepthRenderbuffer=e.createRenderbuffer(),y(s.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(u){n.bindTexture(e.TEXTURE_CUBE_MAP,d.__webglTexture),w(e.TEXTURE_CUBE_MAP,o,f);for(let n=0;n<6;n++)C(s.__webglFramebuffer[n],t,o,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n);v(o,f)&&x(e.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(h){const r=t.texture;for(let a=0,o=r.length;a<o;a++){const o=r[a],l=i.get(o);n.bindTexture(e.TEXTURE_2D,l.__webglTexture),w(e.TEXTURE_2D,o,f),C(s.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0+a,e.TEXTURE_2D),v(o,f)&&x(e.TEXTURE_2D)}n.unbindTexture()}else{let i=e.TEXTURE_2D;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&c&&(i=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY),n.bindTexture(i,d.__webglTexture),w(i,o,f),C(s.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0,i),v(o,f)&&x(i),n.unbindTexture()}t.depthBuffer&&L(t)},this.updateRenderTargetMipmap=function(t){const r=_(t)||c,a=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let o=0,s=a.length;o<s;o++){const s=a[o];if(v(s,r)){const r=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,a=i.get(s).__webglTexture;n.bindTexture(r,a),x(r),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(t){if(c&&t.samples>0&&!1===R(t)){const r=t.isWebGLMultipleRenderTargets?t.texture:[t.texture],a=t.width,o=t.height;let s=e.COLOR_BUFFER_BIT;const l=[],c=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT,d=i.get(t),u=!0===t.isWebGLMultipleRenderTargets;if(u)for(let t=0;t<r.length;t++)n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null),n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0);n.bindFramebuffer(e.READ_FRAMEBUFFER,d.__webglMultisampledFramebuffer),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer);for(let n=0;n<r.length;n++){l.push(e.COLOR_ATTACHMENT0+n),t.depthBuffer&&l.push(c);const f=void 0!==d.__ignoreDepthValues&&d.__ignoreDepthValues;if(!1===f&&(t.depthBuffer&&(s|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&(s|=e.STENCIL_BUFFER_BIT)),u&&e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,d.__webglColorRenderbuffer[n]),!0===f&&(e.invalidateFramebuffer(e.READ_FRAMEBUFFER,[c]),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[c])),u){const t=i.get(r[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,a,o,0,0,a,o,s,e.NEAREST),h&&e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l)}if(n.bindFramebuffer(e.READ_FRAMEBUFFER,null),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),u)for(let t=0;t<r.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,d.__webglColorRenderbuffer[t]);const a=i.get(r[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer),e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,a,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=L,this.setupFrameBufferTexture=C,this.useMultisampledRTT=R}function Cn(e,t,n){const i=n.isWebGL2;return{convert:function(n,r=null){let a;if(1009===n)return e.UNSIGNED_BYTE;if(1017===n)return e.UNSIGNED_SHORT_4_4_4_4;if(1018===n)return e.UNSIGNED_SHORT_5_5_5_1;if(1010===n)return e.BYTE;if(1011===n)return e.SHORT;if(1012===n)return e.UNSIGNED_SHORT;if(1013===n)return e.INT;if(1014===n)return e.UNSIGNED_INT;if(1015===n)return e.FLOAT;if(1016===n)return i?e.HALF_FLOAT:(a=t.get("OES_texture_half_float"),null!==a?a.HALF_FLOAT_OES:null);if(1021===n)return e.ALPHA;if(1023===n)return e.RGBA;if(1024===n)return e.LUMINANCE;if(1025===n)return e.LUMINANCE_ALPHA;if(1026===n)return e.DEPTH_COMPONENT;if(1027===n)return e.DEPTH_STENCIL;if(1028===n)return e.RED;if(1022===n)return e.RGBA;if(1035===n)return a=t.get("EXT_sRGB"),null!==a?a.SRGB_ALPHA_EXT:null;if(1029===n)return e.RED_INTEGER;if(1030===n)return e.RG;if(1031===n)return e.RG_INTEGER;if(1033===n)return e.RGBA_INTEGER;if(33776===n||33777===n||33778===n||33779===n)if(3001===r){if(a=t.get("WEBGL_compressed_texture_s3tc_srgb"),null===a)return null;if(33776===n)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(33777===n)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(33778===n)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(33779===n)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(a=t.get("WEBGL_compressed_texture_s3tc"),null===a)return null;if(33776===n)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===n)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===n)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===n)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===n||35841===n||35842===n||35843===n){if(a=t.get("WEBGL_compressed_texture_pvrtc"),null===a)return null;if(35840===n)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===n)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===n)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===n)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===n)return a=t.get("WEBGL_compressed_texture_etc1"),null!==a?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===n||37496===n){if(a=t.get("WEBGL_compressed_texture_etc"),null===a)return null;if(37492===n)return 3001===r?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(37496===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}if(37808===n||37809===n||37810===n||37811===n||37812===n||37813===n||37814===n||37815===n||37816===n||37817===n||37818===n||37819===n||37820===n||37821===n){if(a=t.get("WEBGL_compressed_texture_astc"),null===a)return null;if(37808===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===n)return 3001===r?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===n){if(a=t.get("EXT_texture_compression_bptc"),null===a)return null;if(36492===n)return 3001===r?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT}return 1020===n?i?e.UNSIGNED_INT_24_8:(a=t.get("WEBGL_depth_texture"),null!==a?a.UNSIGNED_INT_24_8_WEBGL:null):void 0!==e[n]?e[n]:null}}}class yn extends ce{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class Ln{}class Rn extends v{}class Dn extends e{constructor(e,t){super();const n=this;let i=null,r=1,a=null,o="local-floor",s=null,l=null,c=null,d=null;const u=t.getContextAttributes();let h=null;const f=[],p=new ce;p.layers.enable(1),p.viewport=new x;const m=new ce;m.layers.enable(2),m.viewport=new x;const g=new yn;g.layers.enable(1),g.layers.enable(2);let _=null,v=null;function S(e){}function T(){}function b(e){}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=f[e];return void 0===t&&(t=new Ln,f[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=f[e];return void 0===t&&(t=new Ln,f[e]=t),t.getGripSpace()},this.getHand=function(e){let t=f[e];return void 0===t&&(t=new Ln,f[e]=t),t.getHandSpace()},this.setFramebufferScaleFactor=function(e){r=e,n.isPresenting},this.setReferenceSpaceType=function(e){o=e,n.isPresenting},this.getReferenceSpace=function(){return s||a},this.setReferenceSpace=function(e){s=e},this.getBaseLayer=function(){return null!==c?c:d},this.getBinding=function(){return l},this.getFrame=function(){return null},this.getSession=function(){return i},this.setSession=async function(f){if(i=f,null!==i){if(e.getRenderTarget(),i.addEventListener("select",S),i.addEventListener("selectstart",S),i.addEventListener("selectend",S),i.addEventListener("squeeze",S),i.addEventListener("squeezestart",S),i.addEventListener("squeezeend",S),i.addEventListener("end",T),i.addEventListener("inputsourceschange",b),!0!==u.xrCompatible&&await t.makeXRCompatible(),void 0===i.renderState.layers||!1===e.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||u.antialias,alpha:u.alpha,depth:u.depth,stencil:u.stencil,framebufferScaleFactor:r};d=new XRWebGLLayer(i,t,n),i.updateRenderState({baseLayer:d}),h=new E(d.framebufferWidth,d.framebufferHeight,{format:1023,type:1009,encoding:e.outputEncoding})}else{let n=null,a=null,o=null;u.depth&&(o=u.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,n=u.stencil?1027:1026,a=u.stencil?1020:1014);const s={colorFormat:3001===e.outputEncoding?t.SRGB8_ALPHA8:t.RGBA8,depthFormat:o,scaleFactor:r};l=new XRWebGLBinding(i,t),c=l.createProjectionLayer(s),i.updateRenderState({layers:[c]}),h=new E(c.textureWidth,c.textureHeight,{format:1023,type:1009,depthTexture:new Rn(c.textureWidth,c.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:u.stencil,encoding:e.outputEncoding,samples:u.antialias?4:0}),e.properties.get(h).__ignoreDepthValues=c.ignoreDepthValues}h.isXRRenderTarget=!0,this.setFoveation(1),s=null,a=await i.requestReferenceSpace(o),A.setContext(i),A.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},new M,new M,this.updateCamera=function(e){if(null===i)return;g.near=m.near=p.near=e.near,g.far=m.far=p.far=e.far,_===g.near&&v===g.far||(i.updateRenderState({depthNear:g.near,depthFar:g.far}),_=g.near,v=g.far),e.parent;const t=g.cameras;for(let e=0;e<t.length;e++)t[e];g.matrixWorld.decompose(g.position,g.quaternion,g.scale),e.position.copy(g.position),e.quaternion.copy(g.quaternion),e.scale.copy(g.scale),e.matrix.copy(g.matrix),e.matrixWorld.copy(g.matrixWorld);const n=e.children;for(let e=0,t=n.length;e<t;e++)n[e].updateMatrixWorld(!0);2===t.length||g.projectionMatrix.copy(p.projectionMatrix)},this.getCamera=function(){return g},this.getFoveation=function(){return null!==c?c.fixedFoveation:null!==d?d.fixedFoveation:void 0},this.setFoveation=function(e){null!==c&&(c.fixedFoveation=e),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=e)};const A=new ge;A.setAnimationLoop((function(e,t){})),this.setAnimationLoop=function(e){},this.dispose=function(){}}}function Pn(e,t){function n(n,i){n.opacity.value=i.opacity,i.color&&n.diffuse.value.copy(i.color),i.emissive&&n.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(n.map.value=i.map),i.alphaMap&&(n.alphaMap.value=i.alphaMap),i.bumpMap&&(n.bumpMap.value=i.bumpMap,n.bumpScale.value=i.bumpScale,1===i.side&&(n.bumpScale.value*=-1)),i.displacementMap&&(n.displacementMap.value=i.displacementMap,n.displacementScale.value=i.displacementScale,n.displacementBias.value=i.displacementBias),i.emissiveMap&&(n.emissiveMap.value=i.emissiveMap),i.normalMap&&(n.normalMap.value=i.normalMap,n.normalScale.value.copy(i.normalScale),1===i.side&&n.normalScale.value.negate()),i.specularMap&&(n.specularMap.value=i.specularMap),i.alphaTest>0&&(n.alphaTest.value=i.alphaTest);const r=t.get(i).envMap;if(r&&(n.envMap.value=r,n.flipEnvMap.value=r.isCubeTexture&&!1===r.isRenderTargetTexture?-1:1,n.reflectivity.value=i.reflectivity,n.ior.value=i.ior,n.refractionRatio.value=i.refractionRatio),i.lightMap){n.lightMap.value=i.lightMap;const t=!0!==e.physicallyCorrectLights?Math.PI:1;n.lightMapIntensity.value=i.lightMapIntensity*t}let a,o;i.aoMap&&(n.aoMap.value=i.aoMap,n.aoMapIntensity.value=i.aoMapIntensity),i.map?a=i.map:i.specularMap?a=i.specularMap:i.displacementMap?a=i.displacementMap:i.normalMap?a=i.normalMap:i.bumpMap?a=i.bumpMap:i.roughnessMap?a=i.roughnessMap:i.metalnessMap?a=i.metalnessMap:i.alphaMap?a=i.alphaMap:i.emissiveMap?a=i.emissiveMap:i.clearcoatMap?a=i.clearcoatMap:i.clearcoatNormalMap?a=i.clearcoatNormalMap:i.clearcoatRoughnessMap?a=i.clearcoatRoughnessMap:i.iridescenceMap?a=i.iridescenceMap:i.iridescenceThicknessMap?a=i.iridescenceThicknessMap:i.specularIntensityMap?a=i.specularIntensityMap:i.specularColorMap?a=i.specularColorMap:i.transmissionMap?a=i.transmissionMap:i.thicknessMap?a=i.thicknessMap:i.sheenColorMap?a=i.sheenColorMap:i.sheenRoughnessMap&&(a=i.sheenRoughnessMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),n.uvTransform.value.copy(a.matrix)),i.aoMap?o=i.aoMap:i.lightMap&&(o=i.lightMap),void 0!==o&&(o.isWebGLRenderTarget&&(o=o.texture),!0===o.matrixAutoUpdate&&o.updateMatrix(),n.uv2Transform.value.copy(o.matrix))}return{refreshFogUniforms:function(e,t){},refreshMaterialUniforms:function(e,i,r,a,o){i.isMeshBasicMaterial||i.isMeshLambertMaterial||i.isMeshToonMaterial||i.isMeshPhongMaterial?n(e,i):i.isMeshStandardMaterial?(n(e,i),function(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}(e,i),i.isMeshPhysicalMaterial):i.isMeshMatcapMaterial||i.isMeshDepthMaterial||i.isMeshDistanceMaterial||i.isMeshNormalMaterial?n(e,i):i.isLineBasicMaterial?i.isLineDashedMaterial:i.isPointsMaterial||i.isSpriteMaterial||(i.isShadowMaterial?(e.color.value.copy(i.color),e.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1))}}}function In(e={}){this.isWebGLRenderer=!0;const t=void 0!==e.canvas?e.canvas:function(){const e=d("canvas");return e.style.display="block",e}(),n=void 0!==e.context?e.context:null,i=void 0===e.depth||e.depth,r=void 0===e.stencil||e.stencil,a=void 0!==e.antialias&&e.antialias,o=void 0===e.premultipliedAlpha||e.premultipliedAlpha,s=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,c=void 0!==e.powerPreference?e.powerPreference:"default",u=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat;let h;h=null!==n?n.getContextAttributes().alpha:void 0!==e.alpha&&e.alpha;let f=null,p=null;const m=[],g=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=3e3,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1,Object.defineProperties(this,{gammaFactor:{}});const _=this;let v=0,E=0,S=null,T=-1,b=null;const A=new x,C=new x;let y=null,L=t.width,R=t.height,D=1,P=null,I=null;const N=new x(0,0,L,R),U=new x(0,0,L,R);let F=!1;const O=new me;let B=!1,G=!1;const H=new w;new l;const z=new M,k={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let V,W,X,j,Y,K,q,Z,$,J,Q,ee,te,ne,ie,re,ae,oe,se,le,ce,de,ue,he=n;function fe(e,n){for(let i=0;i<e.length;i++){const r=e[i],a=t.getContext(r,n);if(null!==a)return a}return null}try{const e={alpha:!0,depth:i,stencil:r,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:s,powerPreference:c,failIfMajorPerformanceCaveat:u};if("setAttribute"in t&&t.setAttribute("data-engine","three.js r141"),t.addEventListener("webglcontextlost",ve,!1),t.addEventListener("webglcontextrestored",xe,!1),t.addEventListener("webglcontextcreationerror",Ee,!1),null===he){const t=["webgl2","webgl","experimental-webgl"];if(!0===_.isWebGL1Renderer&&t.shift(),he=fe(t,e),null===he)throw fe(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===he.getShaderPrecisionFormat&&(he.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw e.message,e}V=new He(he),W=new Ae(he,V,e),V.init(W),de=new Cn(he,V,W),X=new An(he,V,W),j=new Ve(he),Y=new un,K=new wn(he,V,X,Y,W,de,j),q=new Ce(_),Z=new Ge(_),$=new _e(he,W),ue=new Te(he,V,$,W),J=new ze(he,$,j,ue),Q=new Xe(he,J,$,j),se=new We,re=new we(Y),ee=new dn(_,q,Z,V,W,ue,re),te=new Pn(_,Y),ne=new mn,ie=new Sn(V,W),oe=new Me(_,q,X,Q,h,o),ae=new bn(_,Q,W),le=new be(he,V,j,W),ce=new ke(he,V,j,W),j.programs=ee.programs,_.capabilities=W,_.extensions=V,_.properties=Y,_.renderLists=ne,_.shadowMap=ae,_.state=X,_.info=j;const pe=new Dn(_,he);function ve(e){}function xe(){}function Ee(e){}function Se(e){const t=e.target;t.removeEventListener("dispose",Se),function(e){(function(e){const t=Y.get(e).programs;void 0!==t&&(t.forEach((function(e){ee.releaseProgram(e)})),e.isShaderMaterial&&ee.releaseShaderCache(e))})(e),Y.remove(e)}(t)}function ye(){}function Le(){}this.xr=pe,this.getContext=function(){return he},this.getContextAttributes=function(){return he.getContextAttributes()},this.forceContextLoss=function(){const e=V.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=V.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return D},this.setPixelRatio=function(e){void 0!==e&&(D=e,this.setSize(L,R,!1))},this.getSize=function(e){return e.set(L,R)},this.setSize=function(e,n,i){pe.isPresenting||(L=e,R=n,t.width=Math.floor(e*D),t.height=Math.floor(n*D),!1!==i&&(t.style.width=e+"px",t.style.height=n+"px"),this.setViewport(0,0,e,n))},this.getDrawingBufferSize=function(e){return e.set(L*D,R*D).floor()},this.setDrawingBufferSize=function(e,n,i){L=e,R=n,D=i,t.width=Math.floor(e*i),t.height=Math.floor(n*i),this.setViewport(0,0,e,n)},this.getCurrentViewport=function(e){return e.copy(A)},this.getViewport=function(e){return e.copy(N)},this.setViewport=function(e,t,n,i){e.isVector4?N.set(e.x,e.y,e.z,e.w):N.set(e,t,n,i),X.viewport(A.copy(N).multiplyScalar(D).floor())},this.getScissor=function(e){return e.copy(U)},this.setScissor=function(e,t,n,i){e.isVector4?U.set(e.x,e.y,e.z,e.w):U.set(e,t,n,i),X.scissor(C.copy(U).multiplyScalar(D).floor())},this.getScissorTest=function(){return F},this.setScissorTest=function(e){X.setScissorTest(F=e)},this.setOpaqueSort=function(e){P=e},this.setTransparentSort=function(e){I=e},this.getClearColor=function(e){return e.copy(oe.getClearColor())},this.setClearColor=function(){oe.setClearColor.apply(oe,arguments)},this.getClearAlpha=function(){return oe.getClearAlpha()},this.setClearAlpha=function(){oe.setClearAlpha.apply(oe,arguments)},this.clear=function(e=!0,t=!0,n=!0){let i=0;e&&(i|=he.COLOR_BUFFER_BIT),t&&(i|=he.DEPTH_BUFFER_BIT),n&&(i|=he.STENCIL_BUFFER_BIT),he.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",ve,!1),t.removeEventListener("webglcontextrestored",xe,!1),t.removeEventListener("webglcontextcreationerror",Ee,!1),ne.dispose(),ie.dispose(),Y.dispose(),q.dispose(),Z.dispose(),Q.dispose(),ue.dispose(),ee.dispose(),pe.dispose(),pe.removeEventListener("sessionstart",ye),pe.removeEventListener("sessionend",Le),Re.stop()},this.renderBufferDirect=function(e,t,n,i,r,a){null===t&&(t=k);const o=r.isMesh&&r.matrixWorld.determinant()<0,s=function(e,t,n,i,r){!0!==t.isScene&&(t=k),K.resetTextureUnits();const a=t.fog,o=i.isMeshStandardMaterial?t.environment:null,s=null===S?_.outputEncoding:!0===S.isXRRenderTarget?S.texture.encoding:3e3,l=(i.isMeshStandardMaterial?Z:q).get(i.envMap||o),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,d=!!i.normalMap&&!!n.attributes.tangent,u=!!n.morphAttributes.position,h=!!n.morphAttributes.normal,f=!!n.morphAttributes.color,m=i.toneMapped?_.toneMapping:0,g=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==g?g.length:0,x=Y.get(i),E=p.state.lights;if(!0===B&&(!0===G||e!==b)){const t=e===b&&i.id===T;re.setState(i,e,t)}let M=!1;i.version===x.__version?x.needsLights&&x.lightsStateVersion!==E.state.version||x.outputEncoding!==s||r.isInstancedMesh&&!1===x.instancing?M=!0:r.isInstancedMesh||!0!==x.instancing?r.isSkinnedMesh&&!1===x.skinning?M=!0:r.isSkinnedMesh||!0!==x.skinning?x.envMap!==l||!0===i.fog&&x.fog!==a?M=!0:void 0===x.numClippingPlanes||x.numClippingPlanes===re.numPlanes&&x.numIntersection===re.numIntersection?(x.vertexAlphas!==c||x.vertexTangents!==d||x.morphTargets!==u||x.morphNormals!==h||x.morphColors!==f||x.toneMapping!==m||!0===W.isWebGL2&&x.morphTargetsCount!==v)&&(M=!0):M=!0:M=!0:M=!0:(M=!0,x.__version=i.version);let A=x.currentProgram;!0===M&&(A=Ue(i,t,r));let w=!1,C=!1,y=!1;const L=A.getUniforms(),P=x.uniforms;if(X.useProgram(A.program)&&(w=!0,C=!0,y=!0),i.id!==T&&(T=i.id,C=!0),w||b!==e){if(L.setValue(he,"projectionMatrix",e.projectionMatrix),W.logarithmicDepthBuffer&&L.setValue(he,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),b!==e&&(b=e,C=!0,y=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const t=L.map.cameraPosition;void 0!==t&&t.setValue(he,z.setFromMatrixPosition(e.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&L.setValue(he,"isOrthographic",!0===e.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||r.isSkinnedMesh)&&L.setValue(he,"viewMatrix",e.matrixWorldInverse)}if(r.isSkinnedMesh){L.setOptional(he,r,"bindMatrix"),L.setOptional(he,r,"bindMatrixInverse");const e=r.skeleton;e&&W.floatVertexTextures&&(null===e.boneTexture&&e.computeBoneTexture(),L.setValue(he,"boneTexture",e.boneTexture,K),L.setValue(he,"boneTextureSize",e.boneTextureSize))}const I=n.morphAttributes;var N,U;return(void 0!==I.position||void 0!==I.normal||void 0!==I.color&&!0===W.isWebGL2)&&se.update(r,n,i,A),(C||x.receiveShadow!==r.receiveShadow)&&(x.receiveShadow=r.receiveShadow,L.setValue(he,"receiveShadow",r.receiveShadow)),C&&(L.setValue(he,"toneMappingExposure",_.toneMappingExposure),x.needsLights&&(U=y,(N=P).ambientLightColor.needsUpdate=U,N.lightProbe.needsUpdate=U,N.directionalLights.needsUpdate=U,N.directionalLightShadows.needsUpdate=U,N.pointLights.needsUpdate=U,N.pointLightShadows.needsUpdate=U,N.spotLights.needsUpdate=U,N.spotLightShadows.needsUpdate=U,N.rectAreaLights.needsUpdate=U,N.hemisphereLights.needsUpdate=U),a&&!0===i.fog&&te.refreshFogUniforms(P,a),te.refreshMaterialUniforms(P,i,D,R,null),kt.upload(he,x.uniformsList,P,K)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(kt.upload(he,x.uniformsList,P,K),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&L.setValue(he,"center",r.center),L.setValue(he,"modelViewMatrix",r.modelViewMatrix),L.setValue(he,"normalMatrix",r.normalMatrix),L.setValue(he,"modelMatrix",r.matrixWorld),A}(e,t,n,i,r);X.setMaterial(i,o);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let d,u=1;!0===i.wireframe&&(l=J.getWireframeAttribute(n),u=2),ue.setup(r,i,s,n,l);let h=le;null!==l&&(d=$.get(l),h=ce,h.setIndex(d));const f=null!==l?l.count:c.count,m=n.drawRange.start*u,g=n.drawRange.count*u,v=null!==a?a.start*u:0,x=null!==a?a.count*u:1/0,E=Math.max(m,v),M=Math.min(f,m+g,v+x)-1,A=Math.max(0,M-E+1);if(0!==A){if(r.isMesh)!0===i.wireframe?(X.setLineWidth(void 0*i.wireframeLinewidth),h.setMode(he.LINES)):h.setMode(he.TRIANGLES);else if(r.isLine){let e=i.linewidth;void 0===e&&(e=1),X.setLineWidth(void 0*e),r.isLineSegments?h.setMode(he.LINES):r.isLineLoop?h.setMode(he.LINE_LOOP):h.setMode(he.LINE_STRIP)}else r.isPoints?h.setMode(he.POINTS):r.isSprite&&h.setMode(he.TRIANGLES);if(r.isInstancedMesh)h.renderInstances(E,A,r.count);else if(n.isInstancedBufferGeometry){const e=Math.min(n.instanceCount,n._maxInstanceCount);h.renderInstances(E,A,e)}else h.render(E,A)}},this.compile=function(e,t){p=ie.get(e),p.init(),g.push(p),e.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&(p.pushLight(e),e.castShadow&&p.pushShadow(e))})),p.setupLights(_.physicallyCorrectLights),e.traverse((function(t){const n=t.material;if(n)if(Array.isArray(n))for(let i=0;i<n.length;i++)Ue(n[i],e,t);else Ue(n,e,t)})),g.pop(),p=null};const Re=new ge;function De(e,t,n,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)n=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)p.pushLight(e),e.castShadow&&p.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||O.intersectsSprite(e)){i&&z.setFromMatrixPosition(e.matrixWorld).applyMatrix4(H);const t=Q.update(e),r=e.material;r.visible&&f.push(e,t,r,n,z.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==j.render.frame&&(e.skeleton.update(),e.skeleton.frame=j.render.frame),!e.frustumCulled||O.intersectsObject(e))){i&&z.setFromMatrixPosition(e.matrixWorld).applyMatrix4(H);const t=Q.update(e),r=e.material;if(Array.isArray(r)){const i=t.groups;for(let a=0,o=i.length;a<o;a++){const o=i[a],s=r[o.materialIndex];s&&s.visible&&f.push(e,t,s,n,z.z,o)}}else r.visible&&f.push(e,t,r,n,z.z,null)}const r=e.children;for(let e=0,a=r.length;e<a;e++)De(r[e],t,n,i)}function Pe(e,t,n,i){const r=e.opaque,a=e.transmissive,o=e.transparent;p.setupLightsView(n),a.length,i&&X.viewport(A.copy(i)),r.length>0&&Ie(r,t,n),a.length>0&&Ie(a,t,n),o.length>0&&Ie(o,t,n),X.buffers.depth.setTest(!0),X.buffers.depth.setMask(!0),X.buffers.color.setMask(!0),X.setPolygonOffset(!1)}function Ie(e,t,n){const i=!0===t.isScene?t.overrideMaterial:null;for(let r=0,a=e.length;r<a;r++){const a=e[r],o=a.object,s=a.geometry,l=null===i?a.material:i,c=a.group;o.layers.test(n.layers)&&Ne(o,t,n,s,l,c)}}function Ne(e,t,n,i,r,a){e.onBeforeRender(_,t,n,i,r,a),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),r.onBeforeRender(_,t,n,i,e,a),!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,_.renderBufferDirect(n,t,i,r,e,a),r.side=0,r.needsUpdate=!0,_.renderBufferDirect(n,t,i,r,e,a),r.side=2):_.renderBufferDirect(n,t,i,r,e,a),e.onAfterRender(_,t,n,i,r,a)}function Ue(e,t,n){!0!==t.isScene&&(t=k);const i=Y.get(e),r=p.state.lights,a=p.state.shadowsArray,o=r.state.version,s=ee.getParameters(e,r.state,a,t,n),l=ee.getProgramCacheKey(s);let c=i.programs;i.environment=e.isMeshStandardMaterial?t.environment:null,i.fog=t.fog,i.envMap=(e.isMeshStandardMaterial?Z:q).get(e.envMap||i.environment),void 0===c&&(e.addEventListener("dispose",Se),c=new Map,i.programs=c);let d=c.get(l);if(void 0!==d){if(i.currentProgram===d&&i.lightsStateVersion===o)return Fe(e,s),d}else s.uniforms=ee.getUniforms(e),e.onBuild(n,s,_),e.onBeforeCompile(s,_),d=ee.acquireProgram(s,l),c.set(l,d),i.uniforms=s.uniforms;const u=i.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(u.clippingPlanes=re.uniform),Fe(e,s),i.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),i.lightsStateVersion=o,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotShadowMatrix.value=r.state.spotShadowMatrix,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix);const h=d.getUniforms(),f=kt.seqWithValue(h.seq,u);return i.currentProgram=d,i.uniformsList=f,d}function Fe(e,t){const n=Y.get(e);n.outputEncoding=t.outputEncoding,n.instancing=t.instancing,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}Re.setAnimationLoop((function(e){})),"undefined"!=typeof self&&Re.setContext(self),this.setAnimationLoop=function(e){pe.setAnimationLoop(e),null===e?Re.stop():Re.start()},pe.addEventListener("sessionstart",ye),pe.addEventListener("sessionend",Le),this.render=function(e,t){if(void 0!==t&&!0!==t.isCamera)return;!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),!0===pe.enabled&&!0===pe.isPresenting&&(!0===pe.cameraAutoUpdate&&pe.updateCamera(t),t=pe.getCamera()),!0===e.isScene&&e.onBeforeRender(_,e,t,S),p=ie.get(e,g.length),p.init(),g.push(p),H.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),O.setFromProjectionMatrix(H),G=this.localClippingEnabled,B=re.init(this.clippingPlanes,G,t),f=ne.get(e,m.length),f.init(),m.push(f),De(e,t,0,_.sortObjects),f.finish(),!0===_.sortObjects&&f.sort(P,I),!0===B&&re.beginShadows();const n=p.state.shadowsArray;if(ae.render(n,e,t),!0===B&&re.endShadows(),!0===this.info.autoReset&&this.info.reset(),oe.render(f,e),p.setupLights(_.physicallyCorrectLights),t.isArrayCamera){const n=t.cameras;for(let t=0,i=n.length;t<i;t++){const i=n[t];Pe(f,e,i,i.viewport)}}else Pe(f,e,t);null!==S&&(K.updateMultisampleRenderTarget(S),K.updateRenderTargetMipmap(S)),!0===e.isScene&&e.onAfterRender(_,e,t),ue.resetDefaultState(),T=-1,b=null,g.pop(),p=g.length>0?g[g.length-1]:null,m.pop(),f=m.length>0?m[m.length-1]:null},this.getActiveCubeFace=function(){return v},this.getActiveMipmapLevel=function(){return E},this.getRenderTarget=function(){return S},this.setRenderTargetTextures=function(e,t,n){Y.get(e.texture).__webglTexture=t,Y.get(e.depthTexture).__webglTexture=n;const i=Y.get(e);i.__hasExternalTextures=!0,i.__hasExternalTextures&&(i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===V.has("WEBGL_multisampled_render_to_texture")&&(i.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(e,t){const n=Y.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=void 0===t},this.setRenderTarget=function(e,t=0,n=0){S=e,v=t,E=n;let i=!0;if(e){const t=Y.get(e);void 0!==t.__useDefaultFramebuffer?(X.bindFramebuffer(he.FRAMEBUFFER,null),i=!1):void 0===t.__webglFramebuffer?K.setupRenderTarget(e):t.__hasExternalTextures&&K.rebindTextures(e,Y.get(e.texture).__webglTexture,Y.get(e.depthTexture).__webglTexture)}let r=null,a=!1,o=!1;if(e){const n=e.texture;(n.isData3DTexture||n.isDataArrayTexture)&&(o=!0);const i=Y.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(r=i[t],a=!0):r=W.isWebGL2&&e.samples>0&&!1===K.useMultisampledRTT(e)?Y.get(e).__webglMultisampledFramebuffer:i,A.copy(e.viewport),C.copy(e.scissor),y=e.scissorTest}else A.copy(N).multiplyScalar(D).floor(),C.copy(U).multiplyScalar(D).floor(),y=F;if(X.bindFramebuffer(he.FRAMEBUFFER,r)&&W.drawBuffers&&i&&X.drawBuffers(e,r),X.viewport(A),X.scissor(C),X.setScissorTest(y),a){const i=Y.get(e.texture);he.framebufferTexture2D(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,he.TEXTURE_CUBE_MAP_POSITIVE_X+t,i.__webglTexture,n)}else if(o){const i=Y.get(e.texture),r=t||0;he.framebufferTextureLayer(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,i.__webglTexture,n||0,r)}T=-1},this.readRenderTargetPixels=function(e,t,n,i,r,a,o){if(!e||!e.isWebGLRenderTarget)return;let s=Y.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&void 0!==o&&(s=s[o]),s){X.bindFramebuffer(he.FRAMEBUFFER,s);try{const o=e.texture,s=o.format,l=o.type;if(1023!==s&&de.convert(s)!==he.getParameter(he.IMPLEMENTATION_COLOR_READ_FORMAT))return;const c=1016===l&&(V.has("EXT_color_buffer_half_float")||W.isWebGL2&&V.has("EXT_color_buffer_float"));if(!(1009===l||de.convert(l)===he.getParameter(he.IMPLEMENTATION_COLOR_READ_TYPE)||1015===l&&(W.isWebGL2||V.has("OES_texture_float")||V.has("WEBGL_color_buffer_float"))||c))return;t>=0&&t<=e.width-i&&n>=0&&n<=e.height-r&&he.readPixels(t,n,i,r,de.convert(s),de.convert(l),a)}finally{const e=null!==S?Y.get(S).__webglFramebuffer:null;X.bindFramebuffer(he.FRAMEBUFFER,e)}}},this.copyFramebufferToTexture=function(e,t,n=0){const i=Math.pow(2,-n),r=Math.floor(t.image.width*i),a=Math.floor(t.image.height*i);K.setTexture2D(t,0),he.copyTexSubImage2D(he.TEXTURE_2D,n,0,0,e.x,e.y,r,a),X.unbindTexture()},this.copyTextureToTexture=function(e,t,n,i=0){const r=t.image.width,a=t.image.height,o=de.convert(n.format),s=de.convert(n.type);K.setTexture2D(n,0),he.pixelStorei(he.UNPACK_FLIP_Y_WEBGL,n.flipY),he.pixelStorei(he.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),he.pixelStorei(he.UNPACK_ALIGNMENT,n.unpackAlignment),t.isDataTexture?he.texSubImage2D(he.TEXTURE_2D,i,e.x,e.y,r,a,o,s,t.image.data):t.isCompressedTexture?he.compressedTexSubImage2D(he.TEXTURE_2D,i,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,o,t.mipmaps[0].data):he.texSubImage2D(he.TEXTURE_2D,i,e.x,e.y,o,s,t.image),0===i&&n.generateMipmaps&&he.generateMipmap(he.TEXTURE_2D),X.unbindTexture()},this.copyTextureToTexture3D=function(e,t,n,i,r=0){if(_.isWebGL1Renderer)return;const a=e.max.x-e.min.x+1,o=e.max.y-e.min.y+1,s=e.max.z-e.min.z+1,l=de.convert(i.format),c=de.convert(i.type);let d;if(i.isData3DTexture)K.setTexture3D(i,0),d=he.TEXTURE_3D;else{if(!i.isDataArrayTexture)return;K.setTexture2DArray(i,0),d=he.TEXTURE_2D_ARRAY}he.pixelStorei(he.UNPACK_FLIP_Y_WEBGL,i.flipY),he.pixelStorei(he.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),he.pixelStorei(he.UNPACK_ALIGNMENT,i.unpackAlignment);const u=he.getParameter(he.UNPACK_ROW_LENGTH),h=he.getParameter(he.UNPACK_IMAGE_HEIGHT),f=he.getParameter(he.UNPACK_SKIP_PIXELS),p=he.getParameter(he.UNPACK_SKIP_ROWS),m=he.getParameter(he.UNPACK_SKIP_IMAGES),g=n.isCompressedTexture?n.mipmaps[0]:n.image;he.pixelStorei(he.UNPACK_ROW_LENGTH,g.width),he.pixelStorei(he.UNPACK_IMAGE_HEIGHT,g.height),he.pixelStorei(he.UNPACK_SKIP_PIXELS,e.min.x),he.pixelStorei(he.UNPACK_SKIP_ROWS,e.min.y),he.pixelStorei(he.UNPACK_SKIP_IMAGES,e.min.z),n.isDataTexture||n.isData3DTexture?he.texSubImage3D(d,r,t.x,t.y,t.z,a,o,s,l,c,g.data):n.isCompressedTexture?he.compressedTexSubImage3D(d,r,t.x,t.y,t.z,a,o,s,l,g.data):he.texSubImage3D(d,r,t.x,t.y,t.z,a,o,s,l,c,g),he.pixelStorei(he.UNPACK_ROW_LENGTH,u),he.pixelStorei(he.UNPACK_IMAGE_HEIGHT,h),he.pixelStorei(he.UNPACK_SKIP_PIXELS,f),he.pixelStorei(he.UNPACK_SKIP_ROWS,p),he.pixelStorei(he.UNPACK_SKIP_IMAGES,m),0===r&&i.generateMipmaps&&he.generateMipmap(d),X.unbindTexture()},this.initTexture=function(e){K.setTexture2D(e,0),X.unbindTexture()},this.resetState=function(){v=0,E=0,S=null,X.reset(),ue.reset()}}class Nn extends k{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}}class Un extends W{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new f(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new f(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new l(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}}const Fn={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]}},On=new class{constructor(e,t,n){const i=this;let r,a=!1,o=0,s=0;const l=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){s++,!1===a&&void 0!==i.onStart&&i.onStart(e,o,s),a=!0},this.itemEnd=function(e){o++,void 0!==i.onProgress&&i.onProgress(e,o,s),o===s&&(a=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(e){void 0!==i.onError&&i.onError(e)},this.resolveURL=function(e){return r?r(e):e},this.setURLModifier=function(e){return r=e,this},this.addHandler=function(e,t){return l.push(e,t),this},this.removeHandler=function(e){const t=l.indexOf(e);return-1!==t&&l.splice(t,2),this},this.getHandler=function(e){for(let t=0,n=l.length;t<n;t+=2){const n=l[t],i=l[t+1];if(n.global&&(n.lastIndex=0),n.test(e))return i}return null}}};class Bn{constructor(e){this.manager=void 0!==e?e:On,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}setCrossOrigin(e){return this.crossOrigin=e,this}setPath(e){return this.path=e,this}}class Gn extends Bn{constructor(e){super(e)}load(e,t,n,i){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,a=Fn.get(e);if(void 0!==a)return r.manager.itemStart(e),setTimeout((function(){t&&t(a),r.manager.itemEnd(e)}),0),a;const o=d("img");function s(e){}return o.addEventListener("load",(function n(){o.removeEventListener("load",n,!1),o.removeEventListener("error",s,!1),Fn.add(e,this),t&&t(this),r.manager.itemEnd(e)}),!1),o.addEventListener("error",s,!1),"data:"!==e.slice(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(e),o.src=e,o}}class Hn extends Bn{constructor(e){super(e)}load(e,t,n,i){const r=new v,a=new Gn(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,(function(e){r.image=e,r.needsUpdate=!0,void 0!==t&&t(r)}),n,i),r}}class zn{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}makeSafe(){const e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(r(t/this.radius,-1,1))),this}}var kn=function(){var e=0,t=document.createElement("div");function n(e){return t.appendChild(e.dom),e}function i(n){for(var i=0;i<t.children.length;i++)t.children[i].style.display=i===n?"block":"none";e=n}t.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",t.addEventListener("click",(function(n){n.preventDefault(),i(++e%t.children.length)}),!1);var r=(performance||Date).now(),a=r,o=0,s=n(new kn.Panel("FPS","#0ff","#002")),l=n(new kn.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var c=n(new kn.Panel("MB","#f08","#201"));return i(0),{REVISION:16,dom:t,addPanel:n,showPanel:i,end:function(){o++;var e=(performance||Date).now();if(l.update(e-r,200),e>=a+1e3&&(s.update(1e3*o/(e-a),100),a=e,o=0,c)){var t=performance.memory;c.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){r=this.end()},domElement:t,setMode:i}};kn.Panel=function(e,t,n){var i=1/0,r=0,a=Math.round,o=a(window.devicePixelRatio||1),s=80*o,l=48*o,c=3*o,d=2*o,u=3*o,h=15*o,f=74*o,p=30*o,m=document.createElement("canvas");m.width=s,m.height=l,m.style.cssText="width:80px;height:48px";var g=m.getContext("2d");return g.font="bold "+9*o+"px Helvetica,Arial,sans-serif",g.textBaseline="top",g.fillStyle=n,g.fillRect(0,0,s,l),g.fillStyle=t,g.fillText(e,c,d),g.fillRect(u,h,f,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(u,h,f,p),{dom:m,update:function(l,_){i=Math.min(i,l),r=Math.max(r,l),g.fillStyle=n,g.globalAlpha=1,g.fillRect(0,0,s,h),g.fillStyle=t,g.fillText(a(l)+" "+e+" ("+a(i)+"-"+a(r)+")",c,d),g.drawImage(m,u+o,h,f-o,p,u,h,f-o,p),g.fillRect(u+f-o,h,o,p),g.fillStyle=n,g.globalAlpha=.9,g.fillRect(u+f-o,h,o,a((1-l/_)*p))}}};var Vn=kn;class Wn{constructor(e,t,n,i,r="div"){this.parent=e,this.object=t,this.property=n,this._disabled=!1,this.initialValue=this.getValue(),this.domElement=document.createElement("div"),this.domElement.classList.add("controller"),this.domElement.classList.add(i),this.$name=document.createElement("div"),this.$name.classList.add("name"),Wn.nextNameID=Wn.nextNameID||0,this.$name.id="lil-gui-name-"+ ++Wn.nextNameID,this.$widget=document.createElement(r),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(n)}name(e){return this._name=e,this.$name.innerHTML=e,this}onChange(e){return this._onChange=e,this}_callOnChange(){this.parent._callOnChange(this),void 0!==this._onChange&&this._onChange.call(this,this.getValue()),this._changed=!0}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),void 0!==this._onFinishChange&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}listen(e=!0){return this._listening=e,void 0!==this._listenCallbackID&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback),this.updateDisplay()}getValue(){return this.object[this.property]}setValue(e){return this.object[this.property]=e,this._callOnChange(),this.updateDisplay(),this}}class Xn extends Wn{}class jn extends Wn{}class Yn extends Wn{constructor(e,t,n,i,r,a){super(e,t,n,"number"),this._initInput(),this.min(i),this.max(r);const o=void 0!==a;this.step(o?a:this._getImplicitStep(),o),this.updateDisplay()}min(e){return this._min=e,this._onUpdateMinMax(),this}max(e){return this._max=e,this._onUpdateMinMax(),this}step(e,t=!0){return this._step=e,this._stepExplicit=t,this}updateDisplay(){const e=this.getValue();if(this._hasSlider){let t=(e-this._min)/(this._max-this._min);t=Math.max(0,Math.min(t,1)),this.$fill.style.width=100*t+"%"}return this._inputFocused||(this.$input.value=e),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$disable=this.$input;const e=e=>{const t=parseFloat(this.$input.value);isNaN(t)||(this._snapClampSetValue(t+e),this.$input.value=this.getValue())};let t,n,i,r,a,o=!1;const s=e=>{if(o){const i=e.clientX-t,r=e.clientY-n;Math.abs(r)>5?(e.preventDefault(),this.$input.blur(),o=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(i)>5&&l()}if(!o){const t=e.clientY-i;a-=t*this._step*this._arrowKeyMultiplier(e),r+a>this._max?a=this._max-r:r+a<this._min&&(a=this._min-r),this._snapClampSetValue(r+a)}i=e.clientY},l=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",s),window.removeEventListener("mouseup",l)};this.$input.addEventListener("input",(()=>{const e=parseFloat(this.$input.value);isNaN(e)||this.setValue(this._clamp(e))})),this.$input.addEventListener("keydown",(t=>{"Enter"===t.code&&this.$input.blur(),"ArrowUp"===t.code&&(t.preventDefault(),e(this._step*this._arrowKeyMultiplier(t))),"ArrowDown"===t.code&&(t.preventDefault(),e(this._step*this._arrowKeyMultiplier(t)*-1))})),this.$input.addEventListener("wheel",(t=>{this._inputFocused&&(t.preventDefault(),e(this._step*this._normalizeMouseWheel(t)))})),this.$input.addEventListener("mousedown",(e=>{t=e.clientX,n=i=e.clientY,o=!0,r=this.getValue(),a=0,window.addEventListener("mousemove",s),window.addEventListener("mouseup",l)})),this.$input.addEventListener("focus",(()=>{this._inputFocused=!0})),this.$input.addEventListener("blur",(()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()}))}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const e=e=>{const t=this.$slider.getBoundingClientRect();let n=(i=e,r=t.left,a=t.right,o=this._min,(i-r)/(a-r)*(this._max-o)+o);var i,r,a,o;this._snapClampSetValue(n)},t=t=>{e(t.clientX)},n=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",t),window.removeEventListener("mouseup",n)};let i,r,a=!1;const o=t=>{t.preventDefault(),this._setDraggingStyle(!0),e(t.touches[0].clientX),a=!1},s=t=>{if(a){const e=t.touches[0].clientX-i,n=t.touches[0].clientY-r;Math.abs(e)>Math.abs(n)?o(t):(window.removeEventListener("touchmove",s),window.removeEventListener("touchend",l))}else t.preventDefault(),e(t.touches[0].clientX)},l=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",s),window.removeEventListener("touchend",l)},c=this._callOnFinishChange.bind(this);let d;this.$slider.addEventListener("mousedown",(i=>{this._setDraggingStyle(!0),e(i.clientX),window.addEventListener("mousemove",t),window.addEventListener("mouseup",n)})),this.$slider.addEventListener("touchstart",(e=>{e.touches.length>1||(this._hasScrollBar?(i=e.touches[0].clientX,r=e.touches[0].clientY,a=!0):o(e),window.addEventListener("touchmove",s),window.addEventListener("touchend",l))})),this.$slider.addEventListener("wheel",(e=>{if(Math.abs(e.deltaX)<Math.abs(e.deltaY)&&this._hasScrollBar)return;e.preventDefault();const t=this._normalizeMouseWheel(e)*this._step;this._snapClampSetValue(this.getValue()+t),this.$input.value=this.getValue(),clearTimeout(d),d=setTimeout(c,400)}))}_setDraggingStyle(e,t="horizontal"){this.$slider&&this.$slider.classList.toggle("active",e),document.body.classList.toggle("lil-gui-dragging",e),document.body.classList.toggle("lil-gui-"+t,e)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_snap(e){const t=Math.round(e/this._step)*this._step;return parseFloat(t.toPrecision(15))}_clamp(e){return e<this._min&&(e=this._min),e>this._max&&(e=this._max),e}_snapClampSetValue(e){this.setValue(this._clamp(this._snap(e)))}get _hasMin(){return void 0!==this._min}get _hasMax(){return void 0!==this._max}}class Kn extends Wn{}class qn extends Wn{}let Zn=!1;class $n{constructor({parent:e,autoPlace:t=void 0===e,container:n,width:i,title:r="Controls",injectStyles:a=!0,touchStyles:o=!0}={}){if(this.parent=e,this.root=e?e.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",(()=>this.openAnimated(this._closed))),this.$title.addEventListener("keydown",(e=>{"Enter"!==e.code&&"Space"!==e.code||(e.preventDefault(),this.$title.click())})),this.$title.addEventListener("touchstart",(()=>{})),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(r),o&&this.domElement.classList.add("allow-touch-styles"),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),!Zn&&a&&(function(e){const t=document.createElement("style");t.innerHTML='.lil-gui{--background-color:#1f1f1f;--text-color:#ebebeb;--title-background-color:#111;--title-text-color:#ebebeb;--widget-color:#424242;--hover-color:#4f4f4f;--focus-color:#595959;--number-color:#2cc9ff;--string-color:#a2db3c;--font-size:11px;--input-font-size:11px;--font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Arial,sans-serif;--font-family-mono:Menlo,Monaco,Consolas,"Droid Sans Mono",monospace;--padding:4px;--spacing:4px;--widget-height:20px;--name-width:45%;--slider-knob-width:2px;--slider-input-width:27%;--color-input-width:27%;--slider-input-min-width:45px;--color-input-min-width:45px;--folder-indent:7px;--widget-padding:0 0 0 3px;--widget-border-radius:2px;--checkbox-size:calc(var(--widget-height)*0.75);--scrollbar-width:5px;background-color:var(--background-color);color:var(--text-color);font-family:var(--font-family);font-size:var(--font-size);font-style:normal;font-weight:400;line-height:1;text-align:left;touch-action:manipulation;user-select:none;-webkit-user-select:none}.lil-gui,.lil-gui *{box-sizing:border-box;margin:0;padding:0}.lil-gui.root{display:flex;flex-direction:column;width:var(--width,245px)}.lil-gui.root>.title{background:var(--title-background-color);color:var(--title-text-color)}.lil-gui.root>.children{overflow-x:hidden;overflow-y:auto}.lil-gui.root>.children::-webkit-scrollbar{background:var(--background-color);height:var(--scrollbar-width);width:var(--scrollbar-width)}.lil-gui.root>.children::-webkit-scrollbar-thumb{background:var(--focus-color);border-radius:var(--scrollbar-width)}.lil-gui.force-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}.lil-gui.autoPlace{max-height:100%;position:fixed;right:15px;top:0;z-index:1001}.lil-gui .controller{align-items:center;display:flex;margin:var(--spacing) 0;padding:0 var(--padding)}.lil-gui .controller.disabled{opacity:.5}.lil-gui .controller.disabled,.lil-gui .controller.disabled *{pointer-events:none!important}.lil-gui .controller>.name{flex-shrink:0;line-height:var(--widget-height);min-width:var(--name-width);padding-right:var(--spacing);white-space:pre}.lil-gui .controller .widget{align-items:center;display:flex;min-height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.string input{color:var(--string-color)}.lil-gui .controller.boolean .widget{cursor:pointer}.lil-gui .controller.color .display{border-radius:var(--widget-border-radius);height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.color input[type=color]{cursor:pointer;height:100%;opacity:0;width:100%}.lil-gui .controller.color input[type=text]{flex-shrink:0;font-family:var(--font-family-mono);margin-left:var(--spacing);min-width:var(--color-input-min-width);width:var(--color-input-width)}.lil-gui .controller.option select{max-width:100%;opacity:0;position:absolute;width:100%}.lil-gui .controller.option .display{background:var(--widget-color);border-radius:var(--widget-border-radius);height:var(--widget-height);line-height:var(--widget-height);max-width:100%;overflow:hidden;padding-left:.55em;padding-right:1.75em;pointer-events:none;position:relative;word-break:break-all}.lil-gui .controller.option .display.active{background:var(--focus-color)}.lil-gui .controller.option .display:after{bottom:0;content:"↕";font-family:lil-gui;padding-right:.375em;position:absolute;right:0;top:0}.lil-gui .controller.option .widget,.lil-gui .controller.option select{cursor:pointer}.lil-gui .controller.number input{color:var(--number-color)}.lil-gui .controller.number.hasSlider input{flex-shrink:0;margin-left:var(--spacing);min-width:var(--slider-input-min-width);width:var(--slider-input-width)}.lil-gui .controller.number .slider{background-color:var(--widget-color);border-radius:var(--widget-border-radius);cursor:ew-resize;height:var(--widget-height);overflow:hidden;padding-right:var(--slider-knob-width);touch-action:pan-y;width:100%}.lil-gui .controller.number .slider.active{background-color:var(--focus-color)}.lil-gui .controller.number .slider.active .fill{opacity:.95}.lil-gui .controller.number .fill{border-right:var(--slider-knob-width) solid var(--number-color);box-sizing:content-box;height:100%}.lil-gui-dragging .lil-gui{--hover-color:var(--widget-color)}.lil-gui-dragging *{cursor:ew-resize!important}.lil-gui-dragging.lil-gui-vertical *{cursor:ns-resize!important}.lil-gui .title{--title-height:calc(var(--widget-height) + var(--spacing)*1.25);-webkit-tap-highlight-color:transparent;text-decoration-skip:objects;cursor:pointer;font-weight:600;height:var(--title-height);line-height:calc(var(--title-height) - 4px);outline:none;padding:0 var(--padding)}.lil-gui .title:before{content:"▾";display:inline-block;font-family:lil-gui;padding-right:2px}.lil-gui .title:active{background:var(--title-background-color);opacity:.75}.lil-gui.root>.title:focus{text-decoration:none!important}.lil-gui.closed>.title:before{content:"▸"}.lil-gui.closed>.children{opacity:0;transform:translateY(-7px)}.lil-gui.closed:not(.transition)>.children{display:none}.lil-gui.transition>.children{overflow:hidden;pointer-events:none;transition-duration:.3s;transition-property:height,opacity,transform;transition-timing-function:cubic-bezier(.2,.6,.35,1)}.lil-gui .children:empty:before{content:"Empty";display:block;font-style:italic;height:var(--widget-height);line-height:var(--widget-height);margin:var(--spacing) 0;opacity:.5;padding:0 var(--padding)}.lil-gui.root>.children>.lil-gui>.title{border-width:0;border-bottom:1px solid var(--widget-color);border-left:0 solid var(--widget-color);border-right:0 solid var(--widget-color);border-top:1px solid var(--widget-color);transition:border-color .3s}.lil-gui.root>.children>.lil-gui.closed>.title{border-bottom-color:transparent}.lil-gui+.controller{border-top:1px solid var(--widget-color);margin-top:0;padding-top:var(--spacing)}.lil-gui .lil-gui .lil-gui>.title{border:none}.lil-gui .lil-gui .lil-gui>.children{border:none;border-left:2px solid var(--widget-color);margin-left:var(--folder-indent)}.lil-gui .lil-gui .controller{border:none}.lil-gui input{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:0;border-radius:var(--widget-border-radius);color:var(--text-color);font-family:var(--font-family);font-size:var(--input-font-size);height:var(--widget-height);outline:none;width:100%}.lil-gui input:disabled{opacity:1}.lil-gui input[type=number],.lil-gui input[type=text]{padding:var(--widget-padding)}.lil-gui input[type=number]:focus,.lil-gui input[type=text]:focus{background:var(--focus-color)}.lil-gui input::-webkit-inner-spin-button,.lil-gui input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.lil-gui input[type=number]{-moz-appearance:textfield}.lil-gui input[type=checkbox]{appearance:none;-webkit-appearance:none;border-radius:var(--widget-border-radius);cursor:pointer;height:var(--checkbox-size);text-align:center;width:var(--checkbox-size)}.lil-gui input[type=checkbox]:checked:before{content:"✓";font-family:lil-gui;font-size:var(--checkbox-size);line-height:var(--checkbox-size)}.lil-gui button{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:1px solid var(--widget-color);border-radius:var(--widget-border-radius);color:var(--text-color);cursor:pointer;font-family:var(--font-family);font-size:var(--font-size);height:var(--widget-height);line-height:calc(var(--widget-height) - 4px);outline:none;text-align:center;text-transform:none;width:100%}.lil-gui button:active{background:var(--focus-color)}@font-face{font-family:lil-gui;src:url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff")}@media (pointer:coarse){.lil-gui.allow-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}}@media (hover:hover){.lil-gui .controller.color .display:hover:before{border:1px solid #fff9;border-radius:var(--widget-border-radius);bottom:0;content:" ";display:block;left:0;position:absolute;right:0;top:0}.lil-gui .controller.option .display.focus{background:var(--focus-color)}.lil-gui .controller.option .widget:hover .display{background:var(--hover-color)}.lil-gui .controller.number .slider:hover{background-color:var(--hover-color)}body:not(.lil-gui-dragging) .lil-gui .title:hover{background:var(--title-background-color);opacity:.85}.lil-gui .title:focus{text-decoration:underline var(--focus-color)}.lil-gui input:hover{background:var(--hover-color)}.lil-gui input:active{background:var(--focus-color)}.lil-gui input[type=checkbox]:focus{box-shadow:inset 0 0 0 1px var(--focus-color)}.lil-gui button:hover{background:var(--hover-color);border-color:var(--hover-color)}.lil-gui button:focus{border-color:var(--focus-color)}}';const n=document.querySelector("head link[rel=stylesheet], head style");n?document.head.insertBefore(t,n):document.head.appendChild(t)}(),Zn=!0),n?n.appendChild(this.domElement):t&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),i&&this.domElement.style.setProperty("--width",i+"px"),this.domElement.addEventListener("keydown",(e=>e.stopPropagation())),this.domElement.addEventListener("keyup",(e=>e.stopPropagation()))}add(e,t,n,i,r){if(Object(n)===n)return new Kn(this,e,t,n);switch(typeof e[t]){case"number":return new Yn(this,e,t,n,i,r);case"boolean":return new Xn(this,e,t);case"string":return new qn(this,e,t);case"function":return new jn(this,e,t)}}addFolder(e){return new $n({parent:this,title:e})}open(e=!0){return this._closed=!e,this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}openAnimated(e=!0){return this._closed=!e,this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame((()=>{const t=this.$children.clientHeight;this.$children.style.height=t+"px",this.domElement.classList.add("transition");const n=e=>{e.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",n))};this.$children.addEventListener("transitionend",n);const i=e?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!e),requestAnimationFrame((()=>{this.$children.style.height=i+"px"}))})),this}title(e){return this._title=e,this.$title.innerHTML=e,this}_callOnChange(e){this.parent&&this.parent._callOnChange(e),void 0!==this._onChange&&this._onChange.call(this,{object:e.object,property:e.property,value:e.getValue(),controller:e})}_callOnFinishChange(e){this.parent&&this.parent._callOnFinishChange(e),void 0!==this._onFinishChange&&this._onFinishChange.call(this,{object:e.object,property:e.property,value:e.getValue(),controller:e})}}const Jn={type:"change"},Qn={type:"start"},ei={type:"end"};class ti extends e{constructor(e,t){super(),document,this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new M,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:0,MIDDLE:1,RIGHT:2},this.touches={ONE:0,TWO:2},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return o.phi},this.getAzimuthalAngle=function(){return o.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",N),this._domElementKeyEvents=e},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(Jn),n.update(),r=i.NONE},this.update=function(){const t=new M,l=(new S).setFromUnitVectors(e.up,new M(0,1,0)),h=l.clone().invert(),f=new M,p=new S,m=2*Math.PI;return function(){const e=n.object.position;t.copy(e).sub(n.target),t.applyQuaternion(l),o.setFromVector3(t),n.autoRotate&&r===i.NONE&&T(void 0),n.enableDamping?(o.theta+=s.theta*n.dampingFactor,o.phi+=s.phi*n.dampingFactor):(o.theta+=s.theta,o.phi+=s.phi);let g=n.minAzimuthAngle,_=n.maxAzimuthAngle;return isFinite(g)&&isFinite(_)&&(g<-Math.PI?g+=m:g>Math.PI&&(g-=m),_<-Math.PI?_+=m:_>Math.PI&&(_-=m),o.theta=g<=_?Math.max(g,Math.min(_,o.theta)):o.theta>(g+_)/2?Math.max(g,o.theta):Math.min(_,o.theta)),o.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,o.phi)),o.makeSafe(),o.radius*=c,o.radius=Math.max(n.minDistance,Math.min(n.maxDistance,o.radius)),!0===n.enableDamping?n.target.addScaledVector(d,n.dampingFactor):n.target.add(d),t.setFromSpherical(o),t.applyQuaternion(h),e.copy(n.target).add(t),n.object.lookAt(n.target),!0===n.enableDamping?(s.theta*=1-n.dampingFactor,s.phi*=1-n.dampingFactor,d.multiplyScalar(1-n.dampingFactor)):(s.set(0,0,0),d.set(0,0,0)),c=1,!!(u||f.distanceToSquared(n.object.position)>a||8*(1-p.dot(n.object.quaternion))>a)&&(n.dispatchEvent(Jn),f.copy(n.object.position),p.copy(n.object.quaternion),u=!1,!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",U),n.domElement.removeEventListener("pointerdown",L),n.domElement.removeEventListener("pointercancel",P),n.domElement.removeEventListener("wheel",I),n.domElement.removeEventListener("pointermove",R),n.domElement.removeEventListener("pointerup",D),null!==n._domElementKeyEvents&&n._domElementKeyEvents.removeEventListener("keydown",N)};const n=this,i={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let r=i.NONE;const a=1e-6,o=new zn,s=new zn;let c=1;const d=new M;let u=!1;const h=new l,f=new l,p=new l,m=new l,g=new l,_=new l;new l,new l,new l;const v=[],x={};function E(){return Math.pow(.95,n.zoomSpeed)}function T(e){s.theta-=e}const b=function(){const e=new M;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),d.add(e)}}(),A=function(){const e=new M;return function(t,i){!0===n.screenSpacePanning?e.setFromMatrixColumn(i,1):(e.setFromMatrixColumn(i,0),e.crossVectors(n.object.up,e)),e.multiplyScalar(t),d.add(e)}}(),w=function(){const e=new M;return function(t,i){const r=n.domElement;if(n.object.isPerspectiveCamera){const a=n.object.position;e.copy(a).sub(n.target);let o=e.length();o*=Math.tan(n.object.fov/2*Math.PI/180),b(2*t*o/r.clientHeight,n.object.matrix),A(2*i*o/r.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(b(t*(n.object.right-n.object.left)/n.object.zoom/r.clientWidth,n.object.matrix),A(i*(n.object.top-n.object.bottom)/n.object.zoom/r.clientHeight,n.object.matrix)):n.enablePan=!1}}();function C(e){h.set(e.clientX,e.clientY)}function y(e){m.set(e.clientX,e.clientY)}function L(e){!1!==n.enabled&&(0===v.length&&(n.domElement.setPointerCapture(e.pointerId),n.domElement.addEventListener("pointermove",R),n.domElement.addEventListener("pointerup",D)),function(e){v.push(e)}(e),"touch"===e.pointerType||function(e){let t;switch(e.button){case 0:t=n.mouseButtons.LEFT;break;case 1:t=n.mouseButtons.MIDDLE;break;case 2:t=n.mouseButtons.RIGHT;break;default:t=-1}switch(t){case 1:if(!1===n.enableZoom)return;r=i.DOLLY;break;case 0:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enablePan)return;y(e),r=i.PAN}else{if(!1===n.enableRotate)return;C(e),r=i.ROTATE}break;case 2:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enableRotate)return;C(e),r=i.ROTATE}else{if(!1===n.enablePan)return;y(e),r=i.PAN}break;default:r=i.NONE}r!==i.NONE&&n.dispatchEvent(Qn)}(e))}function R(e){!1!==n.enabled&&("touch"===e.pointerType||function(e){if(!1!==n.enabled)switch(r){case i.ROTATE:if(!1===n.enableRotate)return;!function(e){f.set(e.clientX,e.clientY),p.subVectors(f,h).multiplyScalar(n.rotateSpeed);const t=n.domElement;var i;T(2*Math.PI*p.x/t.clientHeight),i=2*Math.PI*p.y/t.clientHeight,s.phi-=i,h.copy(f),n.update()}(e);break;case i.DOLLY:if(!1===n.enableZoom)return;break;case i.PAN:if(!1===n.enablePan)return;!function(e){g.set(e.clientX,e.clientY),_.subVectors(g,m).multiplyScalar(n.panSpeed),w(_.x,_.y),m.copy(g),n.update()}(e)}}(e))}function D(e){!function(e){delete x[e.pointerId];for(let t=0;t<v.length;t++)if(v[t].pointerId==e.pointerId)return void v.splice(t,1)}(e),0===v.length&&(n.domElement.releasePointerCapture(e.pointerId),n.domElement.removeEventListener("pointermove",R),n.domElement.removeEventListener("pointerup",D)),n.dispatchEvent(ei),r=i.NONE}function P(e){}function I(e){!1!==n.enabled&&!1!==n.enableZoom&&r===i.NONE&&(e.preventDefault(),n.dispatchEvent(Qn),function(e){var t;e.deltaY<0?(t=E(),n.object.isPerspectiveCamera?c*=t:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/t)),n.object.updateProjectionMatrix(),u=!0):n.enableZoom=!1):e.deltaY>0&&function(e){n.object.isPerspectiveCamera?c/=e:n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom*e)),n.object.updateProjectionMatrix(),u=!0):n.enableZoom=!1}(E()),n.update()}(e),n.dispatchEvent(ei))}function N(e){}function U(e){!1!==n.enabled&&e.preventDefault()}n.domElement.addEventListener("contextmenu",U),n.domElement.addEventListener("pointerdown",L),n.domElement.addEventListener("pointercancel",P),n.domElement.addEventListener("wheel",I,{passive:!1}),this.update()}}class ni extends ne{constructor(e,t={}){super(e),this.isWater=!0;const n=this,i=void 0!==t.textureWidth?t.textureWidth:512,r=void 0!==t.textureHeight?t.textureHeight:512,a=void 0!==t.clipBias?t.clipBias:0,o=void 0!==t.alpha?t.alpha:1,s=void 0!==t.time?t.time:0,l=void 0!==t.waterNormals?t.waterNormals:null,c=void 0!==t.sunDirection?t.sunDirection:new M(.70707,.70707,0),d=new f(void 0!==t.sunColor?t.sunColor:16777215),u=new f(void 0!==t.waterColor?t.waterColor:8355711),h=void 0!==t.eye?t.eye:new M(0,0,0),p=void 0!==t.distortionScale?t.distortionScale:20,m=void 0!==t.side?t.side:0,g=void 0!==t.fog&&t.fog,_=new fe,v=new M,S=new M,T=new M,b=new w,A=new M(0,0,-1),C=new x,y=new M,L=new M,R=new x,D=new w,P=new ce,I=new E(i,r),N={uniforms:oe.merge([Ee.fog,Ee.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new w},sunColor:{value:new f(8355711)},sunDirection:{value:new M(.70707,.70707,0)},eye:{value:new M},waterColor:{value:new f(5592405)}}]),vertexShader:"\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}",fragmentShader:"\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}"},U=new se({fragmentShader:N.fragmentShader,vertexShader:N.vertexShader,uniforms:oe.clone(N.uniforms),lights:!0,side:m,fog:g});U.uniforms.mirrorSampler.value=I.texture,U.uniforms.textureMatrix.value=D,U.uniforms.alpha.value=o,U.uniforms.time.value=s,U.uniforms.normalSampler.value=l,U.uniforms.sunColor.value=d,U.uniforms.waterColor.value=u,U.uniforms.sunDirection.value=c,U.uniforms.distortionScale.value=p,U.uniforms.eye.value=h,n.material=U,n.onBeforeRender=function(e,t,i){if(S.setFromMatrixPosition(n.matrixWorld),T.setFromMatrixPosition(i.matrixWorld),b.extractRotation(n.matrixWorld),v.set(0,0,1),v.applyMatrix4(b),y.subVectors(S,T),y.dot(v)>0)return;y.reflect(v).negate(),y.add(S),b.extractRotation(i.matrixWorld),A.set(0,0,-1),A.applyMatrix4(b),A.add(T),L.subVectors(S,A),L.reflect(v).negate(),L.add(S),P.position.copy(y),P.up.set(0,1,0),P.up.applyMatrix4(b),P.up.reflect(v),P.lookAt(L),P.far=i.far,P.updateMatrixWorld(),P.projectionMatrix.copy(i.projectionMatrix),D.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),D.multiply(P.projectionMatrix),D.multiply(P.matrixWorldInverse),_.setFromNormalAndCoplanarPoint(v,S),_.applyMatrix4(P.matrixWorldInverse),C.set(_.normal.x,_.normal.y,_.normal.z,_.constant);const r=P.projectionMatrix;R.x=(Math.sign(C.x)+r.elements[8])/r.elements[0],R.y=(Math.sign(C.y)+r.elements[9])/r.elements[5],R.z=-1,R.w=(1+r.elements[10])/r.elements[14],C.multiplyScalar(2/C.dot(R)),r.elements[2]=C.x,r.elements[6]=C.y,r.elements[10]=C.z+1-a,r.elements[14]=C.w,h.setFromMatrixPosition(i.matrixWorld);const o=e.getRenderTarget(),s=e.xr.enabled,l=e.shadowMap.autoUpdate;n.visible=!1,e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(I),e.state.buffers.depth.setMask(!0),!1===e.autoClear&&e.clear(),e.render(t,P),n.visible=!0,e.xr.enabled=s,e.shadowMap.autoUpdate=l,e.setRenderTarget(o);const c=i.viewport;void 0!==c&&e.state.viewport(c)}}}class ii extends ne{constructor(){const e=ii.SkyShader,t=new se({name:"SkyShader",fragmentShader:e.fragmentShader,vertexShader:e.vertexShader,uniforms:oe.clone(e.uniforms),side:1,depthWrite:!1});super(new ie(1,1,1),t),this.isSky=!0}}let ri,ai,oi,si,li,ci,di,ui,hi;function fi(){oi.aspect=window.innerWidth/window.innerHeight,oi.updateProjectionMatrix(),li.setSize(window.innerWidth,window.innerHeight)}ii.SkyShader={uniforms:{turbidity:{value:2},rayleigh:{value:1},mieCoefficient:{value:.005},mieDirectionalG:{value:.8},sunPosition:{value:new M},up:{value:new M(0,1,0)}},vertexShader:"\n\t\tuniform vec3 sunPosition;\n\t\tuniform float rayleigh;\n\t\tuniform float turbidity;\n\t\tuniform float mieCoefficient;\n\t\tuniform vec3 up;\n\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\t// constants for atmospheric scattering\n\t\tconst float e = 2.71828182845904523536028747135266249775724709369995957;\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\t// wavelength of used primaries, according to preetham\n\t\tconst vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\tconst vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\tconst float v = 4.0;\n\t\tconst vec3 K = vec3( 0.686, 0.678, 0.666 );\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\tconst vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\tconst float cutoffAngle = 1.6110731556870734;\n\t\tconst float steepness = 1.5;\n\t\tconst float EE = 1000.0;\n\n\t\tfloat sunIntensity( float zenithAngleCos ) {\n\t\t\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );\n\t\t\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );\n\t\t}\n\n\t\tvec3 totalMie( float T ) {\n\t\t\tfloat c = ( 0.2 * T ) * 10E-18;\n\t\t\treturn 0.434 * c * MieConst;\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvWorldPosition = worldPosition.xyz;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n\t\t\tvSunDirection = normalize( sunPosition );\n\n\t\t\tvSunE = sunIntensity( dot( vSunDirection, up ) );\n\n\t\t\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );\n\n\t\t\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );\n\n\t\t\t// extinction (absorbtion + out scattering)\n\t\t\t// rayleigh coefficients\n\t\t\tvBetaR = totalRayleigh * rayleighCoefficient;\n\n\t\t\t// mie coefficients\n\t\t\tvBetaM = totalMie( turbidity ) * mieCoefficient;\n\n\t\t}",fragmentShader:"\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\tuniform float mieDirectionalG;\n\t\tuniform vec3 up;\n\n\t\tconst vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );\n\n\t\t// constants for atmospheric scattering\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\tconst float n = 1.0003; // refractive index of air\n\t\tconst float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\tconst float rayleighZenithLength = 8.4E3;\n\t\tconst float mieZenithLength = 1.25E3;\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\tconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\tconst float THREE_OVER_SIXTEENPI = 0.05968310365946075;\n\t\t// 1.0 / ( 4.0 * pi )\n\t\tconst float ONE_OVER_FOURPI = 0.07957747154594767;\n\n\t\tfloat rayleighPhase( float cosTheta ) {\n\t\t\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );\n\t\t}\n\n\t\tfloat hgPhase( float cosTheta, float g ) {\n\t\t\tfloat g2 = pow( g, 2.0 );\n\t\t\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );\n\t\t\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec3 direction = normalize( vWorldPosition - cameraPos );\n\n\t\t\t// optical length\n\t\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );\n\t\t\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );\n\t\t\tfloat sR = rayleighZenithLength * inverse;\n\t\t\tfloat sM = mieZenithLength * inverse;\n\n\t\t\t// combined extinction factor\n\t\t\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );\n\n\t\t\t// in scattering\n\t\t\tfloat cosTheta = dot( direction, vSunDirection );\n\n\t\t\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );\n\t\t\tvec3 betaRTheta = vBetaR * rPhase;\n\n\t\t\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );\n\t\t\tvec3 betaMTheta = vBetaM * mPhase;\n\n\t\t\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );\n\t\t\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );\n\n\t\t\t// nightsky\n\t\t\tfloat theta = acos( direction.y ); // elevation --\x3e y-axis, [-pi/2, pi/2]\n\t\t\tfloat phi = atan( direction.z, direction.x ); // azimuth --\x3e x-axis [-pi/2, pi/2]\n\t\t\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );\n\t\t\tvec3 L0 = vec3( 0.1 ) * Fex;\n\n\t\t\t// composition + solar disc\n\t\t\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );\n\t\t\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;\n\n\t\t\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );\n\n\t\t\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );\n\n\t\t\tgl_FragColor = vec4( retColor, 1.0 );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\n\t\t}"},function(){ri=document.getElementById("container"),li=new In,li.setPixelRatio(window.devicePixelRatio),li.setSize(window.innerWidth,window.innerHeight),li.toneMapping=4,ri.appendChild(li.domElement),si=new Nn,oi=new ce(55,window.innerWidth/window.innerHeight,1,2e4),oi.position.set(30,30,100),ui=new M;const e=new ve(1e4,1e4);di=new ni(e,{textureWidth:512,textureHeight:512,waterNormals:(new Hn).load("https://rawcdn.githack.com/mrdoob/three.js/r141/examples/textures/waternormals.jpg",(function(e){e.wrapS=e.wrapT=1e3})),sunDirection:new M,sunColor:16777215,waterColor:7695,distortionScale:3.7,fog:void 0!==si.fog}),di.rotation.x=-Math.PI/2,si.add(di);const t=new ii;t.scale.setScalar(1e4),si.add(t);const n=t.material.uniforms;n.turbidity.value=10,n.rayleigh.value=2,n.mieCoefficient.value=.005,n.mieDirectionalG.value=.8;const i={elevation:2,azimuth:180},r=new Fe(li);function o(){const e=a(90-i.elevation),n=a(i.azimuth);ui.setFromSphericalCoords(1,e,n),t.material.uniforms.sunPosition.value.copy(ui),di.material.uniforms.sunDirection.value.copy(ui).normalize(),si.environment=r.fromScene(t).texture}o();const s=new ie(30,30,30),l=new Un({roughness:0});hi=new ne(s,l),si.add(hi),ci=new ti(oi,li.domElement),ci.maxPolarAngle=.495*Math.PI,ci.target.set(0,10,0),ci.minDistance=40,ci.maxDistance=200,ci.update(),ai=new Vn,ri.appendChild(ai.dom);const c=new $n,d=c.addFolder("Sky");d.add(i,"elevation",0,90,.1).onChange(o),d.add(i,"azimuth",-180,180,.1).onChange(o),d.open();const u=di.material.uniforms,h=c.addFolder("Water");h.add(u.distortionScale,"value",0,8,.1).name("distortionScale"),h.add(u.size,"value",.1,10,.1).name("size"),h.open(),window.addEventListener("resize",fi)}(),function e(){requestAnimationFrame(e),function(){const e=.001*performance.now();hi.position.y=20*Math.sin(e)+5,hi.rotation.x=.5*e,hi.rotation.z=.51*e,di.material.uniforms.time.value+=1/60,li.render(si,oi)}(),ai.update()}();
